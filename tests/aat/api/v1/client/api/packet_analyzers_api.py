# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from client.api_client import ApiClient


class PacketAnalyzersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_packet_analyzers(self, create, **kwargs):  # noqa: E501
        """Bulk create packet analyzers  # noqa: E501

        Create multiple packet analyzers. Requests are processed in an all-or-nothing manner, i.e. a single analyzer creation failure causes all analyzer creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_packet_analyzers(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreatePacketAnalyzersRequest create: Bulk creation (required)
        :return: BulkCreatePacketAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_create_packet_analyzers_with_http_info(create, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_packet_analyzers_with_http_info(create, **kwargs)  # noqa: E501
            return data

    def bulk_create_packet_analyzers_with_http_info(self, create, **kwargs):  # noqa: E501
        """Bulk create packet analyzers  # noqa: E501

        Create multiple packet analyzers. Requests are processed in an all-or-nothing manner, i.e. a single analyzer creation failure causes all analyzer creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_packet_analyzers_with_http_info(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreatePacketAnalyzersRequest create: Bulk creation (required)
        :return: BulkCreatePacketAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create' is set
        if ('create' not in params or
                params['create'] is None):
            raise ValueError("Missing the required parameter `create` when calling `bulk_create_packet_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create' in params:
            body_params = params['create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkCreatePacketAnalyzersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_packet_analyzers(self, delete, **kwargs):  # noqa: E501
        """Bulk delete packet analyzers  # noqa: E501

        Delete multiple packet analyzers in a best-effort manner. Analyzers can only be deleted when inactive. Active or Non-existant analyzer ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_packet_analyzers(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeletePacketAnalyzersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_delete_packet_analyzers_with_http_info(delete, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_packet_analyzers_with_http_info(delete, **kwargs)  # noqa: E501
            return data

    def bulk_delete_packet_analyzers_with_http_info(self, delete, **kwargs):  # noqa: E501
        """Bulk delete packet analyzers  # noqa: E501

        Delete multiple packet analyzers in a best-effort manner. Analyzers can only be deleted when inactive. Active or Non-existant analyzer ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_packet_analyzers_with_http_info(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeletePacketAnalyzersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete' is set
        if ('delete' not in params or
                params['delete'] is None):
            raise ValueError("Missing the required parameter `delete` when calling `bulk_delete_packet_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete' in params:
            body_params = params['delete']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_start_packet_analyzers(self, start, **kwargs):  # noqa: E501
        """Bulk start packet analyzers  # noqa: E501

        Start multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_start_packet_analyzers(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStartPacketAnalyzersRequest start: Bulk start (required)
        :return: BulkStartPacketAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_start_packet_analyzers_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_start_packet_analyzers_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def bulk_start_packet_analyzers_with_http_info(self, start, **kwargs):  # noqa: E501
        """Bulk start packet analyzers  # noqa: E501

        Start multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_start_packet_analyzers_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStartPacketAnalyzersRequest start: Bulk start (required)
        :return: BulkStartPacketAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_start_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `bulk_start_packet_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start' in params:
            body_params = params['start']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkStartPacketAnalyzersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_stop_packet_analyzers(self, stop, **kwargs):  # noqa: E501
        """Bulk stop packet analyzers  # noqa: E501

        Stop multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_stop_packet_analyzers(stop, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStopPacketAnalyzersRequest stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_stop_packet_analyzers_with_http_info(stop, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_stop_packet_analyzers_with_http_info(stop, **kwargs)  # noqa: E501
            return data

    def bulk_stop_packet_analyzers_with_http_info(self, stop, **kwargs):  # noqa: E501
        """Bulk stop packet analyzers  # noqa: E501

        Stop multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_stop_packet_analyzers_with_http_info(stop, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStopPacketAnalyzersRequest stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_stop_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stop' is set
        if ('stop' not in params or
                params['stop'] is None):
            raise ValueError("Missing the required parameter `stop` when calling `bulk_stop_packet_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stop' in params:
            body_params = params['stop']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_packet_analyzer(self, analyzer, **kwargs):  # noqa: E501
        """Create a packet analyzer  # noqa: E501

        Create a new packet analyzer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_packet_analyzer(analyzer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PacketAnalyzer analyzer: New packet analyzer (required)
        :return: PacketAnalyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_packet_analyzer_with_http_info(analyzer, **kwargs)  # noqa: E501
        else:
            (data) = self.create_packet_analyzer_with_http_info(analyzer, **kwargs)  # noqa: E501
            return data

    def create_packet_analyzer_with_http_info(self, analyzer, **kwargs):  # noqa: E501
        """Create a packet analyzer  # noqa: E501

        Create a new packet analyzer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_packet_analyzer_with_http_info(analyzer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PacketAnalyzer analyzer: New packet analyzer (required)
        :return: PacketAnalyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analyzer' is set
        if ('analyzer' not in params or
                params['analyzer'] is None):
            raise ValueError("Missing the required parameter `analyzer` when calling `create_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analyzer' in params:
            body_params = params['analyzer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketAnalyzer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_packet_analyzer(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer  # noqa: E501

        Delete a stopped packet analyzer by id. Also delete all results created by this analyzer. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_packet_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer  # noqa: E501

        Delete a stopped packet analyzer by id. Also delete all results created by this analyzer. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_packet_analyzer_result(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer result  # noqa: E501

        Delete an inactive packet analyzer result. Also deletes all child rx-flow objects. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer_result(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_packet_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_packet_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_packet_analyzer_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer result  # noqa: E501

        Delete an inactive packet analyzer result. Also deletes all child rx-flow objects. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer_result_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_packet_analyzer_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_packet_analyzer_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_packet_analyzer_results(self, **kwargs):  # noqa: E501
        """Delete all analyzer results  # noqa: E501

        Delete all inactive packet analyzer results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_packet_analyzer_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_packet_analyzer_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_packet_analyzer_results_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all analyzer results  # noqa: E501

        Delete all inactive packet analyzer results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzer_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_packet_analyzer_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_packet_analyzers(self, **kwargs):  # noqa: E501
        """Delete all packet analyzers  # noqa: E501

        Delete all inactive packet analyzers and their results. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_packet_analyzers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_packet_analyzers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_packet_analyzers_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all packet analyzers  # noqa: E501

        Delete all inactive packet analyzers and their results. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_analyzers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_packet_analyzer(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer  # noqa: E501

        Return a packet analyzer by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_packet_analyzer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_packet_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer  # noqa: E501

        Return a packet analyzer by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_packet_analyzer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketAnalyzer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_packet_analyzer_result(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer result  # noqa: E501

        Returns results from a packet analyzer by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_packet_analyzer_result(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_packet_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_packet_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_packet_analyzer_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer result  # noqa: E501

        Returns results from a packet analyzer by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_packet_analyzer_result_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_packet_analyzer_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_packet_analyzer_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketAnalyzerResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rx_flow(self, id, **kwargs):  # noqa: E501
        """Get packet flow counters for a single flow  # noqa: E501

        Returns packet flow counters by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rx_flow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: RxFlow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rx_flow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rx_flow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_rx_flow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get packet flow counters for a single flow  # noqa: E501

        Returns packet flow counters by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rx_flow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: RxFlow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rx_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_rx_flow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/rx-flows/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RxFlow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_packet_analyzer_results(self, **kwargs):  # noqa: E501
        """List analyzer results  # noqa: E501

        The `analyzer-results` endpoint returns all analyzer results created by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_analyzer_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analyzer_id: Filter by analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[PacketAnalyzerResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_packet_analyzer_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_packet_analyzer_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_packet_analyzer_results_with_http_info(self, **kwargs):  # noqa: E501
        """List analyzer results  # noqa: E501

        The `analyzer-results` endpoint returns all analyzer results created by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_analyzer_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analyzer_id: Filter by analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[PacketAnalyzerResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer_id', 'source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_packet_analyzer_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analyzer_id' in params:
            query_params.append(('analyzer_id', params['analyzer_id']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PacketAnalyzerResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_packet_analyzers(self, **kwargs):  # noqa: E501
        """List packet analyzers  # noqa: E501

        The `analyzers` endpoint returns all packet analyzers that are configured to collect and report port and flow statistics.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_analyzers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: Filter by source id
        :return: list[PacketAnalyzer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_packet_analyzers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_packet_analyzers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_packet_analyzers_with_http_info(self, **kwargs):  # noqa: E501
        """List packet analyzers  # noqa: E501

        The `analyzers` endpoint returns all packet analyzers that are configured to collect and report port and flow statistics.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_analyzers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: Filter by source id
        :return: list[PacketAnalyzer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_packet_analyzers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PacketAnalyzer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_rx_flows(self, **kwargs):  # noqa: E501
        """List received packet flows  # noqa: E501

        The `rx-flows` endpoint returns all packet flows that have been received by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rx_flows(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analyzer_id: Filter by receive analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[RxFlow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_rx_flows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_rx_flows_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_rx_flows_with_http_info(self, **kwargs):  # noqa: E501
        """List received packet flows  # noqa: E501

        The `rx-flows` endpoint returns all packet flows that have been received by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rx_flows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analyzer_id: Filter by receive analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[RxFlow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer_id', 'source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_rx_flows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analyzer_id' in params:
            query_params.append(('analyzer_id', params['analyzer_id']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/rx-flows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RxFlow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_packet_analyzer(self, id, **kwargs):  # noqa: E501
        """Reset a running analyzer.  # noqa: E501

        Used to generate a new result for a running analyzer. This method effective resets all analyzer counters to zero. Note that the new analyzer result will not contain any flow results until packets are received after the reset event. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_packet_analyzer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def reset_packet_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Reset a running analyzer.  # noqa: E501

        Used to generate a new result for a running analyzer. This method effective resets all analyzer counters to zero. Note that the new analyzer result will not contain any flow results until packets are received after the reset event. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_packet_analyzer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reset_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketAnalyzerResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_packet_analyzer(self, id, **kwargs):  # noqa: E501
        """Start analyzing and collecting packet statistics.  # noqa: E501

        Used to start a non-running analyzer. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_packet_analyzer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def start_packet_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start analyzing and collecting packet statistics.  # noqa: E501

        Used to start a non-running analyzer. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_packet_analyzer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: PacketAnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `start_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketAnalyzerResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_packet_analyzer(self, id, **kwargs):  # noqa: E501
        """Stop analyzing and collecting packet statistics  # noqa: E501

        Use to halt a running analyzer. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_packet_analyzer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_packet_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stop_packet_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Stop analyzing and collecting packet statistics  # noqa: E501

        Use to halt a running analyzer. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_packet_analyzer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_packet_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stop_packet_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
