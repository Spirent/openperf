# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from client.api_client import ApiClient


class AnalyzersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_analyzers(self, create, **kwargs):  # noqa: E501
        """Bulk create packet analyzers  # noqa: E501

        Create multiple packet analyzers. Requests are processed in an all-or-nothing manner, i.e. a single analyzer creation failure causes all analyzer creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_create_analyzers(create, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkCreateAnalyzersRequest create: Bulk creation (required)
        :return: BulkCreateAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_create_analyzers_with_http_info(create, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_analyzers_with_http_info(create, **kwargs)  # noqa: E501
            return data

    def bulk_create_analyzers_with_http_info(self, create, **kwargs):  # noqa: E501
        """Bulk create packet analyzers  # noqa: E501

        Create multiple packet analyzers. Requests are processed in an all-or-nothing manner, i.e. a single analyzer creation failure causes all analyzer creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_create_analyzers_with_http_info(create, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkCreateAnalyzersRequest create: Bulk creation (required)
        :return: BulkCreateAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create' is set
        if ('create' not in params or
                params['create'] is None):
            raise ValueError("Missing the required parameter `create` when calling `bulk_create_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create' in params:
            body_params = params['create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkCreateAnalyzersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_analyzers(self, delete, **kwargs):  # noqa: E501
        """Bulk delete packet analyzers  # noqa: E501

        Delete multiple packet analyzers in a best-effort manner. Analyzers can only be deleted when inactive. Active or Non-existant analyzer ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_analyzers(delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkDeleteAnalyzersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_delete_analyzers_with_http_info(delete, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_analyzers_with_http_info(delete, **kwargs)  # noqa: E501
            return data

    def bulk_delete_analyzers_with_http_info(self, delete, **kwargs):  # noqa: E501
        """Bulk delete packet analyzers  # noqa: E501

        Delete multiple packet analyzers in a best-effort manner. Analyzers can only be deleted when inactive. Active or Non-existant analyzer ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_delete_analyzers_with_http_info(delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkDeleteAnalyzersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete' is set
        if ('delete' not in params or
                params['delete'] is None):
            raise ValueError("Missing the required parameter `delete` when calling `bulk_delete_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete' in params:
            body_params = params['delete']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_start_analyzers(self, start, **kwargs):  # noqa: E501
        """Bulk start packet analyzers  # noqa: E501

        Start multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_start_analyzers(start, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkStartAnalyzersRequest start: Bulk start (required)
        :return: BulkStartAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_start_analyzers_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_start_analyzers_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def bulk_start_analyzers_with_http_info(self, start, **kwargs):  # noqa: E501
        """Bulk start packet analyzers  # noqa: E501

        Start multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_start_analyzers_with_http_info(start, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkStartAnalyzersRequest start: Bulk start (required)
        :return: BulkStartAnalyzersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_start_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `bulk_start_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start' in params:
            body_params = params['start']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkStartAnalyzersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_stop_analyzers(self, stop, **kwargs):  # noqa: E501
        """Bulk stop packet analyzers  # noqa: E501

        Stop multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_stop_analyzers(stop, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkStopAnalyzersRequest stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bulk_stop_analyzers_with_http_info(stop, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_stop_analyzers_with_http_info(stop, **kwargs)  # noqa: E501
            return data

    def bulk_stop_analyzers_with_http_info(self, stop, **kwargs):  # noqa: E501
        """Bulk stop packet analyzers  # noqa: E501

        Stop multiple packet analyzers simultaneously  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bulk_stop_analyzers_with_http_info(stop, async=True)
        >>> result = thread.get()

        :param async bool
        :param BulkStopAnalyzersRequest stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stop']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_stop_analyzers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stop' is set
        if ('stop' not in params or
                params['stop'] is None):
            raise ValueError("Missing the required parameter `stop` when calling `bulk_stop_analyzers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stop' in params:
            body_params = params['stop']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/x/bulk-stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_analyzer(self, analyzer, **kwargs):  # noqa: E501
        """Create a packet analyzer  # noqa: E501

        Create a new packet analyzer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_analyzer(analyzer, async=True)
        >>> result = thread.get()

        :param async bool
        :param Analyzer analyzer: New packet analyzer (required)
        :return: Analyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_analyzer_with_http_info(analyzer, **kwargs)  # noqa: E501
        else:
            (data) = self.create_analyzer_with_http_info(analyzer, **kwargs)  # noqa: E501
            return data

    def create_analyzer_with_http_info(self, analyzer, **kwargs):  # noqa: E501
        """Create a packet analyzer  # noqa: E501

        Create a new packet analyzer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_analyzer_with_http_info(analyzer, async=True)
        >>> result = thread.get()

        :param async bool
        :param Analyzer analyzer: New packet analyzer (required)
        :return: Analyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analyzer' is set
        if ('analyzer' not in params or
                params['analyzer'] is None):
            raise ValueError("Missing the required parameter `analyzer` when calling `create_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analyzer' in params:
            body_params = params['analyzer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analyzer',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analyzer(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer  # noqa: E501

        Delete a stopped packet analyzer by id. Also delete all results created by this analyzer. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer  # noqa: E501

        Delete a stopped packet analyzer by id. Also delete all results created by this analyzer. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analyzer_result(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer result  # noqa: E501

        Delete an inactive packet analyzer result. Also deletes all child rx-stream objects. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer_result(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_analyzer_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a packet analyzer result  # noqa: E501

        Delete an inactive packet analyzer result. Also deletes all child rx-stream objects. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer_result_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analyzer_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_analyzer_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analyzer_results(self, **kwargs):  # noqa: E501
        """Delete all analyzer results  # noqa: E501

        Delete all inactive packet analyzer results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer_results(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_analyzer_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_analyzer_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_analyzer_results_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all analyzer results  # noqa: E501

        Delete all inactive packet analyzer results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzer_results_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analyzer_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analyzers(self, **kwargs):  # noqa: E501
        """Delete all packet analyzers  # noqa: E501

        Delete all inactive packet analyzers and their results. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_analyzers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_analyzers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_analyzers_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all packet analyzers  # noqa: E501

        Delete all inactive packet analyzers and their results. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_analyzers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analyzers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analyzer(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer  # noqa: E501

        Return a packet analyzer by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_analyzer(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: Analyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer  # noqa: E501

        Return a packet analyzer by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_analyzer_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: Analyzer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analyzer',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analyzer_result(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer result  # noqa: E501

        Returns results from a packet analyzer by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_analyzer_result(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: AnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analyzer_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_analyzer_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a packet analyzer result  # noqa: E501

        Returns results from a packet analyzer by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_analyzer_result_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: AnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analyzer_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_analyzer_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyzerResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rx_stream(self, id, **kwargs):  # noqa: E501
        """Get packet stream counters for a single stream  # noqa: E501

        Returns packet stream counters by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_rx_stream(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: RxStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_rx_stream_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rx_stream_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_rx_stream_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get packet stream counters for a single stream  # noqa: E501

        Returns packet stream counters by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_rx_stream_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: RxStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rx_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_rx_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/rx-streams/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RxStream',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_analyzer_results(self, **kwargs):  # noqa: E501
        """List analyzer results  # noqa: E501

        The `analyzer-results` endpoint returns all analyzer results created by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_analyzer_results(async=True)
        >>> result = thread.get()

        :param async bool
        :param str analyzer_id: Filter by analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[AnalyzerResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_analyzer_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_analyzer_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_analyzer_results_with_http_info(self, **kwargs):  # noqa: E501
        """List analyzer results  # noqa: E501

        The `analyzer-results` endpoint returns all analyzer results created by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_analyzer_results_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str analyzer_id: Filter by analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[AnalyzerResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer_id', 'source_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_analyzer_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analyzer_id' in params:
            query_params.append(('analyzer_id', params['analyzer_id']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzer-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AnalyzerResult]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_analyzers(self, **kwargs):  # noqa: E501
        """List packet analyzers  # noqa: E501

        The `analyzers` endpoint returns all packet analyzers that are configured to collect and report port and stream statistics.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_analyzers(async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_id: Filter by source id
        :return: list[Analyzer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_analyzers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_analyzers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_analyzers_with_http_info(self, **kwargs):  # noqa: E501
        """List packet analyzers  # noqa: E501

        The `analyzers` endpoint returns all packet analyzers that are configured to collect and report port and stream statistics.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_analyzers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_id: Filter by source id
        :return: list[Analyzer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_analyzers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Analyzer]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_rx_streams(self, **kwargs):  # noqa: E501
        """List received packet streams  # noqa: E501

        The `rx-streams` endpoint returns all packet streams that have been received by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_rx_streams(async=True)
        >>> result = thread.get()

        :param async bool
        :param str analyzer_id: Filter by receive analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[RxStream]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_rx_streams_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_rx_streams_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_rx_streams_with_http_info(self, **kwargs):  # noqa: E501
        """List received packet streams  # noqa: E501

        The `rx-streams` endpoint returns all packet streams that have been received by analyzer instances.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_rx_streams_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str analyzer_id: Filter by receive analyzer id
        :param str source_id: Filter by receive port or interface id
        :return: list[RxStream]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analyzer_id', 'source_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_rx_streams" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analyzer_id' in params:
            query_params.append(('analyzer_id', params['analyzer_id']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/rx-streams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RxStream]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_analyzer(self, id, **kwargs):  # noqa: E501
        """Start analyzing and collecting packet statistics.  # noqa: E501

        Used to start a non-running analyzer. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_analyzer(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: AnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def start_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start analyzing and collecting packet statistics.  # noqa: E501

        Used to start a non-running analyzer. Creates a new analyzer result on success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_analyzer_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: AnalyzerResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `start_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyzerResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_analyzer(self, id, **kwargs):  # noqa: E501
        """Stop analyzing and collecting packet statistics  # noqa: E501

        Use to halt a running analyzer. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_analyzer(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stop_analyzer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_analyzer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stop_analyzer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Stop analyzing and collecting packet statistics  # noqa: E501

        Use to halt a running analyzer. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_analyzer_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_analyzer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stop_analyzer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packet/analyzers/{id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
