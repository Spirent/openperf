# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from client.api_client import ApiClient


class NetworkGeneratorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_network_generators(self, create, **kwargs):  # noqa: E501
        """Bulk create network generators  # noqa: E501

        Create multiple network generators. Requests are processed in an all-or-nothing manner, i.e. a single network generator creation failure causes all creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_network_generators(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateNetworkGeneratorsRequest create: Bulk creation (required)
        :return: list[NetworkGenerator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_create_network_generators_with_http_info(create, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_network_generators_with_http_info(create, **kwargs)  # noqa: E501
            return data

    def bulk_create_network_generators_with_http_info(self, create, **kwargs):  # noqa: E501
        """Bulk create network generators  # noqa: E501

        Create multiple network generators. Requests are processed in an all-or-nothing manner, i.e. a single network generator creation failure causes all creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_network_generators_with_http_info(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateNetworkGeneratorsRequest create: Bulk creation (required)
        :return: list[NetworkGenerator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_network_generators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create' is set
        if ('create' not in params or
                params['create'] is None):
            raise ValueError("Missing the required parameter `create` when calling `bulk_create_network_generators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create' in params:
            body_params = params['create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/x/bulk-create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkGenerator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_create_network_servers(self, create, **kwargs):  # noqa: E501
        """Bulk create network servers  # noqa: E501

        Create multiple network servers. Requests are processed in an all-or-nothing manner, i.e. a single network server creation failure causes all creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_network_servers(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateNetworkServersRequest create: Bulk creation (required)
        :return: list[NetworkServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_create_network_servers_with_http_info(create, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_network_servers_with_http_info(create, **kwargs)  # noqa: E501
            return data

    def bulk_create_network_servers_with_http_info(self, create, **kwargs):  # noqa: E501
        """Bulk create network servers  # noqa: E501

        Create multiple network servers. Requests are processed in an all-or-nothing manner, i.e. a single network server creation failure causes all creations for this request to fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_network_servers_with_http_info(create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateNetworkServersRequest create: Bulk creation (required)
        :return: list[NetworkServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_network_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create' is set
        if ('create' not in params or
                params['create'] is None):
            raise ValueError("Missing the required parameter `create` when calling `bulk_create_network_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create' in params:
            body_params = params['create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers/x/bulk-create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkServer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_network_generators(self, delete, **kwargs):  # noqa: E501
        """Bulk delete network generators  # noqa: E501

        Delete multiple network generators in a best-effort manner. Non-existant network generators ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_network_generators(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteNetworkGeneratorsRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_delete_network_generators_with_http_info(delete, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_network_generators_with_http_info(delete, **kwargs)  # noqa: E501
            return data

    def bulk_delete_network_generators_with_http_info(self, delete, **kwargs):  # noqa: E501
        """Bulk delete network generators  # noqa: E501

        Delete multiple network generators in a best-effort manner. Non-existant network generators ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_network_generators_with_http_info(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteNetworkGeneratorsRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_network_generators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete' is set
        if ('delete' not in params or
                params['delete'] is None):
            raise ValueError("Missing the required parameter `delete` when calling `bulk_delete_network_generators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete' in params:
            body_params = params['delete']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/x/bulk-delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_network_servers(self, delete, **kwargs):  # noqa: E501
        """Bulk delete network servers  # noqa: E501

        Delete multiple network servers in a best-effort manner. Non-existant network server ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_network_servers(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteNetworkServersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_delete_network_servers_with_http_info(delete, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_network_servers_with_http_info(delete, **kwargs)  # noqa: E501
            return data

    def bulk_delete_network_servers_with_http_info(self, delete, **kwargs):  # noqa: E501
        """Bulk delete network servers  # noqa: E501

        Delete multiple network servers in a best-effort manner. Non-existant network server ids do not cause errors. Idempotent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_network_servers_with_http_info(delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkDeleteNetworkServersRequest delete: Bulk delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_network_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete' is set
        if ('delete' not in params or
                params['delete'] is None):
            raise ValueError("Missing the required parameter `delete` when calling `bulk_delete_network_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete' in params:
            body_params = params['delete']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers/x/bulk-delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_start_network_generators(self, bulk_start, **kwargs):  # noqa: E501
        """Tell multiple network generators to start  # noqa: E501

        Start multiple network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_start_network_generators(bulk_start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStartNetworkGeneratorsRequest bulk_start: Bulk start (required)
        :return: list[NetworkGeneratorResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_start_network_generators_with_http_info(bulk_start, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_start_network_generators_with_http_info(bulk_start, **kwargs)  # noqa: E501
            return data

    def bulk_start_network_generators_with_http_info(self, bulk_start, **kwargs):  # noqa: E501
        """Tell multiple network generators to start  # noqa: E501

        Start multiple network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_start_network_generators_with_http_info(bulk_start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStartNetworkGeneratorsRequest bulk_start: Bulk start (required)
        :return: list[NetworkGeneratorResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_start_network_generators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_start' is set
        if ('bulk_start' not in params or
                params['bulk_start'] is None):
            raise ValueError("Missing the required parameter `bulk_start` when calling `bulk_start_network_generators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_start' in params:
            body_params = params['bulk_start']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/x/bulk-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkGeneratorResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_stop_network_generators(self, bulk_stop, **kwargs):  # noqa: E501
        """Bulk stop network generators  # noqa: E501

        Best-effort stop multiple network generators. Non-existent network generator ids do not cause errors. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_stop_network_generators(bulk_stop, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStopNetworkGeneratorsRequest bulk_stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_stop_network_generators_with_http_info(bulk_stop, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_stop_network_generators_with_http_info(bulk_stop, **kwargs)  # noqa: E501
            return data

    def bulk_stop_network_generators_with_http_info(self, bulk_stop, **kwargs):  # noqa: E501
        """Bulk stop network generators  # noqa: E501

        Best-effort stop multiple network generators. Non-existent network generator ids do not cause errors. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_stop_network_generators_with_http_info(bulk_stop, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkStopNetworkGeneratorsRequest bulk_stop: Bulk stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_stop_network_generators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_stop' is set
        if ('bulk_stop' not in params or
                params['bulk_stop'] is None):
            raise ValueError("Missing the required parameter `bulk_stop` when calling `bulk_stop_network_generators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_stop' in params:
            body_params = params['bulk_stop']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/x/bulk-stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_network_generator(self, generator, **kwargs):  # noqa: E501
        """Create a network generator  # noqa: E501

        Create a new network generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_network_generator(generator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkGenerator generator: New network generator (required)
        :return: NetworkGenerator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_network_generator_with_http_info(generator, **kwargs)  # noqa: E501
        else:
            (data) = self.create_network_generator_with_http_info(generator, **kwargs)  # noqa: E501
            return data

    def create_network_generator_with_http_info(self, generator, **kwargs):  # noqa: E501
        """Create a network generator  # noqa: E501

        Create a new network generator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_network_generator_with_http_info(generator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkGenerator generator: New network generator (required)
        :return: NetworkGenerator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator' is set
        if ('generator' not in params or
                params['generator'] is None):
            raise ValueError("Missing the required parameter `generator` when calling `create_network_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generator' in params:
            body_params = params['generator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGenerator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_network_server(self, server, **kwargs):  # noqa: E501
        """Create and run a network server  # noqa: E501

        Create a new network server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_network_server(server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkServer server: New network server (required)
        :return: NetworkServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_network_server_with_http_info(server, **kwargs)  # noqa: E501
        else:
            (data) = self.create_network_server_with_http_info(server, **kwargs)  # noqa: E501
            return data

    def create_network_server_with_http_info(self, server, **kwargs):  # noqa: E501
        """Create and run a network server  # noqa: E501

        Create a new network server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_network_server_with_http_info(server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NetworkServer server: New network server (required)
        :return: NetworkServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `create_network_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'server' in params:
            body_params = params['server']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_generator(self, id, **kwargs):  # noqa: E501
        """Delete a network generator  # noqa: E501

        Deletes an existing network generator. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_generator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_network_generator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_generator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_network_generator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a network generator  # noqa: E501

        Deletes an existing network generator. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_generator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_network_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_generator_result(self, id, **kwargs):  # noqa: E501
        """Delete results from a network generator. Idempotent.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_generator_result(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_network_generator_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_generator_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_network_generator_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete results from a network generator. Idempotent.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_generator_result_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_generator_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_network_generator_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generator-results/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_server(self, id, **kwargs):  # noqa: E501
        """Delete a network server  # noqa: E501

        Deletes an existing network server. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_server(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_network_server_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_server_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_network_server_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a network server  # noqa: E501

        Deletes an existing network server. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_network_server_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_network_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_generator(self, id, **kwargs):  # noqa: E501
        """Get a network generator  # noqa: E501

        Returns a network generator, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_generator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkGenerator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_generator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_generator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_generator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a network generator  # noqa: E501

        Returns a network generator, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_generator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkGenerator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGenerator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_generator_result(self, id, **kwargs):  # noqa: E501
        """Get a result from a network generator  # noqa: E501

        Returns results from a network generator by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_generator_result(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_generator_result_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_generator_result_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_generator_result_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a result from a network generator  # noqa: E501

        Returns results from a network generator by result id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_generator_result_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_generator_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_generator_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generator-results/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGeneratorResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_server(self, id, **kwargs):  # noqa: E501
        """Get a network server  # noqa: E501

        Returns a network server, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_server(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_network_server_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_server_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_server_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a network server  # noqa: E501

        Returns a network server, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_network_server_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: NetworkServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_network_generator_results(self, **kwargs):  # noqa: E501
        """List network generator results  # noqa: E501

        The `network-generator-results` endpoint returns all of the results produced by running network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_generator_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkGeneratorResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_network_generator_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_network_generator_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_network_generator_results_with_http_info(self, **kwargs):  # noqa: E501
        """List network generator results  # noqa: E501

        The `network-generator-results` endpoint returns all of the results produced by running network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_generator_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkGeneratorResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_generator_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generator-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkGeneratorResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_network_generators(self, **kwargs):  # noqa: E501
        """List network generators  # noqa: E501

        The `network-generators` endpoint returns all of the configured network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_generators(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkGenerator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_network_generators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_network_generators_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_network_generators_with_http_info(self, **kwargs):  # noqa: E501
        """List network generators  # noqa: E501

        The `network-generators` endpoint returns all of the configured network generators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_generators_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkGenerator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_generators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkGenerator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_network_servers(self, **kwargs):  # noqa: E501
        """List network servers  # noqa: E501

        Returns all network servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_network_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_network_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_network_servers_with_http_info(self, **kwargs):  # noqa: E501
        """List network servers  # noqa: E501

        Returns all network servers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_network_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NetworkServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkServer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_network_generator(self, id, **kwargs):  # noqa: E501
        """Start a network generator  # noqa: E501

        Start an existing network generator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_network_generator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :param DynamicResultsConfig dynamic_results: Dynamic results configuration
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_network_generator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_network_generator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def start_network_generator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start a network generator  # noqa: E501

        Start an existing network generator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_network_generator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :param DynamicResultsConfig dynamic_results: Dynamic results configuration
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dynamic_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_network_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `start_network_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dynamic_results' in params:
            body_params = params['dynamic_results']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/{id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGeneratorResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_network_generator(self, id, **kwargs):  # noqa: E501
        """Stop a network generator  # noqa: E501

        Stop a running network generator. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_network_generator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_network_generator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_network_generator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stop_network_generator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Stop a network generator  # noqa: E501

        Stop a running network generator. Idempotent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_network_generator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_network_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stop_network_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/{id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_network_generators(self, toggle, **kwargs):  # noqa: E501
        """Replace a running network generator with a stopped network generator  # noqa: E501

        Swap a running network generator with an idle network generator. Upon success, the idle generator will be in the run state, the running generator will be in the stopped state and all active TCP/UDP sessions will be transferred to the newly running generator. If the original network generator had a read/write load and the new network generator does not have this type of load, these sessions will be immediately stopped.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_network_generators(toggle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToggleNetworkGeneratorsRequest toggle: Network generator toggle (required)
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_network_generators_with_http_info(toggle, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_network_generators_with_http_info(toggle, **kwargs)  # noqa: E501
            return data

    def toggle_network_generators_with_http_info(self, toggle, **kwargs):  # noqa: E501
        """Replace a running network generator with a stopped network generator  # noqa: E501

        Swap a running network generator with an idle network generator. Upon success, the idle generator will be in the run state, the running generator will be in the stopped state and all active TCP/UDP sessions will be transferred to the newly running generator. If the original network generator had a read/write load and the new network generator does not have this type of load, these sessions will be immediately stopped.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_network_generators_with_http_info(toggle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToggleNetworkGeneratorsRequest toggle: Network generator toggle (required)
        :return: NetworkGeneratorResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toggle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_network_generators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toggle' is set
        if ('toggle' not in params or
                params['toggle'] is None):
            raise ValueError("Missing the required parameter `toggle` when calling `toggle_network_generators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'toggle' in params:
            body_params = params['toggle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/network/generators/x/toggle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkGeneratorResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
