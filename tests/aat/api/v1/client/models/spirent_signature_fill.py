# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpirentSignatureFill(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'constant': 'int',
        'decrement': 'int',
        'increment': 'int',
        'prbs': 'bool'
    }

    attribute_map = {
        'constant': 'constant',
        'decrement': 'decrement',
        'increment': 'increment',
        'prbs': 'prbs'
    }

    def __init__(self, constant=None, decrement=None, increment=None, prbs=None):  # noqa: E501
        """SpirentSignatureFill - a model defined in Swagger"""  # noqa: E501

        self._constant = None
        self._decrement = None
        self._increment = None
        self._prbs = None
        self.discriminator = None

        if constant is not None:
            self.constant = constant
        if decrement is not None:
            self.decrement = decrement
        if increment is not None:
            self.increment = increment
        if prbs is not None:
            self.prbs = prbs

    @property
    def constant(self):
        """Gets the constant of this SpirentSignatureFill.  # noqa: E501

        Constant, repeating fill value for payload  # noqa: E501

        :return: The constant of this SpirentSignatureFill.  # noqa: E501
        :rtype: int
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """Sets the constant of this SpirentSignatureFill.

        Constant, repeating fill value for payload  # noqa: E501

        :param constant: The constant of this SpirentSignatureFill.  # noqa: E501
        :type: int
        """
        self._constant = constant

    @property
    def decrement(self):
        """Gets the decrement of this SpirentSignatureFill.  # noqa: E501

        Decrement octet values for payload  # noqa: E501

        :return: The decrement of this SpirentSignatureFill.  # noqa: E501
        :rtype: int
        """
        return self._decrement

    @decrement.setter
    def decrement(self, decrement):
        """Sets the decrement of this SpirentSignatureFill.

        Decrement octet values for payload  # noqa: E501

        :param decrement: The decrement of this SpirentSignatureFill.  # noqa: E501
        :type: int
        """
        self._decrement = decrement

    @property
    def increment(self):
        """Gets the increment of this SpirentSignatureFill.  # noqa: E501

        Increment octet values for payload  # noqa: E501

        :return: The increment of this SpirentSignatureFill.  # noqa: E501
        :rtype: int
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this SpirentSignatureFill.

        Increment octet values for payload  # noqa: E501

        :param increment: The increment of this SpirentSignatureFill.  # noqa: E501
        :type: int
        """
        self._increment = increment

    @property
    def prbs(self):
        """Gets the prbs of this SpirentSignatureFill.  # noqa: E501

        Use pseudo random bit sequence for payload  # noqa: E501

        :return: The prbs of this SpirentSignatureFill.  # noqa: E501
        :rtype: bool
        """
        return self._prbs

    @prbs.setter
    def prbs(self, prbs):
        """Sets the prbs of this SpirentSignatureFill.

        Use pseudo random bit sequence for payload  # noqa: E501

        :param prbs: The prbs of this SpirentSignatureFill.  # noqa: E501
        :type: bool
        """
        self._prbs = prbs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpirentSignatureFill, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpirentSignatureFill):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
