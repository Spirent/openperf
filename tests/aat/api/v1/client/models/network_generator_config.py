# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkGeneratorConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target': 'NetworkGeneratorConfigTarget',
        'connections': 'int',
        'ops_per_connection': 'int',
        'reads_per_sec': 'int',
        'read_size': 'int',
        'writes_per_sec': 'int',
        'write_size': 'int'
    }

    attribute_map = {
        'target': 'target',
        'connections': 'connections',
        'ops_per_connection': 'ops_per_connection',
        'reads_per_sec': 'reads_per_sec',
        'read_size': 'read_size',
        'writes_per_sec': 'writes_per_sec',
        'write_size': 'write_size'
    }

    def __init__(self, target=None, connections=None, ops_per_connection=None, reads_per_sec=None, read_size=None, writes_per_sec=None, write_size=None):  # noqa: E501
        """NetworkGeneratorConfig - a model defined in Swagger"""  # noqa: E501

        self._target = None
        self._connections = None
        self._ops_per_connection = None
        self._reads_per_sec = None
        self._read_size = None
        self._writes_per_sec = None
        self._write_size = None
        self.discriminator = None

        if target is not None:
            self.target = target
        self.connections = connections
        self.ops_per_connection = ops_per_connection
        self.reads_per_sec = reads_per_sec
        self.read_size = read_size
        self.writes_per_sec = writes_per_sec
        self.write_size = write_size

    @property
    def target(self):
        """Gets the target of this NetworkGeneratorConfig.  # noqa: E501


        :return: The target of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: NetworkGeneratorConfigTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NetworkGeneratorConfig.


        :param target: The target of this NetworkGeneratorConfig.  # noqa: E501
        :type: NetworkGeneratorConfigTarget
        """
        self._target = target

    @property
    def connections(self):
        """Gets the connections of this NetworkGeneratorConfig.  # noqa: E501

        Number of connections to establish with the server  # noqa: E501

        :return: The connections of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this NetworkGeneratorConfig.

        Number of connections to establish with the server  # noqa: E501

        :param connections: The connections of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._connections = connections

    @property
    def ops_per_connection(self):
        """Gets the ops_per_connection of this NetworkGeneratorConfig.  # noqa: E501

        Number of operations over a connection before closed  # noqa: E501

        :return: The ops_per_connection of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._ops_per_connection

    @ops_per_connection.setter
    def ops_per_connection(self, ops_per_connection):
        """Sets the ops_per_connection of this NetworkGeneratorConfig.

        Number of operations over a connection before closed  # noqa: E501

        :param ops_per_connection: The ops_per_connection of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._ops_per_connection = ops_per_connection

    @property
    def reads_per_sec(self):
        """Gets the reads_per_sec of this NetworkGeneratorConfig.  # noqa: E501

        Number of read opertions to perform per second  # noqa: E501

        :return: The reads_per_sec of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._reads_per_sec

    @reads_per_sec.setter
    def reads_per_sec(self, reads_per_sec):
        """Sets the reads_per_sec of this NetworkGeneratorConfig.

        Number of read opertions to perform per second  # noqa: E501

        :param reads_per_sec: The reads_per_sec of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._reads_per_sec = reads_per_sec

    @property
    def read_size(self):
        """Gets the read_size of this NetworkGeneratorConfig.  # noqa: E501

        Number of bytes to request from the server per read operation  # noqa: E501

        :return: The read_size of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._read_size

    @read_size.setter
    def read_size(self, read_size):
        """Sets the read_size of this NetworkGeneratorConfig.

        Number of bytes to request from the server per read operation  # noqa: E501

        :param read_size: The read_size of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._read_size = read_size

    @property
    def writes_per_sec(self):
        """Gets the writes_per_sec of this NetworkGeneratorConfig.  # noqa: E501

        Number of write operations to perform per second  # noqa: E501

        :return: The writes_per_sec of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._writes_per_sec

    @writes_per_sec.setter
    def writes_per_sec(self, writes_per_sec):
        """Sets the writes_per_sec of this NetworkGeneratorConfig.

        Number of write operations to perform per second  # noqa: E501

        :param writes_per_sec: The writes_per_sec of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._writes_per_sec = writes_per_sec

    @property
    def write_size(self):
        """Gets the write_size of this NetworkGeneratorConfig.  # noqa: E501

        Number of bytes to send to the server per write operation  # noqa: E501

        :return: The write_size of this NetworkGeneratorConfig.  # noqa: E501
        :rtype: int
        """
        return self._write_size

    @write_size.setter
    def write_size(self, write_size):
        """Sets the write_size of this NetworkGeneratorConfig.

        Number of bytes to send to the server per write operation  # noqa: E501

        :param write_size: The write_size of this NetworkGeneratorConfig.  # noqa: E501
        :type: int
        """
        self._write_size = write_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkGeneratorConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkGeneratorConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
