# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketAnalyzerFlowDigests(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_length': 'PacketAnalyzerFlowDigestResult',
        'interarrival': 'PacketAnalyzerFlowDigestResult',
        'jitter_ipdv': 'PacketAnalyzerFlowDigestResult',
        'jitter_rfc': 'PacketAnalyzerFlowDigestResult',
        'latency': 'PacketAnalyzerFlowDigestResult',
        'sequence_run_length': 'PacketAnalyzerFlowDigestResult'
    }

    attribute_map = {
        'frame_length': 'frame_length',
        'interarrival': 'interarrival',
        'jitter_ipdv': 'jitter_ipdv',
        'jitter_rfc': 'jitter_rfc',
        'latency': 'latency',
        'sequence_run_length': 'sequence_run_length'
    }

    def __init__(self, frame_length=None, interarrival=None, jitter_ipdv=None, jitter_rfc=None, latency=None, sequence_run_length=None):  # noqa: E501
        """PacketAnalyzerFlowDigests - a model defined in Swagger"""  # noqa: E501

        self._frame_length = None
        self._interarrival = None
        self._jitter_ipdv = None
        self._jitter_rfc = None
        self._latency = None
        self._sequence_run_length = None
        self.discriminator = None

        if frame_length is not None:
            self.frame_length = frame_length
        if interarrival is not None:
            self.interarrival = interarrival
        if jitter_ipdv is not None:
            self.jitter_ipdv = jitter_ipdv
        if jitter_rfc is not None:
            self.jitter_rfc = jitter_rfc
        if latency is not None:
            self.latency = latency
        if sequence_run_length is not None:
            self.sequence_run_length = sequence_run_length

    @property
    def frame_length(self):
        """Gets the frame_length of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The frame_length of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._frame_length

    @frame_length.setter
    def frame_length(self, frame_length):
        """Sets the frame_length of this PacketAnalyzerFlowDigests.


        :param frame_length: The frame_length of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._frame_length = frame_length

    @property
    def interarrival(self):
        """Gets the interarrival of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The interarrival of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._interarrival

    @interarrival.setter
    def interarrival(self, interarrival):
        """Sets the interarrival of this PacketAnalyzerFlowDigests.


        :param interarrival: The interarrival of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._interarrival = interarrival

    @property
    def jitter_ipdv(self):
        """Gets the jitter_ipdv of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The jitter_ipdv of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._jitter_ipdv

    @jitter_ipdv.setter
    def jitter_ipdv(self, jitter_ipdv):
        """Sets the jitter_ipdv of this PacketAnalyzerFlowDigests.


        :param jitter_ipdv: The jitter_ipdv of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._jitter_ipdv = jitter_ipdv

    @property
    def jitter_rfc(self):
        """Gets the jitter_rfc of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The jitter_rfc of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._jitter_rfc

    @jitter_rfc.setter
    def jitter_rfc(self, jitter_rfc):
        """Sets the jitter_rfc of this PacketAnalyzerFlowDigests.


        :param jitter_rfc: The jitter_rfc of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._jitter_rfc = jitter_rfc

    @property
    def latency(self):
        """Gets the latency of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The latency of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this PacketAnalyzerFlowDigests.


        :param latency: The latency of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._latency = latency

    @property
    def sequence_run_length(self):
        """Gets the sequence_run_length of this PacketAnalyzerFlowDigests.  # noqa: E501


        :return: The sequence_run_length of this PacketAnalyzerFlowDigests.  # noqa: E501
        :rtype: PacketAnalyzerFlowDigestResult
        """
        return self._sequence_run_length

    @sequence_run_length.setter
    def sequence_run_length(self, sequence_run_length):
        """Sets the sequence_run_length of this PacketAnalyzerFlowDigests.


        :param sequence_run_length: The sequence_run_length of this PacketAnalyzerFlowDigests.  # noqa: E501
        :type: PacketAnalyzerFlowDigestResult
        """
        self._sequence_run_length = sequence_run_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketAnalyzerFlowDigests, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketAnalyzerFlowDigests):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
