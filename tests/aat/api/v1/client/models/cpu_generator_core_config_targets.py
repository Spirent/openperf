# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CpuGeneratorCoreConfigTargets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruction_set': 'str',
        'data_size': 'int',
        'operation': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'instruction_set': 'instruction_set',
        'data_size': 'data_size',
        'operation': 'operation',
        'weight': 'weight'
    }

    def __init__(self, instruction_set=None, data_size=None, operation=None, weight=None):  # noqa: E501
        """CpuGeneratorCoreConfigTargets - a model defined in Swagger"""  # noqa: E501

        self._instruction_set = None
        self._data_size = None
        self._operation = None
        self._weight = None
        self.discriminator = None

        self.instruction_set = instruction_set
        self.data_size = data_size
        self.operation = operation
        self.weight = weight

    @property
    def instruction_set(self):
        """Gets the instruction_set of this CpuGeneratorCoreConfigTargets.  # noqa: E501

        CPU load instruction set  # noqa: E501

        :return: The instruction_set of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :rtype: str
        """
        return self._instruction_set

    @instruction_set.setter
    def instruction_set(self, instruction_set):
        """Sets the instruction_set of this CpuGeneratorCoreConfigTargets.

        CPU load instruction set  # noqa: E501

        :param instruction_set: The instruction_set of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :type: str
        """
        self._instruction_set = instruction_set

    @property
    def data_size(self):
        """Gets the data_size of this CpuGeneratorCoreConfigTargets.  # noqa: E501

        Number of bits to use for data type in chosen instruction set  # noqa: E501

        :return: The data_size of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :rtype: int
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """Sets the data_size of this CpuGeneratorCoreConfigTargets.

        Number of bits to use for data type in chosen instruction set  # noqa: E501

        :param data_size: The data_size of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :type: int
        """
        self._data_size = data_size

    @property
    def operation(self):
        """Gets the operation of this CpuGeneratorCoreConfigTargets.  # noqa: E501

        CPU load target operation, actual for chosen instruction set  # noqa: E501

        :return: The operation of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CpuGeneratorCoreConfigTargets.

        CPU load target operation, actual for chosen instruction set  # noqa: E501

        :param operation: The operation of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :type: str
        """
        self._operation = operation

    @property
    def weight(self):
        """Gets the weight of this CpuGeneratorCoreConfigTargets.  # noqa: E501

        Targeted load ratio  # noqa: E501

        :return: The weight of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CpuGeneratorCoreConfigTargets.

        Targeted load ratio  # noqa: E501

        :param weight: The weight of this CpuGeneratorCoreConfigTargets.  # noqa: E501
        :type: int
        """
        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CpuGeneratorCoreConfigTargets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpuGeneratorCoreConfigTargets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
