# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrafficLoad(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'burst_size': 'int',
        'rate': 'TrafficLoadRate',
        'units': 'str'
    }

    attribute_map = {
        'burst_size': 'burst_size',
        'rate': 'rate',
        'units': 'units'
    }

    def __init__(self, burst_size=1, rate=None, units=None):  # noqa: E501
        """TrafficLoad - a model defined in Swagger"""  # noqa: E501

        self._burst_size = None
        self._rate = None
        self._units = None
        self.discriminator = None

        if burst_size is not None:
            self.burst_size = burst_size
        self.rate = rate
        self.units = units

    @property
    def burst_size(self):
        """Gets the burst_size of this TrafficLoad.  # noqa: E501

        Tells the generator how many packets to transmit as part of an atomic transmit operation. Larger burst sizes are more efficient.   # noqa: E501

        :return: The burst_size of this TrafficLoad.  # noqa: E501
        :rtype: int
        """
        return self._burst_size

    @burst_size.setter
    def burst_size(self, burst_size):
        """Sets the burst_size of this TrafficLoad.

        Tells the generator how many packets to transmit as part of an atomic transmit operation. Larger burst sizes are more efficient.   # noqa: E501

        :param burst_size: The burst_size of this TrafficLoad.  # noqa: E501
        :type: int
        """
        self._burst_size = burst_size

    @property
    def rate(self):
        """Gets the rate of this TrafficLoad.  # noqa: E501


        :return: The rate of this TrafficLoad.  # noqa: E501
        :rtype: TrafficLoadRate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this TrafficLoad.


        :param rate: The rate of this TrafficLoad.  # noqa: E501
        :type: TrafficLoadRate
        """
        self._rate = rate

    @property
    def units(self):
        """Gets the units of this TrafficLoad.  # noqa: E501

        The transmit units for the packet generator  # noqa: E501

        :return: The units of this TrafficLoad.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TrafficLoad.

        The transmit units for the packet generator  # noqa: E501

        :param units: The units of this TrafficLoad.  # noqa: E501
        :type: str
        """
        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrafficLoad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficLoad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
