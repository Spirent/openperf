# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MemoryGeneratorStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ops_target': 'int',
        'ops_actual': 'int',
        'bytes_target': 'int',
        'bytes_actual': 'int',
        'io_errors': 'int',
        'latency': 'int',
        'latency_min': 'int',
        'latency_max': 'int'
    }

    attribute_map = {
        'ops_target': 'ops_target',
        'ops_actual': 'ops_actual',
        'bytes_target': 'bytes_target',
        'bytes_actual': 'bytes_actual',
        'io_errors': 'io_errors',
        'latency': 'latency',
        'latency_min': 'latency_min',
        'latency_max': 'latency_max'
    }

    def __init__(self, ops_target=None, ops_actual=None, bytes_target=None, bytes_actual=None, io_errors=None, latency=None, latency_min=None, latency_max=None):  # noqa: E501
        """MemoryGeneratorStats - a model defined in Swagger"""  # noqa: E501

        self._ops_target = None
        self._ops_actual = None
        self._bytes_target = None
        self._bytes_actual = None
        self._io_errors = None
        self._latency = None
        self._latency_min = None
        self._latency_max = None
        self.discriminator = None

        self.ops_target = ops_target
        self.ops_actual = ops_actual
        self.bytes_target = bytes_target
        self.bytes_actual = bytes_actual
        self.io_errors = io_errors
        self.latency = latency
        if latency_min is not None:
            self.latency_min = latency_min
        if latency_max is not None:
            self.latency_max = latency_max

    @property
    def ops_target(self):
        """Gets the ops_target of this MemoryGeneratorStats.  # noqa: E501

        The intended number of operations performed  # noqa: E501

        :return: The ops_target of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._ops_target

    @ops_target.setter
    def ops_target(self, ops_target):
        """Sets the ops_target of this MemoryGeneratorStats.

        The intended number of operations performed  # noqa: E501

        :param ops_target: The ops_target of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._ops_target = ops_target

    @property
    def ops_actual(self):
        """Gets the ops_actual of this MemoryGeneratorStats.  # noqa: E501

        The actual number of operations performed  # noqa: E501

        :return: The ops_actual of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._ops_actual

    @ops_actual.setter
    def ops_actual(self, ops_actual):
        """Sets the ops_actual of this MemoryGeneratorStats.

        The actual number of operations performed  # noqa: E501

        :param ops_actual: The ops_actual of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._ops_actual = ops_actual

    @property
    def bytes_target(self):
        """Gets the bytes_target of this MemoryGeneratorStats.  # noqa: E501

        The intended number of bytes read or written  # noqa: E501

        :return: The bytes_target of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._bytes_target

    @bytes_target.setter
    def bytes_target(self, bytes_target):
        """Sets the bytes_target of this MemoryGeneratorStats.

        The intended number of bytes read or written  # noqa: E501

        :param bytes_target: The bytes_target of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._bytes_target = bytes_target

    @property
    def bytes_actual(self):
        """Gets the bytes_actual of this MemoryGeneratorStats.  # noqa: E501

        The actual number of bytes read or written  # noqa: E501

        :return: The bytes_actual of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._bytes_actual

    @bytes_actual.setter
    def bytes_actual(self, bytes_actual):
        """Sets the bytes_actual of this MemoryGeneratorStats.

        The actual number of bytes read or written  # noqa: E501

        :param bytes_actual: The bytes_actual of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._bytes_actual = bytes_actual

    @property
    def io_errors(self):
        """Gets the io_errors of this MemoryGeneratorStats.  # noqa: E501

        The number of io_errors observed during reading or writing  # noqa: E501

        :return: The io_errors of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._io_errors

    @io_errors.setter
    def io_errors(self, io_errors):
        """Sets the io_errors of this MemoryGeneratorStats.

        The number of io_errors observed during reading or writing  # noqa: E501

        :param io_errors: The io_errors of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._io_errors = io_errors

    @property
    def latency(self):
        """Gets the latency of this MemoryGeneratorStats.  # noqa: E501

        The total amount of time required to perform all operations (in nanoseconds)  # noqa: E501

        :return: The latency of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this MemoryGeneratorStats.

        The total amount of time required to perform all operations (in nanoseconds)  # noqa: E501

        :param latency: The latency of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._latency = latency

    @property
    def latency_min(self):
        """Gets the latency_min of this MemoryGeneratorStats.  # noqa: E501

        The minimum observed latency value (in nanoseconds)  # noqa: E501

        :return: The latency_min of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._latency_min

    @latency_min.setter
    def latency_min(self, latency_min):
        """Sets the latency_min of this MemoryGeneratorStats.

        The minimum observed latency value (in nanoseconds)  # noqa: E501

        :param latency_min: The latency_min of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._latency_min = latency_min

    @property
    def latency_max(self):
        """Gets the latency_max of this MemoryGeneratorStats.  # noqa: E501

        The maximum observed latency value (in nanoseconds)  # noqa: E501

        :return: The latency_max of this MemoryGeneratorStats.  # noqa: E501
        :rtype: int
        """
        return self._latency_max

    @latency_max.setter
    def latency_max(self, latency_max):
        """Sets the latency_max of this MemoryGeneratorStats.

        The maximum observed latency value (in nanoseconds)  # noqa: E501

        :param latency_max: The latency_max of this MemoryGeneratorStats.  # noqa: E501
        :type: int
        """
        self._latency_max = latency_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemoryGeneratorStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryGeneratorStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
