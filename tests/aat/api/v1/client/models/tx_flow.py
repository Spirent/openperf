# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TxFlow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'generator_result_id': 'str',
        'stream_id': 'int',
        'counters': 'PacketGeneratorFlowCounters'
    }

    attribute_map = {
        'id': 'id',
        'generator_result_id': 'generator_result_id',
        'stream_id': 'stream_id',
        'counters': 'counters'
    }

    def __init__(self, id=None, generator_result_id=None, stream_id=None, counters=None):  # noqa: E501
        """TxFlow - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._generator_result_id = None
        self._stream_id = None
        self._counters = None
        self.discriminator = None

        self.id = id
        self.generator_result_id = generator_result_id
        if stream_id is not None:
            self.stream_id = stream_id
        self.counters = counters

    @property
    def id(self):
        """Gets the id of this TxFlow.  # noqa: E501

        Unique transmit flow identifier  # noqa: E501

        :return: The id of this TxFlow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TxFlow.

        Unique transmit flow identifier  # noqa: E501

        :param id: The id of this TxFlow.  # noqa: E501
        :type: str
        """
        self._id = id

    @property
    def generator_result_id(self):
        """Gets the generator_result_id of this TxFlow.  # noqa: E501

        Unique generator result identifier that recorded this flow  # noqa: E501

        :return: The generator_result_id of this TxFlow.  # noqa: E501
        :rtype: str
        """
        return self._generator_result_id

    @generator_result_id.setter
    def generator_result_id(self, generator_result_id):
        """Sets the generator_result_id of this TxFlow.

        Unique generator result identifier that recorded this flow  # noqa: E501

        :param generator_result_id: The generator_result_id of this TxFlow.  # noqa: E501
        :type: str
        """
        self._generator_result_id = generator_result_id

    @property
    def stream_id(self):
        """Gets the stream_id of this TxFlow.  # noqa: E501

        Spirent signature stream id  # noqa: E501

        :return: The stream_id of this TxFlow.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this TxFlow.

        Spirent signature stream id  # noqa: E501

        :param stream_id: The stream_id of this TxFlow.  # noqa: E501
        :type: int
        """
        self._stream_id = stream_id

    @property
    def counters(self):
        """Gets the counters of this TxFlow.  # noqa: E501


        :return: The counters of this TxFlow.  # noqa: E501
        :rtype: PacketGeneratorFlowCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this TxFlow.


        :param counters: The counters of this TxFlow.  # noqa: E501
        :type: PacketGeneratorFlowCounters
        """
        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TxFlow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TxFlow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
