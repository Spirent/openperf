# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrafficDuration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'continuous': 'bool',
        'frames': 'int',
        'time': 'TrafficDurationTime'
    }

    attribute_map = {
        'continuous': 'continuous',
        'frames': 'frames',
        'time': 'time'
    }

    def __init__(self, continuous=None, frames=None, time=None):  # noqa: E501
        """TrafficDuration - a model defined in Swagger"""  # noqa: E501

        self._continuous = None
        self._frames = None
        self._time = None
        self.discriminator = None

        if continuous is not None:
            self.continuous = continuous
        if frames is not None:
            self.frames = frames
        if time is not None:
            self.time = time

    @property
    def continuous(self):
        """Gets the continuous of this TrafficDuration.  # noqa: E501

        Indicates there is no duration limit when set.  # noqa: E501

        :return: The continuous of this TrafficDuration.  # noqa: E501
        :rtype: bool
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this TrafficDuration.

        Indicates there is no duration limit when set.  # noqa: E501

        :param continuous: The continuous of this TrafficDuration.  # noqa: E501
        :type: bool
        """
        self._continuous = continuous

    @property
    def frames(self):
        """Gets the frames of this TrafficDuration.  # noqa: E501

        Specifies the duration as number of transmitted frames.  # noqa: E501

        :return: The frames of this TrafficDuration.  # noqa: E501
        :rtype: int
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this TrafficDuration.

        Specifies the duration as number of transmitted frames.  # noqa: E501

        :param frames: The frames of this TrafficDuration.  # noqa: E501
        :type: int
        """
        self._frames = frames

    @property
    def time(self):
        """Gets the time of this TrafficDuration.  # noqa: E501


        :return: The time of this TrafficDuration.  # noqa: E501
        :rtype: TrafficDurationTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TrafficDuration.


        :param time: The time of this TrafficDuration.  # noqa: E501
        :type: TrafficDurationTime
        """
        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrafficDuration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficDuration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
