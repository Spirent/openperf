# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TvlpResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tvlp_id': 'str',
        'memory': 'list[MemoryGeneratorResult]',
        'block': 'list[BlockGeneratorResult]',
        'cpu': 'list[CpuGeneratorResult]',
        'packet': 'list[PacketGeneratorResult]'
    }

    attribute_map = {
        'id': 'id',
        'tvlp_id': 'tvlp_id',
        'memory': 'memory',
        'block': 'block',
        'cpu': 'cpu',
        'packet': 'packet'
    }

    def __init__(self, id=None, tvlp_id=None, memory=None, block=None, cpu=None, packet=None):  # noqa: E501
        """TvlpResult - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._tvlp_id = None
        self._memory = None
        self._block = None
        self._cpu = None
        self._packet = None
        self.discriminator = None

        self.id = id
        self.tvlp_id = tvlp_id
        if memory is not None:
            self.memory = memory
        if block is not None:
            self.block = block
        if cpu is not None:
            self.cpu = cpu
        if packet is not None:
            self.packet = packet

    @property
    def id(self):
        """Gets the id of this TvlpResult.  # noqa: E501

        Unique TVLP result identifier  # noqa: E501

        :return: The id of this TvlpResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TvlpResult.

        Unique TVLP result identifier  # noqa: E501

        :param id: The id of this TvlpResult.  # noqa: E501
        :type: str
        """
        self._id = id

    @property
    def tvlp_id(self):
        """Gets the tvlp_id of this TvlpResult.  # noqa: E501

        TVLP configuration identifier that generated this result  # noqa: E501

        :return: The tvlp_id of this TvlpResult.  # noqa: E501
        :rtype: str
        """
        return self._tvlp_id

    @tvlp_id.setter
    def tvlp_id(self, tvlp_id):
        """Sets the tvlp_id of this TvlpResult.

        TVLP configuration identifier that generated this result  # noqa: E501

        :param tvlp_id: The tvlp_id of this TvlpResult.  # noqa: E501
        :type: str
        """
        self._tvlp_id = tvlp_id

    @property
    def memory(self):
        """Gets the memory of this TvlpResult.  # noqa: E501


        :return: The memory of this TvlpResult.  # noqa: E501
        :rtype: list[MemoryGeneratorResult]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this TvlpResult.


        :param memory: The memory of this TvlpResult.  # noqa: E501
        :type: list[MemoryGeneratorResult]
        """
        self._memory = memory

    @property
    def block(self):
        """Gets the block of this TvlpResult.  # noqa: E501


        :return: The block of this TvlpResult.  # noqa: E501
        :rtype: list[BlockGeneratorResult]
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this TvlpResult.


        :param block: The block of this TvlpResult.  # noqa: E501
        :type: list[BlockGeneratorResult]
        """
        self._block = block

    @property
    def cpu(self):
        """Gets the cpu of this TvlpResult.  # noqa: E501


        :return: The cpu of this TvlpResult.  # noqa: E501
        :rtype: list[CpuGeneratorResult]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this TvlpResult.


        :param cpu: The cpu of this TvlpResult.  # noqa: E501
        :type: list[CpuGeneratorResult]
        """
        self._cpu = cpu

    @property
    def packet(self):
        """Gets the packet of this TvlpResult.  # noqa: E501


        :return: The packet of this TvlpResult.  # noqa: E501
        :rtype: list[PacketGeneratorResult]
        """
        return self._packet

    @packet.setter
    def packet(self, packet):
        """Sets the packet of this TvlpResult.


        :param packet: The packet of this TvlpResult.  # noqa: E501
        :type: list[PacketGeneratorResult]
        """
        self._packet = packet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TvlpResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TvlpResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
