# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalyzerProtocolCountersInnerEthernet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'int',
        'vlan': 'int',
        'qinq': 'int'
    }

    attribute_map = {
        'ip': 'ip',
        'vlan': 'vlan',
        'qinq': 'qinq'
    }

    def __init__(self, ip=None, vlan=None, qinq=None):  # noqa: E501
        """AnalyzerProtocolCountersInnerEthernet - a model defined in Swagger"""  # noqa: E501

        self._ip = None
        self._vlan = None
        self._qinq = None
        self.discriminator = None

        self.ip = ip
        self.vlan = vlan
        self.qinq = qinq

    @property
    def ip(self):
        """Gets the ip of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501

        Number of IPv6/IPv6 frames  # noqa: E501

        :return: The ip of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :rtype: int
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AnalyzerProtocolCountersInnerEthernet.

        Number of IPv6/IPv6 frames  # noqa: E501

        :param ip: The ip of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :type: int
        """
        self._ip = ip

    @property
    def vlan(self):
        """Gets the vlan of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501

        Number of Virtual LAN frames  # noqa: E501

        :return: The vlan of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this AnalyzerProtocolCountersInnerEthernet.

        Number of Virtual LAN frames  # noqa: E501

        :param vlan: The vlan of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :type: int
        """
        self._vlan = vlan

    @property
    def qinq(self):
        """Gets the qinq of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501

        Number of Queue-in-Queue frames  # noqa: E501

        :return: The qinq of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :rtype: int
        """
        return self._qinq

    @qinq.setter
    def qinq(self, qinq):
        """Sets the qinq of this AnalyzerProtocolCountersInnerEthernet.

        Number of Queue-in-Queue frames  # noqa: E501

        :param qinq: The qinq of this AnalyzerProtocolCountersInnerEthernet.  # noqa: E501
        :type: int
        """
        self._qinq = qinq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyzerProtocolCountersInnerEthernet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzerProtocolCountersInnerEthernet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
