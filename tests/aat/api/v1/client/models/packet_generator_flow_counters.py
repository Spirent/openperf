# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketGeneratorFlowCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'int',
        'octets_actual': 'int',
        'octets_intended': 'int',
        'packets_actual': 'int',
        'packets_intended': 'int',
        'timestamp_first': 'datetime',
        'timestamp_last': 'datetime'
    }

    attribute_map = {
        'errors': 'errors',
        'octets_actual': 'octets_actual',
        'octets_intended': 'octets_intended',
        'packets_actual': 'packets_actual',
        'packets_intended': 'packets_intended',
        'timestamp_first': 'timestamp_first',
        'timestamp_last': 'timestamp_last'
    }

    def __init__(self, errors=None, octets_actual=None, octets_intended=None, packets_actual=None, packets_intended=None, timestamp_first=None, timestamp_last=None):  # noqa: E501
        """PacketGeneratorFlowCounters - a model defined in Swagger"""  # noqa: E501

        self._errors = None
        self._octets_actual = None
        self._octets_intended = None
        self._packets_actual = None
        self._packets_intended = None
        self._timestamp_first = None
        self._timestamp_last = None
        self.discriminator = None

        self.errors = errors
        self.octets_actual = octets_actual
        self.octets_intended = octets_intended
        self.packets_actual = packets_actual
        self.packets_intended = packets_intended
        if timestamp_first is not None:
            self.timestamp_first = timestamp_first
        if timestamp_last is not None:
            self.timestamp_last = timestamp_last

    @property
    def errors(self):
        """Gets the errors of this PacketGeneratorFlowCounters.  # noqa: E501

        The number of packets not transmitted due to errors  # noqa: E501

        :return: The errors of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this PacketGeneratorFlowCounters.

        The number of packets not transmitted due to errors  # noqa: E501

        :param errors: The errors of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: int
        """
        self._errors = errors

    @property
    def octets_actual(self):
        """Gets the octets_actual of this PacketGeneratorFlowCounters.  # noqa: E501

        The total number of octets that have been transmitted  # noqa: E501

        :return: The octets_actual of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: int
        """
        return self._octets_actual

    @octets_actual.setter
    def octets_actual(self, octets_actual):
        """Sets the octets_actual of this PacketGeneratorFlowCounters.

        The total number of octets that have been transmitted  # noqa: E501

        :param octets_actual: The octets_actual of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: int
        """
        self._octets_actual = octets_actual

    @property
    def octets_intended(self):
        """Gets the octets_intended of this PacketGeneratorFlowCounters.  # noqa: E501

        The total number of octets that should have been transmitted  # noqa: E501

        :return: The octets_intended of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: int
        """
        return self._octets_intended

    @octets_intended.setter
    def octets_intended(self, octets_intended):
        """Sets the octets_intended of this PacketGeneratorFlowCounters.

        The total number of octets that should have been transmitted  # noqa: E501

        :param octets_intended: The octets_intended of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: int
        """
        self._octets_intended = octets_intended

    @property
    def packets_actual(self):
        """Gets the packets_actual of this PacketGeneratorFlowCounters.  # noqa: E501

        The total number of packets that have been transmitted  # noqa: E501

        :return: The packets_actual of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: int
        """
        return self._packets_actual

    @packets_actual.setter
    def packets_actual(self, packets_actual):
        """Sets the packets_actual of this PacketGeneratorFlowCounters.

        The total number of packets that have been transmitted  # noqa: E501

        :param packets_actual: The packets_actual of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: int
        """
        self._packets_actual = packets_actual

    @property
    def packets_intended(self):
        """Gets the packets_intended of this PacketGeneratorFlowCounters.  # noqa: E501

        The total number of packets that should have been transmitted  # noqa: E501

        :return: The packets_intended of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: int
        """
        return self._packets_intended

    @packets_intended.setter
    def packets_intended(self, packets_intended):
        """Sets the packets_intended of this PacketGeneratorFlowCounters.

        The total number of packets that should have been transmitted  # noqa: E501

        :param packets_intended: The packets_intended of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: int
        """
        self._packets_intended = packets_intended

    @property
    def timestamp_first(self):
        """Gets the timestamp_first of this PacketGeneratorFlowCounters.  # noqa: E501

        The timestamp of the first transmitted packet  # noqa: E501

        :return: The timestamp_first of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp_first

    @timestamp_first.setter
    def timestamp_first(self, timestamp_first):
        """Sets the timestamp_first of this PacketGeneratorFlowCounters.

        The timestamp of the first transmitted packet  # noqa: E501

        :param timestamp_first: The timestamp_first of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: datetime
        """
        self._timestamp_first = timestamp_first

    @property
    def timestamp_last(self):
        """Gets the timestamp_last of this PacketGeneratorFlowCounters.  # noqa: E501

        The timestamp of the most recently transmitted packet  # noqa: E501

        :return: The timestamp_last of this PacketGeneratorFlowCounters.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp_last

    @timestamp_last.setter
    def timestamp_last(self, timestamp_last):
        """Sets the timestamp_last of this PacketGeneratorFlowCounters.

        The timestamp of the most recently transmitted packet  # noqa: E501

        :param timestamp_last: The timestamp_last of this PacketGeneratorFlowCounters.  # noqa: E501
        :type: datetime
        """
        self._timestamp_last = timestamp_last

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketGeneratorFlowCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketGeneratorFlowCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
