# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortConfigDpdk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_negotiation': 'bool',
        'speed': 'int',
        'duplex': 'str'
    }

    attribute_map = {
        'auto_negotiation': 'auto_negotiation',
        'speed': 'speed',
        'duplex': 'duplex'
    }

    def __init__(self, auto_negotiation=None, speed=None, duplex=None):  # noqa: E501
        """PortConfigDpdk - a model defined in Swagger"""  # noqa: E501

        self._auto_negotiation = None
        self._speed = None
        self._duplex = None
        self.discriminator = None

        self.auto_negotiation = auto_negotiation
        if speed is not None:
            self.speed = speed
        if duplex is not None:
            self.duplex = duplex

    @property
    def auto_negotiation(self):
        """Gets the auto_negotiation of this PortConfigDpdk.  # noqa: E501

        Enable link auto-negotiation  # noqa: E501

        :return: The auto_negotiation of this PortConfigDpdk.  # noqa: E501
        :rtype: bool
        """
        return self._auto_negotiation

    @auto_negotiation.setter
    def auto_negotiation(self, auto_negotiation):
        """Sets the auto_negotiation of this PortConfigDpdk.

        Enable link auto-negotiation  # noqa: E501

        :param auto_negotiation: The auto_negotiation of this PortConfigDpdk.  # noqa: E501
        :type: bool
        """
        self._auto_negotiation = auto_negotiation

    @property
    def speed(self):
        """Gets the speed of this PortConfigDpdk.  # noqa: E501

        Manually-configured port speed (in Mbps)  # noqa: E501

        :return: The speed of this PortConfigDpdk.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this PortConfigDpdk.

        Manually-configured port speed (in Mbps)  # noqa: E501

        :param speed: The speed of this PortConfigDpdk.  # noqa: E501
        :type: int
        """
        self._speed = speed

    @property
    def duplex(self):
        """Gets the duplex of this PortConfigDpdk.  # noqa: E501

        Manually-configured port duplex  # noqa: E501

        :return: The duplex of this PortConfigDpdk.  # noqa: E501
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this PortConfigDpdk.

        Manually-configured port duplex  # noqa: E501

        :param duplex: The duplex of this PortConfigDpdk.  # noqa: E501
        :type: str
        """
        self._duplex = duplex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortConfigDpdk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
