# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortConfigDpdk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'str',
        'driver': 'str',
        'interface': 'str',
        'link': 'PortConfigDpdkLink',
        'mac_address': 'str'
    }

    attribute_map = {
        'device': 'device',
        'driver': 'driver',
        'interface': 'interface',
        'link': 'link',
        'mac_address': 'mac_address'
    }

    def __init__(self, device=None, driver=None, interface=None, link=None, mac_address=None):  # noqa: E501
        """PortConfigDpdk - a model defined in Swagger"""  # noqa: E501

        self._device = None
        self._driver = None
        self._interface = None
        self._link = None
        self._mac_address = None
        self.discriminator = None

        if device is not None:
            self.device = device
        if driver is not None:
            self.driver = driver
        if interface is not None:
            self.interface = interface
        self.link = link
        if mac_address is not None:
            self.mac_address = mac_address

    @property
    def device(self):
        """Gets the device of this PortConfigDpdk.  # noqa: E501

        Device name  # noqa: E501

        :return: The device of this PortConfigDpdk.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PortConfigDpdk.

        Device name  # noqa: E501

        :param device: The device of this PortConfigDpdk.  # noqa: E501
        :type: str
        """
        self._device = device

    @property
    def driver(self):
        """Gets the driver of this PortConfigDpdk.  # noqa: E501

        Generic driver name  # noqa: E501

        :return: The driver of this PortConfigDpdk.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this PortConfigDpdk.

        Generic driver name  # noqa: E501

        :param driver: The driver of this PortConfigDpdk.  # noqa: E501
        :type: str
        """
        self._driver = driver

    @property
    def interface(self):
        """Gets the interface of this PortConfigDpdk.  # noqa: E501

        Host interface name, if applicable  # noqa: E501

        :return: The interface of this PortConfigDpdk.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this PortConfigDpdk.

        Host interface name, if applicable  # noqa: E501

        :param interface: The interface of this PortConfigDpdk.  # noqa: E501
        :type: str
        """
        self._interface = interface

    @property
    def link(self):
        """Gets the link of this PortConfigDpdk.  # noqa: E501


        :return: The link of this PortConfigDpdk.  # noqa: E501
        :rtype: PortConfigDpdkLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PortConfigDpdk.


        :param link: The link of this PortConfigDpdk.  # noqa: E501
        :type: PortConfigDpdkLink
        """
        self._link = link

    @property
    def mac_address(self):
        """Gets the mac_address of this PortConfigDpdk.  # noqa: E501

        Device MAC address  # noqa: E501

        :return: The mac_address of this PortConfigDpdk.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PortConfigDpdk.

        Device MAC address  # noqa: E501

        :param mac_address: The mac_address of this PortConfigDpdk.  # noqa: E501
        :type: str
        """
        self._mac_address = mac_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortConfigDpdk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortConfigDpdk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
