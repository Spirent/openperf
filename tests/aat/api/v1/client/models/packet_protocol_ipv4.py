# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolIpv4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checksum': 'int',
        'destination': 'str',
        'dscp': 'int',
        'ecn': 'str',
        'flags': 'list[str]',
        'fragment_offset': 'int',
        'header_length': 'int',
        'identification': 'int',
        'protocol': 'int',
        'source': 'str',
        'time_to_live': 'int',
        'total_length': 'int',
        'version': 'int'
    }

    attribute_map = {
        'checksum': 'checksum',
        'destination': 'destination',
        'dscp': 'dscp',
        'ecn': 'ecn',
        'flags': 'flags',
        'fragment_offset': 'fragment_offset',
        'header_length': 'header_length',
        'identification': 'identification',
        'protocol': 'protocol',
        'source': 'source',
        'time_to_live': 'time_to_live',
        'total_length': 'total_length',
        'version': 'version'
    }

    def __init__(self, checksum=None, destination=None, dscp=None, ecn=None, flags=None, fragment_offset=None, header_length=20, identification=None, protocol=254, source=None, time_to_live=64, total_length=None, version=4):  # noqa: E501
        """PacketProtocolIpv4 - a model defined in Swagger"""  # noqa: E501

        self._checksum = None
        self._destination = None
        self._dscp = None
        self._ecn = None
        self._flags = None
        self._fragment_offset = None
        self._header_length = None
        self._identification = None
        self._protocol = None
        self._source = None
        self._time_to_live = None
        self._total_length = None
        self._version = None
        self.discriminator = None

        if checksum is not None:
            self.checksum = checksum
        if destination is not None:
            self.destination = destination
        if dscp is not None:
            self.dscp = dscp
        if ecn is not None:
            self.ecn = ecn
        if flags is not None:
            self.flags = flags
        if fragment_offset is not None:
            self.fragment_offset = fragment_offset
        if header_length is not None:
            self.header_length = header_length
        if identification is not None:
            self.identification = identification
        if protocol is not None:
            self.protocol = protocol
        if source is not None:
            self.source = source
        if time_to_live is not None:
            self.time_to_live = time_to_live
        if total_length is not None:
            self.total_length = total_length
        if version is not None:
            self.version = version

    @property
    def checksum(self):
        """Gets the checksum of this PacketProtocolIpv4.  # noqa: E501

        IPv4 checksum  # noqa: E501

        :return: The checksum of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PacketProtocolIpv4.

        IPv4 checksum  # noqa: E501

        :param checksum: The checksum of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._checksum = checksum

    @property
    def destination(self):
        """Gets the destination of this PacketProtocolIpv4.  # noqa: E501

        IPv4 destination address  # noqa: E501

        :return: The destination of this PacketProtocolIpv4.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PacketProtocolIpv4.

        IPv4 destination address  # noqa: E501

        :param destination: The destination of this PacketProtocolIpv4.  # noqa: E501
        :type: str
        """
        self._destination = destination

    @property
    def dscp(self):
        """Gets the dscp of this PacketProtocolIpv4.  # noqa: E501

        IPv4 dscp  # noqa: E501

        :return: The dscp of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._dscp

    @dscp.setter
    def dscp(self, dscp):
        """Sets the dscp of this PacketProtocolIpv4.

        IPv4 dscp  # noqa: E501

        :param dscp: The dscp of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._dscp = dscp

    @property
    def ecn(self):
        """Gets the ecn of this PacketProtocolIpv4.  # noqa: E501

        IPv4 ecn  # noqa: E501

        :return: The ecn of this PacketProtocolIpv4.  # noqa: E501
        :rtype: str
        """
        return self._ecn

    @ecn.setter
    def ecn(self, ecn):
        """Sets the ecn of this PacketProtocolIpv4.

        IPv4 ecn  # noqa: E501

        :param ecn: The ecn of this PacketProtocolIpv4.  # noqa: E501
        :type: str
        """
        self._ecn = ecn

    @property
    def flags(self):
        """Gets the flags of this PacketProtocolIpv4.  # noqa: E501

        IPv4 flags  # noqa: E501

        :return: The flags of this PacketProtocolIpv4.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this PacketProtocolIpv4.

        IPv4 flags  # noqa: E501

        :param flags: The flags of this PacketProtocolIpv4.  # noqa: E501
        :type: list[str]
        """
        self._flags = flags

    @property
    def fragment_offset(self):
        """Gets the fragment_offset of this PacketProtocolIpv4.  # noqa: E501

        IPv4 fragment offset  # noqa: E501

        :return: The fragment_offset of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._fragment_offset

    @fragment_offset.setter
    def fragment_offset(self, fragment_offset):
        """Sets the fragment_offset of this PacketProtocolIpv4.

        IPv4 fragment offset  # noqa: E501

        :param fragment_offset: The fragment_offset of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._fragment_offset = fragment_offset

    @property
    def header_length(self):
        """Gets the header_length of this PacketProtocolIpv4.  # noqa: E501

        IPv4 header length  # noqa: E501

        :return: The header_length of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._header_length

    @header_length.setter
    def header_length(self, header_length):
        """Sets the header_length of this PacketProtocolIpv4.

        IPv4 header length  # noqa: E501

        :param header_length: The header_length of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._header_length = header_length

    @property
    def identification(self):
        """Gets the identification of this PacketProtocolIpv4.  # noqa: E501

        IPv4 identification  # noqa: E501

        :return: The identification of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this PacketProtocolIpv4.

        IPv4 identification  # noqa: E501

        :param identification: The identification of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._identification = identification

    @property
    def protocol(self):
        """Gets the protocol of this PacketProtocolIpv4.  # noqa: E501

        IPv4 protocol  # noqa: E501

        :return: The protocol of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PacketProtocolIpv4.

        IPv4 protocol  # noqa: E501

        :param protocol: The protocol of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._protocol = protocol

    @property
    def source(self):
        """Gets the source of this PacketProtocolIpv4.  # noqa: E501

        IPv4 source address  # noqa: E501

        :return: The source of this PacketProtocolIpv4.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PacketProtocolIpv4.

        IPv4 source address  # noqa: E501

        :param source: The source of this PacketProtocolIpv4.  # noqa: E501
        :type: str
        """
        self._source = source

    @property
    def time_to_live(self):
        """Gets the time_to_live of this PacketProtocolIpv4.  # noqa: E501

        IPv4 time to live  # noqa: E501

        :return: The time_to_live of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """Sets the time_to_live of this PacketProtocolIpv4.

        IPv4 time to live  # noqa: E501

        :param time_to_live: The time_to_live of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._time_to_live = time_to_live

    @property
    def total_length(self):
        """Gets the total_length of this PacketProtocolIpv4.  # noqa: E501

        IPv4 total length  # noqa: E501

        :return: The total_length of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._total_length

    @total_length.setter
    def total_length(self, total_length):
        """Sets the total_length of this PacketProtocolIpv4.

        IPv4 total length  # noqa: E501

        :param total_length: The total_length of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._total_length = total_length

    @property
    def version(self):
        """Gets the version of this PacketProtocolIpv4.  # noqa: E501

        IPv4 version  # noqa: E501

        :return: The version of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PacketProtocolIpv4.

        IPv4 version  # noqa: E501

        :param version: The version of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolIpv4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolIpv4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
