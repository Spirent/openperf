# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolIpv4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'header_length': 'int',
        'tos': 'int',
        'packet_length': 'int',
        'id': 'int',
        'flags': 'list[str]',
        'fragment_offset': 'int',
        'ttl': 'int',
        'protocol': 'int',
        'checksum': 'int',
        'source': 'Ipv4Address',
        'destination': 'Ipv4Address'
    }

    attribute_map = {
        'version': 'version',
        'header_length': 'header_length',
        'tos': 'tos',
        'packet_length': 'packet_length',
        'id': 'id',
        'flags': 'flags',
        'fragment_offset': 'fragment_offset',
        'ttl': 'ttl',
        'protocol': 'protocol',
        'checksum': 'checksum',
        'source': 'source',
        'destination': 'destination'
    }

    def __init__(self, version=4, header_length=20, tos=0, packet_length=None, id=None, flags=None, fragment_offset=0, ttl=None, protocol=None, checksum=None, source=None, destination=None):  # noqa: E501
        """PacketProtocolIpv4 - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._header_length = None
        self._tos = None
        self._packet_length = None
        self._id = None
        self._flags = None
        self._fragment_offset = None
        self._ttl = None
        self._protocol = None
        self._checksum = None
        self._source = None
        self._destination = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if header_length is not None:
            self.header_length = header_length
        if tos is not None:
            self.tos = tos
        if packet_length is not None:
            self.packet_length = packet_length
        if id is not None:
            self.id = id
        if flags is not None:
            self.flags = flags
        if fragment_offset is not None:
            self.fragment_offset = fragment_offset
        if ttl is not None:
            self.ttl = ttl
        if protocol is not None:
            self.protocol = protocol
        if checksum is not None:
            self.checksum = checksum
        if source is not None:
            self.source = source
        self.destination = destination

    @property
    def version(self):
        """Gets the version of this PacketProtocolIpv4.  # noqa: E501

        IP header version  # noqa: E501

        :return: The version of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PacketProtocolIpv4.

        IP header version  # noqa: E501

        :param version: The version of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._version = version

    @property
    def header_length(self):
        """Gets the header_length of this PacketProtocolIpv4.  # noqa: E501

        IP header length  # noqa: E501

        :return: The header_length of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._header_length

    @header_length.setter
    def header_length(self, header_length):
        """Sets the header_length of this PacketProtocolIpv4.

        IP header length  # noqa: E501

        :param header_length: The header_length of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._header_length = header_length

    @property
    def tos(self):
        """Gets the tos of this PacketProtocolIpv4.  # noqa: E501

        Type of Service field  # noqa: E501

        :return: The tos of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this PacketProtocolIpv4.

        Type of Service field  # noqa: E501

        :param tos: The tos of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._tos = tos

    @property
    def packet_length(self):
        """Gets the packet_length of this PacketProtocolIpv4.  # noqa: E501

        IP packet length (include payload)  # noqa: E501

        :return: The packet_length of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._packet_length

    @packet_length.setter
    def packet_length(self, packet_length):
        """Sets the packet_length of this PacketProtocolIpv4.

        IP packet length (include payload)  # noqa: E501

        :param packet_length: The packet_length of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._packet_length = packet_length

    @property
    def id(self):
        """Gets the id of this PacketProtocolIpv4.  # noqa: E501

        Identification field  # noqa: E501

        :return: The id of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PacketProtocolIpv4.

        Identification field  # noqa: E501

        :param id: The id of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._id = id

    @property
    def flags(self):
        """Gets the flags of this PacketProtocolIpv4.  # noqa: E501

        IP header flags  # noqa: E501

        :return: The flags of this PacketProtocolIpv4.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this PacketProtocolIpv4.

        IP header flags  # noqa: E501

        :param flags: The flags of this PacketProtocolIpv4.  # noqa: E501
        :type: list[str]
        """
        self._flags = flags

    @property
    def fragment_offset(self):
        """Gets the fragment_offset of this PacketProtocolIpv4.  # noqa: E501

        IP fragment offset  # noqa: E501

        :return: The fragment_offset of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._fragment_offset

    @fragment_offset.setter
    def fragment_offset(self, fragment_offset):
        """Sets the fragment_offset of this PacketProtocolIpv4.

        IP fragment offset  # noqa: E501

        :param fragment_offset: The fragment_offset of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._fragment_offset = fragment_offset

    @property
    def ttl(self):
        """Gets the ttl of this PacketProtocolIpv4.  # noqa: E501

        Time To Live field  # noqa: E501

        :return: The ttl of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this PacketProtocolIpv4.

        Time To Live field  # noqa: E501

        :param ttl: The ttl of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._ttl = ttl

    @property
    def protocol(self):
        """Gets the protocol of this PacketProtocolIpv4.  # noqa: E501

        Protocol field  # noqa: E501

        :return: The protocol of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PacketProtocolIpv4.

        Protocol field  # noqa: E501

        :param protocol: The protocol of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._protocol = protocol

    @property
    def checksum(self):
        """Gets the checksum of this PacketProtocolIpv4.  # noqa: E501

        IPv4 header checksum  # noqa: E501

        :return: The checksum of this PacketProtocolIpv4.  # noqa: E501
        :rtype: int
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PacketProtocolIpv4.

        IPv4 header checksum  # noqa: E501

        :param checksum: The checksum of this PacketProtocolIpv4.  # noqa: E501
        :type: int
        """
        self._checksum = checksum

    @property
    def source(self):
        """Gets the source of this PacketProtocolIpv4.  # noqa: E501


        :return: The source of this PacketProtocolIpv4.  # noqa: E501
        :rtype: Ipv4Address
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PacketProtocolIpv4.


        :param source: The source of this PacketProtocolIpv4.  # noqa: E501
        :type: Ipv4Address
        """
        self._source = source

    @property
    def destination(self):
        """Gets the destination of this PacketProtocolIpv4.  # noqa: E501


        :return: The destination of this PacketProtocolIpv4.  # noqa: E501
        :rtype: Ipv4Address
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PacketProtocolIpv4.


        :param destination: The destination of this PacketProtocolIpv4.  # noqa: E501
        :type: Ipv4Address
        """
        self._destination = destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolIpv4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolIpv4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
