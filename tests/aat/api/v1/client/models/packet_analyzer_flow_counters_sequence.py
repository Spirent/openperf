# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketAnalyzerFlowCountersSequence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dropped': 'int',
        'duplicate': 'int',
        'late': 'int',
        'reordered': 'int',
        'in_order': 'int',
        'run_length': 'int'
    }

    attribute_map = {
        'dropped': 'dropped',
        'duplicate': 'duplicate',
        'late': 'late',
        'reordered': 'reordered',
        'in_order': 'in_order',
        'run_length': 'run_length'
    }

    def __init__(self, dropped=None, duplicate=None, late=None, reordered=None, in_order=None, run_length=None):  # noqa: E501
        """PacketAnalyzerFlowCountersSequence - a model defined in Swagger"""  # noqa: E501

        self._dropped = None
        self._duplicate = None
        self._late = None
        self._reordered = None
        self._in_order = None
        self._run_length = None
        self.discriminator = None

        self.dropped = dropped
        self.duplicate = duplicate
        self.late = late
        self.reordered = reordered
        self.in_order = in_order
        self.run_length = run_length

    @property
    def dropped(self):
        """Gets the dropped of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of packets expected but not yet received  # noqa: E501

        :return: The dropped of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._dropped

    @dropped.setter
    def dropped(self, dropped):
        """Sets the dropped of this PacketAnalyzerFlowCountersSequence.

        Number of packets expected but not yet received  # noqa: E501

        :param dropped: The dropped of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._dropped = dropped

    @property
    def duplicate(self):
        """Gets the duplicate of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of duplicate packets received  # noqa: E501

        :return: The duplicate of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this PacketAnalyzerFlowCountersSequence.

        Number of duplicate packets received  # noqa: E501

        :param duplicate: The duplicate of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._duplicate = duplicate

    @property
    def late(self):
        """Gets the late of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of late packets received  # noqa: E501

        :return: The late of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._late

    @late.setter
    def late(self, late):
        """Sets the late of this PacketAnalyzerFlowCountersSequence.

        Number of late packets received  # noqa: E501

        :param late: The late of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._late = late

    @property
    def reordered(self):
        """Gets the reordered of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of reordered packets received  # noqa: E501

        :return: The reordered of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._reordered

    @reordered.setter
    def reordered(self, reordered):
        """Sets the reordered of this PacketAnalyzerFlowCountersSequence.

        Number of reordered packets received  # noqa: E501

        :param reordered: The reordered of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._reordered = reordered

    @property
    def in_order(self):
        """Gets the in_order of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of packets received in the expected sequence  # noqa: E501

        :return: The in_order of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._in_order

    @in_order.setter
    def in_order(self, in_order):
        """Sets the in_order of this PacketAnalyzerFlowCountersSequence.

        Number of packets received in the expected sequence  # noqa: E501

        :param in_order: The in_order of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._in_order = in_order

    @property
    def run_length(self):
        """Gets the run_length of this PacketAnalyzerFlowCountersSequence.  # noqa: E501

        Number of packets received in sequence  # noqa: E501

        :return: The run_length of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :rtype: int
        """
        return self._run_length

    @run_length.setter
    def run_length(self, run_length):
        """Sets the run_length of this PacketAnalyzerFlowCountersSequence.

        Number of packets received in sequence  # noqa: E501

        :param run_length: The run_length of this PacketAnalyzerFlowCountersSequence.  # noqa: E501
        :type: int
        """
        self._run_length = run_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketAnalyzerFlowCountersSequence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketAnalyzerFlowCountersSequence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
