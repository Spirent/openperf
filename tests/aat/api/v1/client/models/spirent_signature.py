# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpirentSignature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stream_id': 'int',
        'fill': 'SpirentSignatureFill',
        'latency': 'str'
    }

    attribute_map = {
        'stream_id': 'stream_id',
        'fill': 'fill',
        'latency': 'latency'
    }

    def __init__(self, stream_id=None, fill=None, latency=None):  # noqa: E501
        """SpirentSignature - a model defined in Swagger"""  # noqa: E501

        self._stream_id = None
        self._fill = None
        self._latency = None
        self.discriminator = None

        self.stream_id = stream_id
        if fill is not None:
            self.fill = fill
        self.latency = latency

    @property
    def stream_id(self):
        """Gets the stream_id of this SpirentSignature.  # noqa: E501

        Stream IDs are created for each flow of the definition. This property specifies the ID to use for the first flow. Subsequent flows will use incremented IDs. For example, if a traffic definitions contains 20 flows with a first_stream_id value of 1, then the definition will use 1-20 for stream ids.   # noqa: E501

        :return: The stream_id of this SpirentSignature.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this SpirentSignature.

        Stream IDs are created for each flow of the definition. This property specifies the ID to use for the first flow. Subsequent flows will use incremented IDs. For example, if a traffic definitions contains 20 flows with a first_stream_id value of 1, then the definition will use 1-20 for stream ids.   # noqa: E501

        :param stream_id: The stream_id of this SpirentSignature.  # noqa: E501
        :type: int
        """
        self._stream_id = stream_id

    @property
    def fill(self):
        """Gets the fill of this SpirentSignature.  # noqa: E501


        :return: The fill of this SpirentSignature.  # noqa: E501
        :rtype: SpirentSignatureFill
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this SpirentSignature.


        :param fill: The fill of this SpirentSignature.  # noqa: E501
        :type: SpirentSignatureFill
        """
        self._fill = fill

    @property
    def latency(self):
        """Gets the latency of this SpirentSignature.  # noqa: E501

        Indicates timestamp offset  # noqa: E501

        :return: The latency of this SpirentSignature.  # noqa: E501
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this SpirentSignature.

        Indicates timestamp offset  # noqa: E501

        :param latency: The latency of this SpirentSignature.  # noqa: E501
        :type: str
        """
        self._latency = latency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpirentSignature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpirentSignature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
