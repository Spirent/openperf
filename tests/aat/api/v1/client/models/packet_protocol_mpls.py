# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolMpls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bottom_of_stack': 'bool',
        'label': 'int',
        'traffic_class': 'int',
        'ttl': 'int'
    }

    attribute_map = {
        'bottom_of_stack': 'bottom_of_stack',
        'label': 'label',
        'traffic_class': 'traffic_class',
        'ttl': 'ttl'
    }

    def __init__(self, bottom_of_stack=None, label=None, traffic_class=None, ttl=None):  # noqa: E501
        """PacketProtocolMpls - a model defined in Swagger"""  # noqa: E501

        self._bottom_of_stack = None
        self._label = None
        self._traffic_class = None
        self._ttl = None
        self.discriminator = None

        if bottom_of_stack is not None:
            self.bottom_of_stack = bottom_of_stack
        if label is not None:
            self.label = label
        if traffic_class is not None:
            self.traffic_class = traffic_class
        if ttl is not None:
            self.ttl = ttl

    @property
    def bottom_of_stack(self):
        """Gets the bottom_of_stack of this PacketProtocolMpls.  # noqa: E501

        MPLS bottom of stack  # noqa: E501

        :return: The bottom_of_stack of this PacketProtocolMpls.  # noqa: E501
        :rtype: bool
        """
        return self._bottom_of_stack

    @bottom_of_stack.setter
    def bottom_of_stack(self, bottom_of_stack):
        """Sets the bottom_of_stack of this PacketProtocolMpls.

        MPLS bottom of stack  # noqa: E501

        :param bottom_of_stack: The bottom_of_stack of this PacketProtocolMpls.  # noqa: E501
        :type: bool
        """
        self._bottom_of_stack = bottom_of_stack

    @property
    def label(self):
        """Gets the label of this PacketProtocolMpls.  # noqa: E501

        MPLS label  # noqa: E501

        :return: The label of this PacketProtocolMpls.  # noqa: E501
        :rtype: int
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PacketProtocolMpls.

        MPLS label  # noqa: E501

        :param label: The label of this PacketProtocolMpls.  # noqa: E501
        :type: int
        """
        self._label = label

    @property
    def traffic_class(self):
        """Gets the traffic_class of this PacketProtocolMpls.  # noqa: E501

        MPLS traffic class  # noqa: E501

        :return: The traffic_class of this PacketProtocolMpls.  # noqa: E501
        :rtype: int
        """
        return self._traffic_class

    @traffic_class.setter
    def traffic_class(self, traffic_class):
        """Sets the traffic_class of this PacketProtocolMpls.

        MPLS traffic class  # noqa: E501

        :param traffic_class: The traffic_class of this PacketProtocolMpls.  # noqa: E501
        :type: int
        """
        self._traffic_class = traffic_class

    @property
    def ttl(self):
        """Gets the ttl of this PacketProtocolMpls.  # noqa: E501

        MPLS ttl  # noqa: E501

        :return: The ttl of this PacketProtocolMpls.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this PacketProtocolMpls.

        MPLS ttl  # noqa: E501

        :param ttl: The ttl of this PacketProtocolMpls.  # noqa: E501
        :type: int
        """
        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolMpls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolMpls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
