# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CpuGeneratorResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'generator_id': 'str',
        'active': 'bool',
        'timestamp': 'datetime',
        'stats': 'CpuGeneratorStats'
    }

    attribute_map = {
        'id': 'id',
        'generator_id': 'generator_id',
        'active': 'active',
        'timestamp': 'timestamp',
        'stats': 'stats'
    }

    def __init__(self, id=None, generator_id=None, active=None, timestamp=None, stats=None):  # noqa: E501
        """CpuGeneratorResult - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._generator_id = None
        self._active = None
        self._timestamp = None
        self._stats = None
        self.discriminator = None

        self.id = id
        if generator_id is not None:
            self.generator_id = generator_id
        self.active = active
        self.timestamp = timestamp
        self.stats = stats

    @property
    def id(self):
        """Gets the id of this CpuGeneratorResult.  # noqa: E501

        Unique generator result identifier  # noqa: E501

        :return: The id of this CpuGeneratorResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CpuGeneratorResult.

        Unique generator result identifier  # noqa: E501

        :param id: The id of this CpuGeneratorResult.  # noqa: E501
        :type: str
        """
        self._id = id

    @property
    def generator_id(self):
        """Gets the generator_id of this CpuGeneratorResult.  # noqa: E501

        CPU generator identifier that generated this result  # noqa: E501

        :return: The generator_id of this CpuGeneratorResult.  # noqa: E501
        :rtype: str
        """
        return self._generator_id

    @generator_id.setter
    def generator_id(self, generator_id):
        """Sets the generator_id of this CpuGeneratorResult.

        CPU generator identifier that generated this result  # noqa: E501

        :param generator_id: The generator_id of this CpuGeneratorResult.  # noqa: E501
        :type: str
        """
        self._generator_id = generator_id

    @property
    def active(self):
        """Gets the active of this CpuGeneratorResult.  # noqa: E501

        Indicates whether the result is currently being updated  # noqa: E501

        :return: The active of this CpuGeneratorResult.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CpuGeneratorResult.

        Indicates whether the result is currently being updated  # noqa: E501

        :param active: The active of this CpuGeneratorResult.  # noqa: E501
        :type: bool
        """
        self._active = active

    @property
    def timestamp(self):
        """Gets the timestamp of this CpuGeneratorResult.  # noqa: E501

        The ISO8601-formatted date of the last result update  # noqa: E501

        :return: The timestamp of this CpuGeneratorResult.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CpuGeneratorResult.

        The ISO8601-formatted date of the last result update  # noqa: E501

        :param timestamp: The timestamp of this CpuGeneratorResult.  # noqa: E501
        :type: datetime
        """
        self._timestamp = timestamp

    @property
    def stats(self):
        """Gets the stats of this CpuGeneratorResult.  # noqa: E501


        :return: The stats of this CpuGeneratorResult.  # noqa: E501
        :rtype: CpuGeneratorStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CpuGeneratorResult.


        :param stats: The stats of this CpuGeneratorResult.  # noqa: E501
        :type: CpuGeneratorStats
        """
        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CpuGeneratorResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpuGeneratorResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
