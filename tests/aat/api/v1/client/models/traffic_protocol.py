# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrafficProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modifiers': 'TrafficProtocolModifiers',
        'protocol': 'str',
        'custom': 'PacketProtocolCustom',
        'signature': 'PacketProtocolSpirentSignature',
        'ethernet': 'PacketProtocolEthernet',
        'ipv4': 'PacketProtocolIpv4',
        'ipv6': 'PacketProtocolIpv6',
        'mpls': 'PacketProtocolMpls',
        'tcp': 'PacketProtocolTcp',
        'udp': 'PacketProtocolUdp',
        'vlan': 'PacketProtocolVlan'
    }

    attribute_map = {
        'modifiers': 'modifiers',
        'protocol': 'protocol',
        'custom': 'custom',
        'signature': 'signature',
        'ethernet': 'ethernet',
        'ipv4': 'ipv4',
        'ipv6': 'ipv6',
        'mpls': 'mpls',
        'tcp': 'tcp',
        'udp': 'udp',
        'vlan': 'vlan'
    }

    def __init__(self, modifiers=None, protocol=None, custom=None, signature=None, ethernet=None, ipv4=None, ipv6=None, mpls=None, tcp=None, udp=None, vlan=None):  # noqa: E501
        """TrafficProtocol - a model defined in Swagger"""  # noqa: E501

        self._modifiers = None
        self._protocol = None
        self._custom = None
        self._signature = None
        self._ethernet = None
        self._ipv4 = None
        self._ipv6 = None
        self._mpls = None
        self._tcp = None
        self._udp = None
        self._vlan = None
        self.discriminator = None

        if modifiers is not None:
            self.modifiers = modifiers
        self.protocol = protocol
        if custom is not None:
            self.custom = custom
        if signature is not None:
            self.signature = signature
        if ethernet is not None:
            self.ethernet = ethernet
        if ipv4 is not None:
            self.ipv4 = ipv4
        if ipv6 is not None:
            self.ipv6 = ipv6
        if mpls is not None:
            self.mpls = mpls
        if tcp is not None:
            self.tcp = tcp
        if udp is not None:
            self.udp = udp
        if vlan is not None:
            self.vlan = vlan

    @property
    def modifiers(self):
        """Gets the modifiers of this TrafficProtocol.  # noqa: E501


        :return: The modifiers of this TrafficProtocol.  # noqa: E501
        :rtype: TrafficProtocolModifiers
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this TrafficProtocol.


        :param modifiers: The modifiers of this TrafficProtocol.  # noqa: E501
        :type: TrafficProtocolModifiers
        """
        self._modifiers = modifiers

    @property
    def protocol(self):
        """Gets the protocol of this TrafficProtocol.  # noqa: E501

        protocol type  # noqa: E501

        :return: The protocol of this TrafficProtocol.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TrafficProtocol.

        protocol type  # noqa: E501

        :param protocol: The protocol of this TrafficProtocol.  # noqa: E501
        :type: str
        """
        self._protocol = protocol

    @property
    def custom(self):
        """Gets the custom of this TrafficProtocol.  # noqa: E501


        :return: The custom of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolCustom
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this TrafficProtocol.


        :param custom: The custom of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolCustom
        """
        self._custom = custom

    @property
    def signature(self):
        """Gets the signature of this TrafficProtocol.  # noqa: E501


        :return: The signature of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolSpirentSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this TrafficProtocol.


        :param signature: The signature of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolSpirentSignature
        """
        self._signature = signature

    @property
    def ethernet(self):
        """Gets the ethernet of this TrafficProtocol.  # noqa: E501


        :return: The ethernet of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolEthernet
        """
        return self._ethernet

    @ethernet.setter
    def ethernet(self, ethernet):
        """Sets the ethernet of this TrafficProtocol.


        :param ethernet: The ethernet of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolEthernet
        """
        self._ethernet = ethernet

    @property
    def ipv4(self):
        """Gets the ipv4 of this TrafficProtocol.  # noqa: E501


        :return: The ipv4 of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolIpv4
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this TrafficProtocol.


        :param ipv4: The ipv4 of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolIpv4
        """
        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this TrafficProtocol.  # noqa: E501


        :return: The ipv6 of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolIpv6
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this TrafficProtocol.


        :param ipv6: The ipv6 of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolIpv6
        """
        self._ipv6 = ipv6

    @property
    def mpls(self):
        """Gets the mpls of this TrafficProtocol.  # noqa: E501


        :return: The mpls of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolMpls
        """
        return self._mpls

    @mpls.setter
    def mpls(self, mpls):
        """Sets the mpls of this TrafficProtocol.


        :param mpls: The mpls of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolMpls
        """
        self._mpls = mpls

    @property
    def tcp(self):
        """Gets the tcp of this TrafficProtocol.  # noqa: E501


        :return: The tcp of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolTcp
        """
        return self._tcp

    @tcp.setter
    def tcp(self, tcp):
        """Sets the tcp of this TrafficProtocol.


        :param tcp: The tcp of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolTcp
        """
        self._tcp = tcp

    @property
    def udp(self):
        """Gets the udp of this TrafficProtocol.  # noqa: E501


        :return: The udp of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolUdp
        """
        return self._udp

    @udp.setter
    def udp(self, udp):
        """Sets the udp of this TrafficProtocol.


        :param udp: The udp of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolUdp
        """
        self._udp = udp

    @property
    def vlan(self):
        """Gets the vlan of this TrafficProtocol.  # noqa: E501


        :return: The vlan of this TrafficProtocol.  # noqa: E501
        :rtype: PacketProtocolVlan
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this TrafficProtocol.


        :param vlan: The vlan of this TrafficProtocol.  # noqa: E501
        :type: PacketProtocolVlan
        """
        self._vlan = vlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrafficProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
