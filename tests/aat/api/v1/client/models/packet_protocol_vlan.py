# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolVlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drop_eligible': 'bool',
        'ether_type': 'int',
        'id': 'int',
        'priority': 'str'
    }

    attribute_map = {
        'drop_eligible': 'drop_eligible',
        'ether_type': 'ether_type',
        'id': 'id',
        'priority': 'priority'
    }

    def __init__(self, drop_eligible=None, ether_type=None, id=None, priority=None):  # noqa: E501
        """PacketProtocolVlan - a model defined in Swagger"""  # noqa: E501

        self._drop_eligible = None
        self._ether_type = None
        self._id = None
        self._priority = None
        self.discriminator = None

        if drop_eligible is not None:
            self.drop_eligible = drop_eligible
        if ether_type is not None:
            self.ether_type = ether_type
        if id is not None:
            self.id = id
        if priority is not None:
            self.priority = priority

    @property
    def drop_eligible(self):
        """Gets the drop_eligible of this PacketProtocolVlan.  # noqa: E501

        vlan drop eligible  # noqa: E501

        :return: The drop_eligible of this PacketProtocolVlan.  # noqa: E501
        :rtype: bool
        """
        return self._drop_eligible

    @drop_eligible.setter
    def drop_eligible(self, drop_eligible):
        """Sets the drop_eligible of this PacketProtocolVlan.

        vlan drop eligible  # noqa: E501

        :param drop_eligible: The drop_eligible of this PacketProtocolVlan.  # noqa: E501
        :type: bool
        """
        self._drop_eligible = drop_eligible

    @property
    def ether_type(self):
        """Gets the ether_type of this PacketProtocolVlan.  # noqa: E501

        vlan ether type  # noqa: E501

        :return: The ether_type of this PacketProtocolVlan.  # noqa: E501
        :rtype: int
        """
        return self._ether_type

    @ether_type.setter
    def ether_type(self, ether_type):
        """Sets the ether_type of this PacketProtocolVlan.

        vlan ether type  # noqa: E501

        :param ether_type: The ether_type of this PacketProtocolVlan.  # noqa: E501
        :type: int
        """
        self._ether_type = ether_type

    @property
    def id(self):
        """Gets the id of this PacketProtocolVlan.  # noqa: E501

        vlan id  # noqa: E501

        :return: The id of this PacketProtocolVlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PacketProtocolVlan.

        vlan id  # noqa: E501

        :param id: The id of this PacketProtocolVlan.  # noqa: E501
        :type: int
        """
        self._id = id

    @property
    def priority(self):
        """Gets the priority of this PacketProtocolVlan.  # noqa: E501

        vlan priority  # noqa: E501

        :return: The priority of this PacketProtocolVlan.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PacketProtocolVlan.

        vlan priority  # noqa: E501

        :param priority: The priority of this PacketProtocolVlan.  # noqa: E501
        :type: str
        """
        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolVlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolVlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
