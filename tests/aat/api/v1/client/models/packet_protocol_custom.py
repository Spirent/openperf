# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolCustom(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'str',
        'layer': 'str',
        'protocol_id': 'int'
    }

    attribute_map = {
        'data': 'data',
        'layer': 'layer',
        'protocol_id': 'protocol_id'
    }

    def __init__(self, data=None, layer=None, protocol_id=None):  # noqa: E501
        """PacketProtocolCustom - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._layer = None
        self._protocol_id = None
        self.discriminator = None

        self.data = data
        self.layer = layer
        if protocol_id is not None:
            self.protocol_id = protocol_id

    @property
    def data(self):
        """Gets the data of this PacketProtocolCustom.  # noqa: E501

        Base64 encoded binary packet data  # noqa: E501

        :return: The data of this PacketProtocolCustom.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PacketProtocolCustom.

        Base64 encoded binary packet data  # noqa: E501

        :param data: The data of this PacketProtocolCustom.  # noqa: E501
        :type: str
        """
        self._data = data

    @property
    def layer(self):
        """Gets the layer of this PacketProtocolCustom.  # noqa: E501

        Indicates which protocol layer this protocol belongs to.   # noqa: E501

        :return: The layer of this PacketProtocolCustom.  # noqa: E501
        :rtype: str
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this PacketProtocolCustom.

        Indicates which protocol layer this protocol belongs to.   # noqa: E501

        :param layer: The layer of this PacketProtocolCustom.  # noqa: E501
        :type: str
        """
        self._layer = layer

    @property
    def protocol_id(self):
        """Gets the protocol_id of this PacketProtocolCustom.  # noqa: E501

        Indicates the value to use for a preceding header that supports a next header type or protocol field. For example, if a custom protocol came immediately after an Ethernet header, then this value would be written to the Ethernet header\\'s ether_type field.   # noqa: E501

        :return: The protocol_id of this PacketProtocolCustom.  # noqa: E501
        :rtype: int
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this PacketProtocolCustom.

        Indicates the value to use for a preceding header that supports a next header type or protocol field. For example, if a custom protocol came immediately after an Ethernet header, then this value would be written to the Ethernet header\\'s ether_type field.   # noqa: E501

        :param protocol_id: The protocol_id of this PacketProtocolCustom.  # noqa: E501
        :type: int
        """
        self._protocol_id = protocol_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolCustom, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolCustom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
