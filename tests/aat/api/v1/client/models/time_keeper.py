# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimeKeeper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'time_counter_id': 'str',
        'time_source_id': 'str',
        'synced': 'bool'
    }

    attribute_map = {
        'time': 'time',
        'time_counter_id': 'time_counter_id',
        'time_source_id': 'time_source_id',
        'synced': 'synced'
    }

    def __init__(self, time=None, time_counter_id=None, time_source_id=None, synced=None):  # noqa: E501
        """TimeKeeper - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._time_counter_id = None
        self._time_source_id = None
        self._synced = None
        self.discriminator = None

        self.time = time
        self.time_counter_id = time_counter_id
        self.time_source_id = time_source_id
        self.synced = synced

    @property
    def time(self):
        """Gets the time of this TimeKeeper.  # noqa: E501

        The current time and date in ISO8601 format  # noqa: E501

        :return: The time of this TimeKeeper.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TimeKeeper.

        The current time and date in ISO8601 format  # noqa: E501

        :param time: The time of this TimeKeeper.  # noqa: E501
        :type: datetime
        """
        self._time = time

    @property
    def time_counter_id(self):
        """Gets the time_counter_id of this TimeKeeper.  # noqa: E501

        Time counter used for measuring time intervals  # noqa: E501

        :return: The time_counter_id of this TimeKeeper.  # noqa: E501
        :rtype: str
        """
        return self._time_counter_id

    @time_counter_id.setter
    def time_counter_id(self, time_counter_id):
        """Sets the time_counter_id of this TimeKeeper.

        Time counter used for measuring time intervals  # noqa: E501

        :param time_counter_id: The time_counter_id of this TimeKeeper.  # noqa: E501
        :type: str
        """
        self._time_counter_id = time_counter_id

    @property
    def time_source_id(self):
        """Gets the time_source_id of this TimeKeeper.  # noqa: E501

        Time source used for wall-clock synchronization  # noqa: E501

        :return: The time_source_id of this TimeKeeper.  # noqa: E501
        :rtype: str
        """
        return self._time_source_id

    @time_source_id.setter
    def time_source_id(self, time_source_id):
        """Sets the time_source_id of this TimeKeeper.

        Time source used for wall-clock synchronization  # noqa: E501

        :param time_source_id: The time_source_id of this TimeKeeper.  # noqa: E501
        :type: str
        """
        self._time_source_id = time_source_id

    @property
    def synced(self):
        """Gets the synced of this TimeKeeper.  # noqa: E501

        Indicates if clock has synced to source or not  # noqa: E501

        :return: The synced of this TimeKeeper.  # noqa: E501
        :rtype: bool
        """
        return self._synced

    @synced.setter
    def synced(self, synced):
        """Sets the synced of this TimeKeeper.

        Indicates if clock has synced to source or not  # noqa: E501

        :param synced: The synced of this TimeKeeper.  # noqa: E501
        :type: bool
        """
        self._synced = synced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeKeeper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
