# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TvlpConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'time': 'TvlpConfigurationTime',
        'profile': 'TvlpProfile',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'time': 'time',
        'profile': 'profile',
        'error': 'error'
    }

    def __init__(self, id=None, state=None, time=None, profile=None, error=None):  # noqa: E501
        """TvlpConfiguration - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._state = None
        self._time = None
        self._profile = None
        self._error = None
        self.discriminator = None

        self.id = id
        self.state = state
        self.time = time
        self.profile = profile
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this TvlpConfiguration.  # noqa: E501

        Unique TVLP configuration identifier  # noqa: E501

        :return: The id of this TvlpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TvlpConfiguration.

        Unique TVLP configuration identifier  # noqa: E501

        :param id: The id of this TvlpConfiguration.  # noqa: E501
        :type: str
        """
        self._id = id

    @property
    def state(self):
        """Gets the state of this TvlpConfiguration.  # noqa: E501

        TVLP configuration state - ready - TVLP contains a valid configuration and is ready to be started - countdown - TVLP has been given a start time in the future and is waiting to start replaying a profile - running - TVLP is replaying a profile - error - TVLP encountered a runtime error   # noqa: E501

        :return: The state of this TvlpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TvlpConfiguration.

        TVLP configuration state - ready - TVLP contains a valid configuration and is ready to be started - countdown - TVLP has been given a start time in the future and is waiting to start replaying a profile - running - TVLP is replaying a profile - error - TVLP encountered a runtime error   # noqa: E501

        :param state: The state of this TvlpConfiguration.  # noqa: E501
        :type: str
        """
        self._state = state

    @property
    def time(self):
        """Gets the time of this TvlpConfiguration.  # noqa: E501


        :return: The time of this TvlpConfiguration.  # noqa: E501
        :rtype: TvlpConfigurationTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TvlpConfiguration.


        :param time: The time of this TvlpConfiguration.  # noqa: E501
        :type: TvlpConfigurationTime
        """
        self._time = time

    @property
    def profile(self):
        """Gets the profile of this TvlpConfiguration.  # noqa: E501


        :return: The profile of this TvlpConfiguration.  # noqa: E501
        :rtype: TvlpProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this TvlpConfiguration.


        :param profile: The profile of this TvlpConfiguration.  # noqa: E501
        :type: TvlpProfile
        """
        self._profile = profile

    @property
    def error(self):
        """Gets the error of this TvlpConfiguration.  # noqa: E501

        string describing error condition; only when state == error  # noqa: E501

        :return: The error of this TvlpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TvlpConfiguration.

        string describing error condition; only when state == error  # noqa: E501

        :param error: The error of this TvlpConfiguration.  # noqa: E501
        :type: str
        """
        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TvlpConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TvlpConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
