# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalyzerProtocolCountersInnerProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tcp': 'int',
        'udp': 'int',
        'fragmented': 'int',
        'sctp': 'int',
        'icmp': 'int',
        'non_fragmented': 'int'
    }

    attribute_map = {
        'tcp': 'tcp',
        'udp': 'udp',
        'fragmented': 'fragmented',
        'sctp': 'sctp',
        'icmp': 'icmp',
        'non_fragmented': 'non_fragmented'
    }

    def __init__(self, tcp=None, udp=None, fragmented=None, sctp=None, icmp=None, non_fragmented=None):  # noqa: E501
        """AnalyzerProtocolCountersInnerProtocol - a model defined in Swagger"""  # noqa: E501

        self._tcp = None
        self._udp = None
        self._fragmented = None
        self._sctp = None
        self._icmp = None
        self._non_fragmented = None
        self.discriminator = None

        self.tcp = tcp
        self.udp = udp
        self.fragmented = fragmented
        self.sctp = sctp
        self.icmp = icmp
        self.non_fragmented = non_fragmented

    @property
    def tcp(self):
        """Gets the tcp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of Transmission Control Protocol packets  # noqa: E501

        :return: The tcp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._tcp

    @tcp.setter
    def tcp(self, tcp):
        """Sets the tcp of this AnalyzerProtocolCountersInnerProtocol.

        Number of Transmission Control Protocol packets  # noqa: E501

        :param tcp: The tcp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._tcp = tcp

    @property
    def udp(self):
        """Gets the udp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of User Data Protocol packets  # noqa: E501

        :return: The udp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._udp

    @udp.setter
    def udp(self, udp):
        """Sets the udp of this AnalyzerProtocolCountersInnerProtocol.

        Number of User Data Protocol packets  # noqa: E501

        :param udp: The udp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._udp = udp

    @property
    def fragmented(self):
        """Gets the fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of fragmented packets  # noqa: E501

        :return: The fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._fragmented

    @fragmented.setter
    def fragmented(self, fragmented):
        """Sets the fragmented of this AnalyzerProtocolCountersInnerProtocol.

        Number of fragmented packets  # noqa: E501

        :param fragmented: The fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._fragmented = fragmented

    @property
    def sctp(self):
        """Gets the sctp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of Stream Control Transmission Protocol packets  # noqa: E501

        :return: The sctp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._sctp

    @sctp.setter
    def sctp(self, sctp):
        """Sets the sctp of this AnalyzerProtocolCountersInnerProtocol.

        Number of Stream Control Transmission Protocol packets  # noqa: E501

        :param sctp: The sctp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._sctp = sctp

    @property
    def icmp(self):
        """Gets the icmp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of Internet Control Message Protocol packets  # noqa: E501

        :return: The icmp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._icmp

    @icmp.setter
    def icmp(self, icmp):
        """Sets the icmp of this AnalyzerProtocolCountersInnerProtocol.

        Number of Internet Control Message Protocol packets  # noqa: E501

        :param icmp: The icmp of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._icmp = icmp

    @property
    def non_fragmented(self):
        """Gets the non_fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501

        Number of non-fragmented packets  # noqa: E501

        :return: The non_fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :rtype: int
        """
        return self._non_fragmented

    @non_fragmented.setter
    def non_fragmented(self, non_fragmented):
        """Sets the non_fragmented of this AnalyzerProtocolCountersInnerProtocol.

        Number of non-fragmented packets  # noqa: E501

        :param non_fragmented: The non_fragmented of this AnalyzerProtocolCountersInnerProtocol.  # noqa: E501
        :type: int
        """
        self._non_fragmented = non_fragmented

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzerProtocolCountersInnerProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
