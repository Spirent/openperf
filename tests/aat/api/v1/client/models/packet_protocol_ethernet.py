# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketProtocolEthernet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'ether_type': 'int',
        'source': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'ether_type': 'ether_type',
        'source': 'source'
    }

    def __init__(self, destination=None, ether_type=None, source=None):  # noqa: E501
        """PacketProtocolEthernet - a model defined in Swagger"""  # noqa: E501

        self._destination = None
        self._ether_type = None
        self._source = None
        self.discriminator = None

        if destination is not None:
            self.destination = destination
        if ether_type is not None:
            self.ether_type = ether_type
        if source is not None:
            self.source = source

    @property
    def destination(self):
        """Gets the destination of this PacketProtocolEthernet.  # noqa: E501

        Ethernet MAC destination address  # noqa: E501

        :return: The destination of this PacketProtocolEthernet.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PacketProtocolEthernet.

        Ethernet MAC destination address  # noqa: E501

        :param destination: The destination of this PacketProtocolEthernet.  # noqa: E501
        :type: str
        """
        self._destination = destination

    @property
    def ether_type(self):
        """Gets the ether_type of this PacketProtocolEthernet.  # noqa: E501

        Ethernet ether type  # noqa: E501

        :return: The ether_type of this PacketProtocolEthernet.  # noqa: E501
        :rtype: int
        """
        return self._ether_type

    @ether_type.setter
    def ether_type(self, ether_type):
        """Sets the ether_type of this PacketProtocolEthernet.

        Ethernet ether type  # noqa: E501

        :param ether_type: The ether_type of this PacketProtocolEthernet.  # noqa: E501
        :type: int
        """
        self._ether_type = ether_type

    @property
    def source(self):
        """Gets the source of this PacketProtocolEthernet.  # noqa: E501

        Ethernet MAC source address  # noqa: E501

        :return: The source of this PacketProtocolEthernet.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PacketProtocolEthernet.

        Ethernet MAC source address  # noqa: E501

        :param source: The source of this PacketProtocolEthernet.  # noqa: E501
        :type: str
        """
        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketProtocolEthernet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketProtocolEthernet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
