# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrafficProtocolModifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'offset': 'int',
        'permute': 'bool',
        'field': 'TrafficProtocolFieldModifier',
        'ipv4': 'TrafficProtocolIpv4Modifier',
        'ipv6': 'TrafficProtocolIpv6Modifier',
        'mac': 'TrafficProtocolMacModifier'
    }

    attribute_map = {
        'name': 'name',
        'offset': 'offset',
        'permute': 'permute',
        'field': 'field',
        'ipv4': 'ipv4',
        'ipv6': 'ipv6',
        'mac': 'mac'
    }

    def __init__(self, name=None, offset=None, permute=None, field=None, ipv4=None, ipv6=None, mac=None):  # noqa: E501
        """TrafficProtocolModifier - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._offset = None
        self._permute = None
        self._field = None
        self._ipv4 = None
        self._ipv6 = None
        self._mac = None
        self.discriminator = None

        self.name = name
        if offset is not None:
            self.offset = offset
        self.permute = permute
        if field is not None:
            self.field = field
        if ipv4 is not None:
            self.ipv4 = ipv4
        if ipv6 is not None:
            self.ipv6 = ipv6
        if mac is not None:
            self.mac = mac

    @property
    def name(self):
        """Gets the name of this TrafficProtocolModifier.  # noqa: E501

        Packet protocol field to modify. Context determines what field names are valid and what data is expected in the modifier.   # noqa: E501

        :return: The name of this TrafficProtocolModifier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrafficProtocolModifier.

        Packet protocol field to modify. Context determines what field names are valid and what data is expected in the modifier.   # noqa: E501

        :param name: The name of this TrafficProtocolModifier.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def offset(self):
        """Gets the offset of this TrafficProtocolModifier.  # noqa: E501

        Specifies the number of octets into the protocol field to write modifier data. Currently only valid for the custom packet protocol \\\"data\\\" field.   # noqa: E501

        :return: The offset of this TrafficProtocolModifier.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TrafficProtocolModifier.

        Specifies the number of octets into the protocol field to write modifier data. Currently only valid for the custom packet protocol \\\"data\\\" field.   # noqa: E501

        :param offset: The offset of this TrafficProtocolModifier.  # noqa: E501
        :type: int
        """
        self._offset = offset

    @property
    def permute(self):
        """Gets the permute of this TrafficProtocolModifier.  # noqa: E501

        Specifies whether to pseudo-randomly order the modifier values   # noqa: E501

        :return: The permute of this TrafficProtocolModifier.  # noqa: E501
        :rtype: bool
        """
        return self._permute

    @permute.setter
    def permute(self, permute):
        """Sets the permute of this TrafficProtocolModifier.

        Specifies whether to pseudo-randomly order the modifier values   # noqa: E501

        :param permute: The permute of this TrafficProtocolModifier.  # noqa: E501
        :type: bool
        """
        self._permute = permute

    @property
    def field(self):
        """Gets the field of this TrafficProtocolModifier.  # noqa: E501


        :return: The field of this TrafficProtocolModifier.  # noqa: E501
        :rtype: TrafficProtocolFieldModifier
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this TrafficProtocolModifier.


        :param field: The field of this TrafficProtocolModifier.  # noqa: E501
        :type: TrafficProtocolFieldModifier
        """
        self._field = field

    @property
    def ipv4(self):
        """Gets the ipv4 of this TrafficProtocolModifier.  # noqa: E501


        :return: The ipv4 of this TrafficProtocolModifier.  # noqa: E501
        :rtype: TrafficProtocolIpv4Modifier
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this TrafficProtocolModifier.


        :param ipv4: The ipv4 of this TrafficProtocolModifier.  # noqa: E501
        :type: TrafficProtocolIpv4Modifier
        """
        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this TrafficProtocolModifier.  # noqa: E501


        :return: The ipv6 of this TrafficProtocolModifier.  # noqa: E501
        :rtype: TrafficProtocolIpv6Modifier
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this TrafficProtocolModifier.


        :param ipv6: The ipv6 of this TrafficProtocolModifier.  # noqa: E501
        :type: TrafficProtocolIpv6Modifier
        """
        self._ipv6 = ipv6

    @property
    def mac(self):
        """Gets the mac of this TrafficProtocolModifier.  # noqa: E501


        :return: The mac of this TrafficProtocolModifier.  # noqa: E501
        :rtype: TrafficProtocolMacModifier
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this TrafficProtocolModifier.


        :param mac: The mac of this TrafficProtocolModifier.  # noqa: E501
        :type: TrafficProtocolMacModifier
        """
        self._mac = mac

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrafficProtocolModifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficProtocolModifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
