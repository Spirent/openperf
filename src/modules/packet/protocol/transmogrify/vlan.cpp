/**
 * swagger <-> libpacket transmogrify implementation for vlan
 *
 * This file is automatically generated by the transmogrify code generator.
 * Do not edit this file manually.
 **/

#include "vlan.hpp"

namespace packet::protocol::transmogrify {

std::shared_ptr<swagger::v1::model::PacketProtocolVlan> to_swagger(packet::protocol::vlan& src)
{
    auto dst = std::make_shared<swagger::v1::model::PacketProtocolVlan>();


    switch(auto priority_value = get_vlan_priority(src)) {
    case vlan::priority_value::network_control:
        dst->setPriority("network_control");
        break;
    case vlan::priority_value::internetwork_control:
        dst->setPriority("internetwork_control");
        break;
    case vlan::priority_value::voice:
        dst->setPriority("voice");
        break;
    case vlan::priority_value::video:
        dst->setPriority("video");
        break;
    case vlan::priority_value::critical_app:
        dst->setPriority("critical_app");
        break;
    case vlan::priority_value::excellent_effort:
        dst->setPriority("excellent_effort");
        break;
    case vlan::priority_value::background:
        dst->setPriority("background");
        break;
    case vlan::priority_value::best_effort:
        dst->setPriority("best_effort");
        break;
    }

    dst->setDropEligible(get_vlan_drop_eligible(src));
    dst->setId(get_vlan_id(src));
    dst->setEtherType(get_vlan_ether_type(src));

    return (dst);
}

static enum vlan::priority_value to_vlan_priority(std::string_view value)
{
    if (value == "network_control")
    {
        return (vlan::priority_value::network_control);
    }
    else if (value == "internetwork_control")
    {
        return (vlan::priority_value::internetwork_control);
    }
    else if (value == "voice")
    {
        return (vlan::priority_value::voice);
    }
    else if (value == "video")
    {
        return (vlan::priority_value::video);
    }
    else if (value == "critical_app")
    {
        return (vlan::priority_value::critical_app);
    }
    else if (value == "excellent_effort")
    {
        return (vlan::priority_value::excellent_effort);
    }
    else if (value == "background")
    {
        return (vlan::priority_value::background);
    }
    else if (value == "best_effort")
    {
        return (vlan::priority_value::best_effort);
    }

    return (static_cast<vlan::priority_value>(0));
}

packet::protocol::vlan to_protocol(std::shared_ptr<swagger::v1::model::PacketProtocolVlan>& src)
{
    auto dst = packet::protocol::vlan{};

    if (src->priorityIsSet())
    {
        set_vlan_priority(dst, to_vlan_priority(src->getPriority()));
    }

    if (src->dropEligibleIsSet())
    {
        set_vlan_drop_eligible(dst, src->isDropEligible());
    }

    if (src->idIsSet())
    {
        set_vlan_id(dst, src->getId());
    }

    if (src->etherTypeIsSet())
    {
        set_vlan_ether_type(dst, src->getEtherType());
    }

    return (dst);
}

}
