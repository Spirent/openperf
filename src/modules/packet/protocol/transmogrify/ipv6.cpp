/**
 * swagger <-> libpacket transmogrify implementation for IPv6
 *
 * This file is automatically generated by the transmogrify code generator.
 * Do not edit this file manually.
 **/

#include "ipv6.hpp"

namespace openperf::packet::protocol::transmogrify {

std::shared_ptr<swagger::v1::model::PacketProtocolIpv6> to_swagger(const libpacket::protocol::ipv6& src)
{
    auto dst = std::make_shared<swagger::v1::model::PacketProtocolIpv6>();

    dst->setVersion(get_ipv6_version(src));
    dst->setTrafficClass(get_ipv6_traffic_class(src));
    dst->setFlowLabel(get_ipv6_flow_label(src));
    dst->setPayloadLength(get_ipv6_payload_length(src));
    dst->setNextHeader(get_ipv6_next_header(src));
    dst->setHopLimit(get_ipv6_hop_limit(src));
    dst->setSource(to_string(get_ipv6_source(src)));
    dst->setDestination(to_string(get_ipv6_destination(src)));

    return (dst);
}

libpacket::protocol::ipv6 to_protocol(const std::shared_ptr<swagger::v1::model::PacketProtocolIpv6>& src)
{
    auto dst = libpacket::protocol::ipv6{};
    set_ipv6_defaults(dst);

    if (src) {
        if (src->versionIsSet())
        {
            set_ipv6_version(dst, src->getVersion());
        }
        if (src->trafficClassIsSet())
        {
            set_ipv6_traffic_class(dst, src->getTrafficClass());
        }
        if (src->flowLabelIsSet())
        {
            set_ipv6_flow_label(dst, src->getFlowLabel());
        }
        if (src->payloadLengthIsSet())
        {
            set_ipv6_payload_length(dst, src->getPayloadLength());
        }
        if (src->nextHeaderIsSet())
        {
            set_ipv6_next_header(dst, src->getNextHeader());
        }
        if (src->hopLimitIsSet())
        {
            set_ipv6_hop_limit(dst, src->getHopLimit());
        }
        if (src->sourceIsSet())
        {
            set_ipv6_source(dst, libpacket::type::ipv6_address(src->getSource()));
        }
        if (src->destinationIsSet())
        {
            set_ipv6_destination(dst, libpacket::type::ipv6_address(src->getDestination()));
        }
    }

    return (dst);
}

}
