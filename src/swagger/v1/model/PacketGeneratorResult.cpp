/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketGeneratorResult.h"

namespace swagger {
namespace v1 {
namespace model {

PacketGeneratorResult::PacketGeneratorResult()
{
    m_Id = "";
    m_Generator_id = "";
    m_Generator_idIsSet = false;
    m_Active = false;
    m_RemainingIsSet = false;
    
}

PacketGeneratorResult::~PacketGeneratorResult()
{
}

void PacketGeneratorResult::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketGeneratorResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    if(m_Generator_idIsSet)
    {
        val["generator_id"] = ModelBase::toJson(m_Generator_id);
    }
    val["active"] = m_Active;
    val["flow_counters"] = ModelBase::toJson(m_Flow_counters);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Flows )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["flows"] = jsonArray;
            }
    if(m_RemainingIsSet)
    {
        val["remaining"] = ModelBase::toJson(m_Remaining);
    }
    

    return val;
}

void PacketGeneratorResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    if(val.find("generator_id") != val.end())
    {
        setGeneratorId(val.at("generator_id"));
        
    }
    setActive(val.at("active"));
    {
        m_Flows.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["flows"] )
        {
            m_Flows.push_back(item);
            
        }
    }
    if(val.find("remaining") != val.end())
    {
        if(!val["remaining"].is_null())
        {
            std::shared_ptr<DurationRemainder> newItem(new DurationRemainder());
            newItem->fromJson(val["remaining"]);
            setRemaining( newItem );
        }
        
    }
    
}


std::string PacketGeneratorResult::getId() const
{
    return m_Id;
}
void PacketGeneratorResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string PacketGeneratorResult::getGeneratorId() const
{
    return m_Generator_id;
}
void PacketGeneratorResult::setGeneratorId(std::string value)
{
    m_Generator_id = value;
    m_Generator_idIsSet = true;
}
bool PacketGeneratorResult::generatorIdIsSet() const
{
    return m_Generator_idIsSet;
}
void PacketGeneratorResult::unsetGenerator_id()
{
    m_Generator_idIsSet = false;
}
bool PacketGeneratorResult::isActive() const
{
    return m_Active;
}
void PacketGeneratorResult::setActive(bool value)
{
    m_Active = value;
    
}
std::shared_ptr<PacketGeneratorFlowCounters> PacketGeneratorResult::getFlowCounters() const
{
    return m_Flow_counters;
}
void PacketGeneratorResult::setFlowCounters(std::shared_ptr<PacketGeneratorFlowCounters> value)
{
    m_Flow_counters = value;
    
}
std::vector<std::string>& PacketGeneratorResult::getFlows()
{
    return m_Flows;
}
std::shared_ptr<DurationRemainder> PacketGeneratorResult::getRemaining() const
{
    return m_Remaining;
}
void PacketGeneratorResult::setRemaining(std::shared_ptr<DurationRemainder> value)
{
    m_Remaining = value;
    m_RemainingIsSet = true;
}
bool PacketGeneratorResult::remainingIsSet() const
{
    return m_RemainingIsSet;
}
void PacketGeneratorResult::unsetRemaining()
{
    m_RemainingIsSet = false;
}

}
}
}

