/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketGeneratorResult.h"

namespace swagger {
namespace v1 {
namespace model {

PacketGeneratorResult::PacketGeneratorResult()
{
    m_Id = "";
    m_Active = false;
    
}

PacketGeneratorResult::~PacketGeneratorResult()
{
}

void PacketGeneratorResult::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketGeneratorResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["active"] = m_Active;
    val["duration"] = ModelBase::toJson(m_Duration);
    val["flow_counters"] = ModelBase::toJson(m_Flow_counters);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Flows )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["flows"] = jsonArray;
            }
    

    return val;
}

void PacketGeneratorResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setActive(val.at("active"));
    {
        m_Flows.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["flows"] )
        {
            m_Flows.push_back(item);
            
        }
    }
    
}


std::string PacketGeneratorResult::getId() const
{
    return m_Id;
}
void PacketGeneratorResult::setId(std::string value)
{
    m_Id = value;
    
}
bool PacketGeneratorResult::isActive() const
{
    return m_Active;
}
void PacketGeneratorResult::setActive(bool value)
{
    m_Active = value;
    
}
std::shared_ptr<DurationRemainder> PacketGeneratorResult::getDuration() const
{
    return m_Duration;
}
void PacketGeneratorResult::setDuration(std::shared_ptr<DurationRemainder> value)
{
    m_Duration = value;
    
}
std::shared_ptr<PacketGeneratorFlowCounters> PacketGeneratorResult::getFlowCounters() const
{
    return m_Flow_counters;
}
void PacketGeneratorResult::setFlowCounters(std::shared_ptr<PacketGeneratorFlowCounters> value)
{
    m_Flow_counters = value;
    
}
std::vector<std::string>& PacketGeneratorResult::getFlows()
{
    return m_Flows;
}

}
}
}

