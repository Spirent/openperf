/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "InterfaceProtocolConfig_ipv6.h"

namespace swagger {
namespace v1 {
namespace model {

InterfaceProtocolConfig_ipv6::InterfaceProtocolConfig_ipv6()
{
    m_Method = "";
    m_Link_local_address = "";
    m_Link_local_addressIsSet = false;
    m_StaticIsSet = false;
    m_Dhcp6IsSet = false;
    m_AutoIsSet = false;
    
}

InterfaceProtocolConfig_ipv6::~InterfaceProtocolConfig_ipv6()
{
}

void InterfaceProtocolConfig_ipv6::validate()
{
    // TODO: implement validation
}

nlohmann::json InterfaceProtocolConfig_ipv6::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["method"] = ModelBase::toJson(m_Method);
    if(m_Link_local_addressIsSet)
    {
        val["link_local_address"] = ModelBase::toJson(m_Link_local_address);
    }
    if(m_StaticIsSet)
    {
        val["static"] = ModelBase::toJson(m_Static);
    }
    if(m_Dhcp6IsSet)
    {
        val["dhcp6"] = ModelBase::toJson(m_Dhcp6);
    }
    if(m_AutoIsSet)
    {
        val["auto"] = ModelBase::toJson(m_Auto);
    }
    

    return val;
}

void InterfaceProtocolConfig_ipv6::fromJson(nlohmann::json& val)
{
    setMethod(val.at("method"));
    if(val.find("link_local_address") != val.end())
    {
        setLinkLocalAddress(val.at("link_local_address"));
        
    }
    if(val.find("static") != val.end())
    {
        if(!val["static"].is_null())
        {
            std::shared_ptr<InterfaceProtocolConfig_ipv6_static> newItem(new InterfaceProtocolConfig_ipv6_static());
            newItem->fromJson(val["static"]);
            setStatic( newItem );
        }
        
    }
    if(val.find("dhcp6") != val.end())
    {
        if(!val["dhcp6"].is_null())
        {
            std::shared_ptr<InterfaceProtocolConfig_ipv6_dhcp6> newItem(new InterfaceProtocolConfig_ipv6_dhcp6());
            newItem->fromJson(val["dhcp6"]);
            setDhcp6( newItem );
        }
        
    }
    if(val.find("auto") != val.end())
    {
        if(!val["auto"].is_null())
        {
            std::shared_ptr<InterfaceProtocolConfig_ipv6_auto> newItem(new InterfaceProtocolConfig_ipv6_auto());
            newItem->fromJson(val["auto"]);
            setAuto( newItem );
        }
        
    }
    
}


std::string InterfaceProtocolConfig_ipv6::getMethod() const
{
    return m_Method;
}
void InterfaceProtocolConfig_ipv6::setMethod(std::string value)
{
    m_Method = value;
    
}
std::string InterfaceProtocolConfig_ipv6::getLinkLocalAddress() const
{
    return m_Link_local_address;
}
void InterfaceProtocolConfig_ipv6::setLinkLocalAddress(std::string value)
{
    m_Link_local_address = value;
    m_Link_local_addressIsSet = true;
}
bool InterfaceProtocolConfig_ipv6::linkLocalAddressIsSet() const
{
    return m_Link_local_addressIsSet;
}
void InterfaceProtocolConfig_ipv6::unsetLink_local_address()
{
    m_Link_local_addressIsSet = false;
}
std::shared_ptr<InterfaceProtocolConfig_ipv6_static> InterfaceProtocolConfig_ipv6::getStatic() const
{
    return m_Static;
}
void InterfaceProtocolConfig_ipv6::setStatic(std::shared_ptr<InterfaceProtocolConfig_ipv6_static> value)
{
    m_Static = value;
    m_StaticIsSet = true;
}
bool InterfaceProtocolConfig_ipv6::staticIsSet() const
{
    return m_StaticIsSet;
}
void InterfaceProtocolConfig_ipv6::unsetStatic()
{
    m_StaticIsSet = false;
}
std::shared_ptr<InterfaceProtocolConfig_ipv6_dhcp6> InterfaceProtocolConfig_ipv6::getDhcp6() const
{
    return m_Dhcp6;
}
void InterfaceProtocolConfig_ipv6::setDhcp6(std::shared_ptr<InterfaceProtocolConfig_ipv6_dhcp6> value)
{
    m_Dhcp6 = value;
    m_Dhcp6IsSet = true;
}
bool InterfaceProtocolConfig_ipv6::dhcp6IsSet() const
{
    return m_Dhcp6IsSet;
}
void InterfaceProtocolConfig_ipv6::unsetDhcp6()
{
    m_Dhcp6IsSet = false;
}
std::shared_ptr<InterfaceProtocolConfig_ipv6_auto> InterfaceProtocolConfig_ipv6::getAuto() const
{
    return m_Auto;
}
void InterfaceProtocolConfig_ipv6::setAuto(std::shared_ptr<InterfaceProtocolConfig_ipv6_auto> value)
{
    m_Auto = value;
    m_AutoIsSet = true;
}
bool InterfaceProtocolConfig_ipv6::autoIsSet() const
{
    return m_AutoIsSet;
}
void InterfaceProtocolConfig_ipv6::unsetAuto()
{
    m_AutoIsSet = false;
}

}
}
}

