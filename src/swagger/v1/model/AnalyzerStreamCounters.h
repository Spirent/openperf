/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * AnalyzerStreamCounters.h
 *
 * Result counters for streams
 */

#ifndef AnalyzerStreamCounters_H_
#define AnalyzerStreamCounters_H_


#include "ModelBase.h"

#include "AnalyzerStreamCounters_interarrival.h"
#include "AnalyzerStreamCounters_sequence.h"
#include "AnalyzerStreamCounters_frame_length.h"
#include <string>
#include "AnalyzerStreamCounters_jitter_ipdv.h"
#include "AnalyzerStreamCounters_jitter_rfc.h"
#include "AnalyzerStreamCounters_latency.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Result counters for streams
/// </summary>
class  AnalyzerStreamCounters
    : public ModelBase
{
public:
    AnalyzerStreamCounters();
    virtual ~AnalyzerStreamCounters();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AnalyzerStreamCounters members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_frame_length> getFrameLength() const;
    void setFrameLength(std::shared_ptr<AnalyzerStreamCounters_frame_length> value);
    bool frameLengthIsSet() const;
    void unsetFrame_length();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_interarrival> getInterarrival() const;
    void setInterarrival(std::shared_ptr<AnalyzerStreamCounters_interarrival> value);
    bool interarrivalIsSet() const;
    void unsetInterarrival();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_jitter_ipdv> getJitterIpdv() const;
    void setJitterIpdv(std::shared_ptr<AnalyzerStreamCounters_jitter_ipdv> value);
    bool jitterIpdvIsSet() const;
    void unsetJitter_ipdv();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_jitter_rfc> getJitterRfc() const;
    void setJitterRfc(std::shared_ptr<AnalyzerStreamCounters_jitter_rfc> value);
    bool jitterRfcIsSet() const;
    void unsetJitter_rfc();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_latency> getLatency() const;
    void setLatency(std::shared_ptr<AnalyzerStreamCounters_latency> value);
    bool latencyIsSet() const;
    void unsetLatency();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters_sequence> getSequence() const;
    void setSequence(std::shared_ptr<AnalyzerStreamCounters_sequence> value);
    bool sequenceIsSet() const;
    void unsetSequence();
    /// <summary>
    /// Number of received packets
    /// </summary>
    int64_t getFrameCount() const;
    void setFrameCount(int64_t value);
        /// <summary>
    /// Timestamp of first received packet
    /// </summary>
    std::string getTimestampFirst() const;
    void setTimestampFirst(std::string value);
    bool timestampFirstIsSet() const;
    void unsetTimestamp_first();
    /// <summary>
    /// Timestamp of last received packed
    /// </summary>
    std::string getTimestampLast() const;
    void setTimestampLast(std::string value);
    bool timestampLastIsSet() const;
    void unsetTimestamp_last();

protected:
    std::shared_ptr<AnalyzerStreamCounters_frame_length> m_Frame_length;
    bool m_Frame_lengthIsSet;
    std::shared_ptr<AnalyzerStreamCounters_interarrival> m_Interarrival;
    bool m_InterarrivalIsSet;
    std::shared_ptr<AnalyzerStreamCounters_jitter_ipdv> m_Jitter_ipdv;
    bool m_Jitter_ipdvIsSet;
    std::shared_ptr<AnalyzerStreamCounters_jitter_rfc> m_Jitter_rfc;
    bool m_Jitter_rfcIsSet;
    std::shared_ptr<AnalyzerStreamCounters_latency> m_Latency;
    bool m_LatencyIsSet;
    std::shared_ptr<AnalyzerStreamCounters_sequence> m_Sequence;
    bool m_SequenceIsSet;
    int64_t m_Frame_count;

    std::string m_Timestamp_first;
    bool m_Timestamp_firstIsSet;
    std::string m_Timestamp_last;
    bool m_Timestamp_lastIsSet;
};

}
}
}

#endif /* AnalyzerStreamCounters_H_ */
