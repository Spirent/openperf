/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "AnalyzerConfig.h"

namespace swagger {
namespace v1 {
namespace model {

AnalyzerConfig::AnalyzerConfig()
{
    m_Filter = "";
    m_FilterIsSet = false;
    
}

AnalyzerConfig::~AnalyzerConfig()
{
}

void AnalyzerConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json AnalyzerConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_FilterIsSet)
    {
        val["filter"] = ModelBase::toJson(m_Filter);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Protocol_counters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["protocol_counters"] = jsonArray;
            }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Stream_counters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["stream_counters"] = jsonArray;
            }
    

    return val;
}

void AnalyzerConfig::fromJson(nlohmann::json& val)
{
    if(val.find("filter") != val.end())
    {
        setFilter(val.at("filter"));
        
    }
    {
        m_Protocol_counters.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["protocol_counters"] )
        {
            m_Protocol_counters.push_back(item);
            
        }
    }
    {
        m_Stream_counters.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["stream_counters"] )
        {
            m_Stream_counters.push_back(item);
            
        }
    }
    
}


std::string AnalyzerConfig::getFilter() const
{
    return m_Filter;
}
void AnalyzerConfig::setFilter(std::string value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}
bool AnalyzerConfig::filterIsSet() const
{
    return m_FilterIsSet;
}
void AnalyzerConfig::unsetFilter()
{
    m_FilterIsSet = false;
}
std::vector<std::string>& AnalyzerConfig::getProtocolCounters()
{
    return m_Protocol_counters;
}
std::vector<std::string>& AnalyzerConfig::getStreamCounters()
{
    return m_Stream_counters;
}

}
}
}

