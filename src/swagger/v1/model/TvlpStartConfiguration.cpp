/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TvlpStartConfiguration.h"

namespace swagger {
namespace v1 {
namespace model {

TvlpStartConfiguration::TvlpStartConfiguration()
{
    m_Start_time = "";
    m_Start_timeIsSet = false;
    m_CpuIsSet = false;
    m_MemoryIsSet = false;
    m_BlockIsSet = false;
    m_PacketIsSet = false;
    m_NetworkIsSet = false;
    
}

TvlpStartConfiguration::~TvlpStartConfiguration()
{
}

void TvlpStartConfiguration::validate()
{
    // TODO: implement validation
}

nlohmann::json TvlpStartConfiguration::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Start_timeIsSet)
    {
        val["start_time"] = ModelBase::toJson(m_Start_time);
    }
    if(m_CpuIsSet)
    {
        val["cpu"] = ModelBase::toJson(m_Cpu);
    }
    if(m_MemoryIsSet)
    {
        val["memory"] = ModelBase::toJson(m_Memory);
    }
    if(m_BlockIsSet)
    {
        val["block"] = ModelBase::toJson(m_Block);
    }
    if(m_PacketIsSet)
    {
        val["packet"] = ModelBase::toJson(m_Packet);
    }
    if(m_NetworkIsSet)
    {
        val["network"] = ModelBase::toJson(m_Network);
    }
    

    return val;
}

void TvlpStartConfiguration::fromJson(nlohmann::json& val)
{
    if(val.find("start_time") != val.end())
    {
        setStartTime(val.at("start_time"));
        
    }
    if(val.find("cpu") != val.end())
    {
        if(!val["cpu"].is_null())
        {
            std::shared_ptr<TvlpStartSeriesConfiguration> newItem(new TvlpStartSeriesConfiguration());
            newItem->fromJson(val["cpu"]);
            setCpu( newItem );
        }
        
    }
    if(val.find("memory") != val.end())
    {
        if(!val["memory"].is_null())
        {
            std::shared_ptr<TvlpStartSeriesConfiguration> newItem(new TvlpStartSeriesConfiguration());
            newItem->fromJson(val["memory"]);
            setMemory( newItem );
        }
        
    }
    if(val.find("block") != val.end())
    {
        if(!val["block"].is_null())
        {
            std::shared_ptr<TvlpStartSeriesConfiguration> newItem(new TvlpStartSeriesConfiguration());
            newItem->fromJson(val["block"]);
            setBlock( newItem );
        }
        
    }
    if(val.find("packet") != val.end())
    {
        if(!val["packet"].is_null())
        {
            std::shared_ptr<TvlpStartSeriesConfiguration> newItem(new TvlpStartSeriesConfiguration());
            newItem->fromJson(val["packet"]);
            setPacket( newItem );
        }
        
    }
    if(val.find("network") != val.end())
    {
        if(!val["network"].is_null())
        {
            std::shared_ptr<TvlpStartSeriesConfiguration> newItem(new TvlpStartSeriesConfiguration());
            newItem->fromJson(val["network"]);
            setNetwork( newItem );
        }
        
    }
    
}


std::string TvlpStartConfiguration::getStartTime() const
{
    return m_Start_time;
}
void TvlpStartConfiguration::setStartTime(std::string value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}
bool TvlpStartConfiguration::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}
void TvlpStartConfiguration::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
std::shared_ptr<TvlpStartSeriesConfiguration> TvlpStartConfiguration::getCpu() const
{
    return m_Cpu;
}
void TvlpStartConfiguration::setCpu(std::shared_ptr<TvlpStartSeriesConfiguration> value)
{
    m_Cpu = value;
    m_CpuIsSet = true;
}
bool TvlpStartConfiguration::cpuIsSet() const
{
    return m_CpuIsSet;
}
void TvlpStartConfiguration::unsetCpu()
{
    m_CpuIsSet = false;
}
std::shared_ptr<TvlpStartSeriesConfiguration> TvlpStartConfiguration::getMemory() const
{
    return m_Memory;
}
void TvlpStartConfiguration::setMemory(std::shared_ptr<TvlpStartSeriesConfiguration> value)
{
    m_Memory = value;
    m_MemoryIsSet = true;
}
bool TvlpStartConfiguration::memoryIsSet() const
{
    return m_MemoryIsSet;
}
void TvlpStartConfiguration::unsetMemory()
{
    m_MemoryIsSet = false;
}
std::shared_ptr<TvlpStartSeriesConfiguration> TvlpStartConfiguration::getBlock() const
{
    return m_Block;
}
void TvlpStartConfiguration::setBlock(std::shared_ptr<TvlpStartSeriesConfiguration> value)
{
    m_Block = value;
    m_BlockIsSet = true;
}
bool TvlpStartConfiguration::blockIsSet() const
{
    return m_BlockIsSet;
}
void TvlpStartConfiguration::unsetBlock()
{
    m_BlockIsSet = false;
}
std::shared_ptr<TvlpStartSeriesConfiguration> TvlpStartConfiguration::getPacket() const
{
    return m_Packet;
}
void TvlpStartConfiguration::setPacket(std::shared_ptr<TvlpStartSeriesConfiguration> value)
{
    m_Packet = value;
    m_PacketIsSet = true;
}
bool TvlpStartConfiguration::packetIsSet() const
{
    return m_PacketIsSet;
}
void TvlpStartConfiguration::unsetPacket()
{
    m_PacketIsSet = false;
}
std::shared_ptr<TvlpStartSeriesConfiguration> TvlpStartConfiguration::getNetwork() const
{
    return m_Network;
}
void TvlpStartConfiguration::setNetwork(std::shared_ptr<TvlpStartSeriesConfiguration> value)
{
    m_Network = value;
    m_NetworkIsSet = true;
}
bool TvlpStartConfiguration::networkIsSet() const
{
    return m_NetworkIsSet;
}
void TvlpStartConfiguration::unsetNetwork()
{
    m_NetworkIsSet = false;
}

}
}
}

