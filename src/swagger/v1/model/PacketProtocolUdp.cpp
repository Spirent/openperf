/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketProtocolUdp.h"

namespace swagger {
namespace v1 {
namespace model {

PacketProtocolUdp::PacketProtocolUdp()
{
    m_Length = 0;
    m_LengthIsSet = false;
    m_Checksum = 0;
    m_ChecksumIsSet = false;
    
}

PacketProtocolUdp::~PacketProtocolUdp()
{
}

void PacketProtocolUdp::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketProtocolUdp::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["source_port"] = ModelBase::toJson(m_Source_port);
    val["destination_port"] = ModelBase::toJson(m_Destination_port);
    if(m_LengthIsSet)
    {
        val["length"] = m_Length;
    }
    if(m_ChecksumIsSet)
    {
        val["checksum"] = m_Checksum;
    }
    

    return val;
}

void PacketProtocolUdp::fromJson(nlohmann::json& val)
{
    if(val.find("length") != val.end())
    {
        setLength(val.at("length"));
    }
    if(val.find("checksum") != val.end())
    {
        setChecksum(val.at("checksum"));
    }
    
}


std::shared_ptr<TcpIpPort> PacketProtocolUdp::getSourcePort() const
{
    return m_Source_port;
}
void PacketProtocolUdp::setSourcePort(std::shared_ptr<TcpIpPort> value)
{
    m_Source_port = value;
    
}
std::shared_ptr<TcpIpPort> PacketProtocolUdp::getDestinationPort() const
{
    return m_Destination_port;
}
void PacketProtocolUdp::setDestinationPort(std::shared_ptr<TcpIpPort> value)
{
    m_Destination_port = value;
    
}
int32_t PacketProtocolUdp::getLength() const
{
    return m_Length;
}
void PacketProtocolUdp::setLength(int32_t value)
{
    m_Length = value;
    m_LengthIsSet = true;
}
bool PacketProtocolUdp::lengthIsSet() const
{
    return m_LengthIsSet;
}
void PacketProtocolUdp::unsetLength()
{
    m_LengthIsSet = false;
}
int32_t PacketProtocolUdp::getChecksum() const
{
    return m_Checksum;
}
void PacketProtocolUdp::setChecksum(int32_t value)
{
    m_Checksum = value;
    m_ChecksumIsSet = true;
}
bool PacketProtocolUdp::checksumIsSet() const
{
    return m_ChecksumIsSet;
}
void PacketProtocolUdp::unsetChecksum()
{
    m_ChecksumIsSet = false;
}

}
}
}

