/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TrafficProtocolIpv6Modifier.h"

namespace swagger {
namespace v1 {
namespace model {

TrafficProtocolIpv6Modifier::TrafficProtocolIpv6Modifier()
{
    m_Method = "";
    m_ListIsSet = false;
    m_SequenceIsSet = false;
    
}

TrafficProtocolIpv6Modifier::~TrafficProtocolIpv6Modifier()
{
}

void TrafficProtocolIpv6Modifier::validate()
{
    // TODO: implement validation
}

nlohmann::json TrafficProtocolIpv6Modifier::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["method"] = ModelBase::toJson(m_Method);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_List )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["list"] = jsonArray;
        }
    }
    if(m_SequenceIsSet)
    {
        val["sequence"] = ModelBase::toJson(m_Sequence);
    }
    

    return val;
}

void TrafficProtocolIpv6Modifier::fromJson(nlohmann::json& val)
{
    setMethod(val.at("method"));
    {
        m_List.clear();
        nlohmann::json jsonArray;
        if(val.find("list") != val.end())
        {
        for( auto& item : val["list"] )
        {
            
            if(item.is_null())
            {
                m_List.push_back( std::shared_ptr<Ipv6Address>(nullptr) );
            }
            else
            {
                std::shared_ptr<Ipv6Address> newItem(new Ipv6Address());
                newItem->fromJson(item);
                m_List.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("sequence") != val.end())
    {
        if(!val["sequence"].is_null())
        {
            std::shared_ptr<TrafficProtocolIpv6Modifier_sequence> newItem(new TrafficProtocolIpv6Modifier_sequence());
            newItem->fromJson(val["sequence"]);
            setSequence( newItem );
        }
        
    }
    
}


std::string TrafficProtocolIpv6Modifier::getMethod() const
{
    return m_Method;
}
void TrafficProtocolIpv6Modifier::setMethod(std::string value)
{
    m_Method = value;
    
}
std::vector<std::shared_ptr<Ipv6Address>>& TrafficProtocolIpv6Modifier::getList()
{
    return m_List;
}
bool TrafficProtocolIpv6Modifier::listIsSet() const
{
    return m_ListIsSet;
}
void TrafficProtocolIpv6Modifier::unsetList()
{
    m_ListIsSet = false;
}
std::shared_ptr<TrafficProtocolIpv6Modifier_sequence> TrafficProtocolIpv6Modifier::getSequence() const
{
    return m_Sequence;
}
void TrafficProtocolIpv6Modifier::setSequence(std::shared_ptr<TrafficProtocolIpv6Modifier_sequence> value)
{
    m_Sequence = value;
    m_SequenceIsSet = true;
}
bool TrafficProtocolIpv6Modifier::sequenceIsSet() const
{
    return m_SequenceIsSet;
}
void TrafficProtocolIpv6Modifier::unsetSequence()
{
    m_SequenceIsSet = false;
}

}
}
}

