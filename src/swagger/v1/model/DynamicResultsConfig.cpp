/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "DynamicResultsConfig.h"

namespace swagger {
namespace v1 {
namespace model {

DynamicResultsConfig::DynamicResultsConfig()
{
    m_ThresholdsIsSet = false;
    m_TdigestsIsSet = false;
    
}

DynamicResultsConfig::~DynamicResultsConfig()
{
}

void DynamicResultsConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json DynamicResultsConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Thresholds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["thresholds"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Tdigests )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["tdigests"] = jsonArray;
        }
    }
    

    return val;
}

void DynamicResultsConfig::fromJson(nlohmann::json& val)
{
    {
        m_Thresholds.clear();
        nlohmann::json jsonArray;
        if(val.find("thresholds") != val.end())
        {
        for( auto& item : val["thresholds"] )
        {
            
            if(item.is_null())
            {
                m_Thresholds.push_back( std::shared_ptr<ThresholdConfig>(nullptr) );
            }
            else
            {
                std::shared_ptr<ThresholdConfig> newItem(new ThresholdConfig());
                newItem->fromJson(item);
                m_Thresholds.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Tdigests.clear();
        nlohmann::json jsonArray;
        if(val.find("tdigests") != val.end())
        {
        for( auto& item : val["tdigests"] )
        {
            
            if(item.is_null())
            {
                m_Tdigests.push_back( std::shared_ptr<TDigestConfig>(nullptr) );
            }
            else
            {
                std::shared_ptr<TDigestConfig> newItem(new TDigestConfig());
                newItem->fromJson(item);
                m_Tdigests.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::vector<std::shared_ptr<ThresholdConfig>>& DynamicResultsConfig::getThresholds()
{
    return m_Thresholds;
}
bool DynamicResultsConfig::thresholdsIsSet() const
{
    return m_ThresholdsIsSet;
}
void DynamicResultsConfig::unsetThresholds()
{
    m_ThresholdsIsSet = false;
}
std::vector<std::shared_ptr<TDigestConfig>>& DynamicResultsConfig::getTdigests()
{
    return m_Tdigests;
}
bool DynamicResultsConfig::tdigestsIsSet() const
{
    return m_TdigestsIsSet;
}
void DynamicResultsConfig::unsetTdigests()
{
    m_TdigestsIsSet = false;
}

}
}
}

