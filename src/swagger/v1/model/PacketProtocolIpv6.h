/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketProtocolIpv6.h
 *
 * Defines an IPv6 header
 */

#ifndef PacketProtocolIpv6_H_
#define PacketProtocolIpv6_H_


#include "ModelBase.h"

#include "Ipv6Address.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Defines an IPv6 header
/// </summary>
class  PacketProtocolIpv6
    : public ModelBase
{
public:
    PacketProtocolIpv6();
    virtual ~PacketProtocolIpv6();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketProtocolIpv6 members

    /// <summary>
    /// IP header version
    /// </summary>
    int32_t getVersion() const;
    void setVersion(int32_t value);
    bool versionIsSet() const;
    void unsetVersion();
    /// <summary>
    /// IP traffic class field
    /// </summary>
    int32_t getTrafficClass() const;
    void setTrafficClass(int32_t value);
    bool trafficClassIsSet() const;
    void unsetTraffic_class();
    /// <summary>
    /// IP flow label field
    /// </summary>
    int32_t getFlowLabel() const;
    void setFlowLabel(int32_t value);
    bool flowLabelIsSet() const;
    void unsetFlow_label();
    /// <summary>
    /// IP payload length
    /// </summary>
    int32_t getPayloadLength() const;
    void setPayloadLength(int32_t value);
    bool payloadLengthIsSet() const;
    void unsetPayload_length();
    /// <summary>
    /// IP next header field
    /// </summary>
    int32_t getNextHeader() const;
    void setNextHeader(int32_t value);
    bool nextHeaderIsSet() const;
    void unsetNext_header();
    /// <summary>
    /// IP hop limit field
    /// </summary>
    int32_t getHopLimit() const;
    void setHopLimit(int32_t value);
    bool hopLimitIsSet() const;
    void unsetHop_limit();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Address> getSource() const;
    void setSource(std::shared_ptr<Ipv6Address> value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Address> getDestination() const;
    void setDestination(std::shared_ptr<Ipv6Address> value);
    
protected:
    int32_t m_Version;
    bool m_VersionIsSet;
    int32_t m_Traffic_class;
    bool m_Traffic_classIsSet;
    int32_t m_Flow_label;
    bool m_Flow_labelIsSet;
    int32_t m_Payload_length;
    bool m_Payload_lengthIsSet;
    int32_t m_Next_header;
    bool m_Next_headerIsSet;
    int32_t m_Hop_limit;
    bool m_Hop_limitIsSet;
    std::shared_ptr<Ipv6Address> m_Source;
    bool m_SourceIsSet;
    std::shared_ptr<Ipv6Address> m_Destination;

};

}
}
}

#endif /* PacketProtocolIpv6_H_ */
