/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "NetworkGeneratorConfig.h"

namespace swagger {
namespace v1 {
namespace model {

NetworkGeneratorConfig::NetworkGeneratorConfig()
{
    m_TargetIsSet = false;
    m_Connections = 0L;
    m_Ops_per_connection = 0;
    m_Reads_per_sec = 0;
    m_Read_size = 0;
    m_Writes_per_sec = 0;
    m_Write_size = 0;
    m_RatioIsSet = false;
    
}

NetworkGeneratorConfig::~NetworkGeneratorConfig()
{
}

void NetworkGeneratorConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json NetworkGeneratorConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TargetIsSet)
    {
        val["target"] = ModelBase::toJson(m_Target);
    }
    val["connections"] = m_Connections;
    val["ops_per_connection"] = m_Ops_per_connection;
    val["reads_per_sec"] = m_Reads_per_sec;
    val["read_size"] = m_Read_size;
    val["writes_per_sec"] = m_Writes_per_sec;
    val["write_size"] = m_Write_size;
    if(m_RatioIsSet)
    {
        val["ratio"] = ModelBase::toJson(m_Ratio);
    }
    

    return val;
}

void NetworkGeneratorConfig::fromJson(nlohmann::json& val)
{
    if(val.find("target") != val.end())
    {
        if(!val["target"].is_null())
        {
            std::shared_ptr<NetworkGeneratorConfig_target> newItem(new NetworkGeneratorConfig_target());
            newItem->fromJson(val["target"]);
            setTarget( newItem );
        }
        
    }
    setConnections(val.at("connections"));
    setOpsPerConnection(val.at("ops_per_connection"));
    setReadsPerSec(val.at("reads_per_sec"));
    setReadSize(val.at("read_size"));
    setWritesPerSec(val.at("writes_per_sec"));
    setWriteSize(val.at("write_size"));
    if(val.find("ratio") != val.end())
    {
        if(!val["ratio"].is_null())
        {
            std::shared_ptr<NetworkGeneratorReadWriteRatio> newItem(new NetworkGeneratorReadWriteRatio());
            newItem->fromJson(val["ratio"]);
            setRatio( newItem );
        }
        
    }
    
}


std::shared_ptr<NetworkGeneratorConfig_target> NetworkGeneratorConfig::getTarget() const
{
    return m_Target;
}
void NetworkGeneratorConfig::setTarget(std::shared_ptr<NetworkGeneratorConfig_target> value)
{
    m_Target = value;
    m_TargetIsSet = true;
}
bool NetworkGeneratorConfig::targetIsSet() const
{
    return m_TargetIsSet;
}
void NetworkGeneratorConfig::unsetTarget()
{
    m_TargetIsSet = false;
}
int64_t NetworkGeneratorConfig::getConnections() const
{
    return m_Connections;
}
void NetworkGeneratorConfig::setConnections(int64_t value)
{
    m_Connections = value;
    
}
int32_t NetworkGeneratorConfig::getOpsPerConnection() const
{
    return m_Ops_per_connection;
}
void NetworkGeneratorConfig::setOpsPerConnection(int32_t value)
{
    m_Ops_per_connection = value;
    
}
int32_t NetworkGeneratorConfig::getReadsPerSec() const
{
    return m_Reads_per_sec;
}
void NetworkGeneratorConfig::setReadsPerSec(int32_t value)
{
    m_Reads_per_sec = value;
    
}
int32_t NetworkGeneratorConfig::getReadSize() const
{
    return m_Read_size;
}
void NetworkGeneratorConfig::setReadSize(int32_t value)
{
    m_Read_size = value;
    
}
int32_t NetworkGeneratorConfig::getWritesPerSec() const
{
    return m_Writes_per_sec;
}
void NetworkGeneratorConfig::setWritesPerSec(int32_t value)
{
    m_Writes_per_sec = value;
    
}
int32_t NetworkGeneratorConfig::getWriteSize() const
{
    return m_Write_size;
}
void NetworkGeneratorConfig::setWriteSize(int32_t value)
{
    m_Write_size = value;
    
}
std::shared_ptr<NetworkGeneratorReadWriteRatio> NetworkGeneratorConfig::getRatio() const
{
    return m_Ratio;
}
void NetworkGeneratorConfig::setRatio(std::shared_ptr<NetworkGeneratorReadWriteRatio> value)
{
    m_Ratio = value;
    m_RatioIsSet = true;
}
bool NetworkGeneratorConfig::ratioIsSet() const
{
    return m_RatioIsSet;
}
void NetworkGeneratorConfig::unsetRatio()
{
    m_RatioIsSet = false;
}

}
}
}

