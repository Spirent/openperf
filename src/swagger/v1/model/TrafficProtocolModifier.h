/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TrafficProtocolModifier.h
 *
 * Specifies how to modify protocol data
 */

#ifndef TrafficProtocolModifier_H_
#define TrafficProtocolModifier_H_


#include "ModelBase.h"

#include "TrafficProtocolIpv4Modifier.h"
#include "TrafficProtocolMacModifier.h"
#include <string>
#include "TrafficProtocolFieldModifier.h"
#include "TrafficProtocolIpv6Modifier.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Specifies how to modify protocol data
/// </summary>
class  TrafficProtocolModifier
    : public ModelBase
{
public:
    TrafficProtocolModifier();
    virtual ~TrafficProtocolModifier();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TrafficProtocolModifier members

    /// <summary>
    /// Packet protocol field to modify. Context determines what field names are valid and what data is expected in the modifier. 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
        /// <summary>
    /// Specifies the number of octets into the protocol field to write modifier data. Currently only valid for the custom packet protocol \\\&quot;data\\\&quot; field. 
    /// </summary>
    int32_t getOffset() const;
    void setOffset(int32_t value);
    bool offsetIsSet() const;
    void unsetOffset();
    /// <summary>
    /// Specifies whether to pseudo-randomly order the modifier values 
    /// </summary>
    bool isPermute() const;
    void setPermute(bool value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficProtocolFieldModifier> getField() const;
    void setField(std::shared_ptr<TrafficProtocolFieldModifier> value);
    bool fieldIsSet() const;
    void unsetField();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficProtocolIpv4Modifier> getIpv4() const;
    void setIpv4(std::shared_ptr<TrafficProtocolIpv4Modifier> value);
    bool ipv4IsSet() const;
    void unsetIpv4();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficProtocolIpv6Modifier> getIpv6() const;
    void setIpv6(std::shared_ptr<TrafficProtocolIpv6Modifier> value);
    bool ipv6IsSet() const;
    void unsetIpv6();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficProtocolMacModifier> getMac() const;
    void setMac(std::shared_ptr<TrafficProtocolMacModifier> value);
    bool macIsSet() const;
    void unsetMac();

protected:
    std::string m_Name;

    int32_t m_Offset;
    bool m_OffsetIsSet;
    bool m_Permute;

    std::shared_ptr<TrafficProtocolFieldModifier> m_Field;
    bool m_FieldIsSet;
    std::shared_ptr<TrafficProtocolIpv4Modifier> m_Ipv4;
    bool m_Ipv4IsSet;
    std::shared_ptr<TrafficProtocolIpv6Modifier> m_Ipv6;
    bool m_Ipv6IsSet;
    std::shared_ptr<TrafficProtocolMacModifier> m_Mac;
    bool m_MacIsSet;
};

}
}
}

#endif /* TrafficProtocolModifier_H_ */
