/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketGeneratorFlowCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketGeneratorFlowCounters::PacketGeneratorFlowCounters()
{
    m_Errors = 0L;
    m_Octets_actual = 0L;
    m_Octets_intended = 0L;
    m_Packets_actual = 0L;
    m_Packets_intended = 0L;
    m_Timestamp_first = "";
    m_Timestamp_firstIsSet = false;
    m_Timestamp_last = "";
    m_Timestamp_lastIsSet = false;
    
}

PacketGeneratorFlowCounters::~PacketGeneratorFlowCounters()
{
}

void PacketGeneratorFlowCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketGeneratorFlowCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["errors"] = m_Errors;
    val["octets_actual"] = m_Octets_actual;
    val["octets_intended"] = m_Octets_intended;
    val["packets_actual"] = m_Packets_actual;
    val["packets_intended"] = m_Packets_intended;
    if(m_Timestamp_firstIsSet)
    {
        val["timestamp_first"] = ModelBase::toJson(m_Timestamp_first);
    }
    if(m_Timestamp_lastIsSet)
    {
        val["timestamp_last"] = ModelBase::toJson(m_Timestamp_last);
    }
    

    return val;
}

void PacketGeneratorFlowCounters::fromJson(nlohmann::json& val)
{
    setErrors(val.at("errors"));
    setOctetsActual(val.at("octets_actual"));
    setOctetsIntended(val.at("octets_intended"));
    setPacketsActual(val.at("packets_actual"));
    setPacketsIntended(val.at("packets_intended"));
    if(val.find("timestamp_first") != val.end())
    {
        setTimestampFirst(val.at("timestamp_first"));
        
    }
    if(val.find("timestamp_last") != val.end())
    {
        setTimestampLast(val.at("timestamp_last"));
        
    }
    
}


int64_t PacketGeneratorFlowCounters::getErrors() const
{
    return m_Errors;
}
void PacketGeneratorFlowCounters::setErrors(int64_t value)
{
    m_Errors = value;
    
}
int64_t PacketGeneratorFlowCounters::getOctetsActual() const
{
    return m_Octets_actual;
}
void PacketGeneratorFlowCounters::setOctetsActual(int64_t value)
{
    m_Octets_actual = value;
    
}
int64_t PacketGeneratorFlowCounters::getOctetsIntended() const
{
    return m_Octets_intended;
}
void PacketGeneratorFlowCounters::setOctetsIntended(int64_t value)
{
    m_Octets_intended = value;
    
}
int64_t PacketGeneratorFlowCounters::getPacketsActual() const
{
    return m_Packets_actual;
}
void PacketGeneratorFlowCounters::setPacketsActual(int64_t value)
{
    m_Packets_actual = value;
    
}
int64_t PacketGeneratorFlowCounters::getPacketsIntended() const
{
    return m_Packets_intended;
}
void PacketGeneratorFlowCounters::setPacketsIntended(int64_t value)
{
    m_Packets_intended = value;
    
}
std::string PacketGeneratorFlowCounters::getTimestampFirst() const
{
    return m_Timestamp_first;
}
void PacketGeneratorFlowCounters::setTimestampFirst(std::string value)
{
    m_Timestamp_first = value;
    m_Timestamp_firstIsSet = true;
}
bool PacketGeneratorFlowCounters::timestampFirstIsSet() const
{
    return m_Timestamp_firstIsSet;
}
void PacketGeneratorFlowCounters::unsetTimestamp_first()
{
    m_Timestamp_firstIsSet = false;
}
std::string PacketGeneratorFlowCounters::getTimestampLast() const
{
    return m_Timestamp_last;
}
void PacketGeneratorFlowCounters::setTimestampLast(std::string value)
{
    m_Timestamp_last = value;
    m_Timestamp_lastIsSet = true;
}
bool PacketGeneratorFlowCounters::timestampLastIsSet() const
{
    return m_Timestamp_lastIsSet;
}
void PacketGeneratorFlowCounters::unsetTimestamp_last()
{
    m_Timestamp_lastIsSet = false;
}

}
}
}

