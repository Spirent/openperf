/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "BlockGeneratorConfig.h"

namespace swagger {
namespace v1 {
namespace model {

BlockGeneratorConfig::BlockGeneratorConfig()
{
    m_Queue_depth = 0;
    m_Reads_per_sec = 0;
    m_Read_size = 0;
    m_Writes_per_sec = 0;
    m_Write_size = 0;
    m_RatioIsSet = false;
    m_Pattern = "";
    
}

BlockGeneratorConfig::~BlockGeneratorConfig()
{
}

void BlockGeneratorConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json BlockGeneratorConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["queue_depth"] = m_Queue_depth;
    val["reads_per_sec"] = m_Reads_per_sec;
    val["read_size"] = m_Read_size;
    val["writes_per_sec"] = m_Writes_per_sec;
    val["write_size"] = m_Write_size;
    if(m_RatioIsSet)
    {
        val["ratio"] = ModelBase::toJson(m_Ratio);
    }
    val["pattern"] = ModelBase::toJson(m_Pattern);
    

    return val;
}

void BlockGeneratorConfig::fromJson(nlohmann::json& val)
{
    setQueueDepth(val.at("queue_depth"));
    setReadsPerSec(val.at("reads_per_sec"));
    setReadSize(val.at("read_size"));
    setWritesPerSec(val.at("writes_per_sec"));
    setWriteSize(val.at("write_size"));
    if(val.find("ratio") != val.end())
    {
        if(!val["ratio"].is_null())
        {
            std::shared_ptr<BlockGeneratorReadWriteRatio> newItem(new BlockGeneratorReadWriteRatio());
            newItem->fromJson(val["ratio"]);
            setRatio( newItem );
        }
        
    }
    setPattern(val.at("pattern"));
    
}


int32_t BlockGeneratorConfig::getQueueDepth() const
{
    return m_Queue_depth;
}
void BlockGeneratorConfig::setQueueDepth(int32_t value)
{
    m_Queue_depth = value;
    
}
int32_t BlockGeneratorConfig::getReadsPerSec() const
{
    return m_Reads_per_sec;
}
void BlockGeneratorConfig::setReadsPerSec(int32_t value)
{
    m_Reads_per_sec = value;
    
}
int32_t BlockGeneratorConfig::getReadSize() const
{
    return m_Read_size;
}
void BlockGeneratorConfig::setReadSize(int32_t value)
{
    m_Read_size = value;
    
}
int32_t BlockGeneratorConfig::getWritesPerSec() const
{
    return m_Writes_per_sec;
}
void BlockGeneratorConfig::setWritesPerSec(int32_t value)
{
    m_Writes_per_sec = value;
    
}
int32_t BlockGeneratorConfig::getWriteSize() const
{
    return m_Write_size;
}
void BlockGeneratorConfig::setWriteSize(int32_t value)
{
    m_Write_size = value;
    
}
std::shared_ptr<BlockGeneratorReadWriteRatio> BlockGeneratorConfig::getRatio() const
{
    return m_Ratio;
}
void BlockGeneratorConfig::setRatio(std::shared_ptr<BlockGeneratorReadWriteRatio> value)
{
    m_Ratio = value;
    m_RatioIsSet = true;
}
bool BlockGeneratorConfig::ratioIsSet() const
{
    return m_RatioIsSet;
}
void BlockGeneratorConfig::unsetRatio()
{
    m_RatioIsSet = false;
}
std::string BlockGeneratorConfig::getPattern() const
{
    return m_Pattern;
}
void BlockGeneratorConfig::setPattern(std::string value)
{
    m_Pattern = value;
    
}

}
}
}

