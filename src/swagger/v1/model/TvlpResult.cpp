/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TvlpResult.h"

namespace swagger {
namespace v1 {
namespace model {

TvlpResult::TvlpResult()
{
    m_Id = "";
    m_Tvlp_id = "";
    m_MemoryIsSet = false;
    m_BlockIsSet = false;
    m_CpuIsSet = false;
    m_PacketIsSet = false;
    
}

TvlpResult::~TvlpResult()
{
}

void TvlpResult::validate()
{
    // TODO: implement validation
}

nlohmann::json TvlpResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["tvlp_id"] = ModelBase::toJson(m_Tvlp_id);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Memory )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["memory"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Block )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["block"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Cpu )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["cpu"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Packet )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["packet"] = jsonArray;
        }
    }
    

    return val;
}

void TvlpResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setTvlpId(val.at("tvlp_id"));
    {
        m_Memory.clear();
        nlohmann::json jsonArray;
        if(val.find("memory") != val.end())
        {
        for( auto& item : val["memory"] )
        {
            
            if(item.is_null())
            {
                m_Memory.push_back( std::shared_ptr<MemoryGeneratorResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<MemoryGeneratorResult> newItem(new MemoryGeneratorResult());
                newItem->fromJson(item);
                m_Memory.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Block.clear();
        nlohmann::json jsonArray;
        if(val.find("block") != val.end())
        {
        for( auto& item : val["block"] )
        {
            
            if(item.is_null())
            {
                m_Block.push_back( std::shared_ptr<BlockGeneratorResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<BlockGeneratorResult> newItem(new BlockGeneratorResult());
                newItem->fromJson(item);
                m_Block.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Cpu.clear();
        nlohmann::json jsonArray;
        if(val.find("cpu") != val.end())
        {
        for( auto& item : val["cpu"] )
        {
            
            if(item.is_null())
            {
                m_Cpu.push_back( std::shared_ptr<CpuGeneratorResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<CpuGeneratorResult> newItem(new CpuGeneratorResult());
                newItem->fromJson(item);
                m_Cpu.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Packet.clear();
        nlohmann::json jsonArray;
        if(val.find("packet") != val.end())
        {
        for( auto& item : val["packet"] )
        {
            
            if(item.is_null())
            {
                m_Packet.push_back( std::shared_ptr<PacketGeneratorResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<PacketGeneratorResult> newItem(new PacketGeneratorResult());
                newItem->fromJson(item);
                m_Packet.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::string TvlpResult::getId() const
{
    return m_Id;
}
void TvlpResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string TvlpResult::getTvlpId() const
{
    return m_Tvlp_id;
}
void TvlpResult::setTvlpId(std::string value)
{
    m_Tvlp_id = value;
    
}
std::vector<std::shared_ptr<MemoryGeneratorResult>>& TvlpResult::getMemory()
{
    return m_Memory;
}
bool TvlpResult::memoryIsSet() const
{
    return m_MemoryIsSet;
}
void TvlpResult::unsetMemory()
{
    m_MemoryIsSet = false;
}
std::vector<std::shared_ptr<BlockGeneratorResult>>& TvlpResult::getBlock()
{
    return m_Block;
}
bool TvlpResult::blockIsSet() const
{
    return m_BlockIsSet;
}
void TvlpResult::unsetBlock()
{
    m_BlockIsSet = false;
}
std::vector<std::shared_ptr<CpuGeneratorResult>>& TvlpResult::getCpu()
{
    return m_Cpu;
}
bool TvlpResult::cpuIsSet() const
{
    return m_CpuIsSet;
}
void TvlpResult::unsetCpu()
{
    m_CpuIsSet = false;
}
std::vector<std::shared_ptr<PacketGeneratorResult>>& TvlpResult::getPacket()
{
    return m_Packet;
}
bool TvlpResult::packetIsSet() const
{
    return m_PacketIsSet;
}
void TvlpResult::unsetPacket()
{
    m_PacketIsSet = false;
}

}
}
}

