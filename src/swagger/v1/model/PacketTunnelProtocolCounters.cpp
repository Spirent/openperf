/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketTunnelProtocolCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketTunnelProtocolCounters::PacketTunnelProtocolCounters()
{
    m_Ip = 0L;
    m_Gre = 0L;
    m_Vxlan = 0L;
    m_Nvgre = 0L;
    m_Geneve = 0L;
    m_Grenat = 0L;
    m_Gtpc = 0L;
    m_Gtpu = 0L;
    m_Esp = 0L;
    m_L2tp = 0L;
    m_Vxlan_gpe = 0L;
    m_Mpls_in_gre = 0L;
    m_Mpls_in_udp = 0L;
    
}

PacketTunnelProtocolCounters::~PacketTunnelProtocolCounters()
{
}

void PacketTunnelProtocolCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketTunnelProtocolCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["ip"] = m_Ip;
    val["gre"] = m_Gre;
    val["vxlan"] = m_Vxlan;
    val["nvgre"] = m_Nvgre;
    val["geneve"] = m_Geneve;
    val["grenat"] = m_Grenat;
    val["gtpc"] = m_Gtpc;
    val["gtpu"] = m_Gtpu;
    val["esp"] = m_Esp;
    val["l2tp"] = m_L2tp;
    val["vxlan_gpe"] = m_Vxlan_gpe;
    val["mpls_in_gre"] = m_Mpls_in_gre;
    val["mpls_in_udp"] = m_Mpls_in_udp;
    

    return val;
}

void PacketTunnelProtocolCounters::fromJson(nlohmann::json& val)
{
    setIp(val.at("ip"));
    setGre(val.at("gre"));
    setVxlan(val.at("vxlan"));
    setNvgre(val.at("nvgre"));
    setGeneve(val.at("geneve"));
    setGrenat(val.at("grenat"));
    setGtpc(val.at("gtpc"));
    setGtpu(val.at("gtpu"));
    setEsp(val.at("esp"));
    setL2tp(val.at("l2tp"));
    setVxlanGpe(val.at("vxlan_gpe"));
    setMplsInGre(val.at("mpls_in_gre"));
    setMplsInUdp(val.at("mpls_in_udp"));
    
}


int64_t PacketTunnelProtocolCounters::getIp() const
{
    return m_Ip;
}
void PacketTunnelProtocolCounters::setIp(int64_t value)
{
    m_Ip = value;
    
}
int64_t PacketTunnelProtocolCounters::getGre() const
{
    return m_Gre;
}
void PacketTunnelProtocolCounters::setGre(int64_t value)
{
    m_Gre = value;
    
}
int64_t PacketTunnelProtocolCounters::getVxlan() const
{
    return m_Vxlan;
}
void PacketTunnelProtocolCounters::setVxlan(int64_t value)
{
    m_Vxlan = value;
    
}
int64_t PacketTunnelProtocolCounters::getNvgre() const
{
    return m_Nvgre;
}
void PacketTunnelProtocolCounters::setNvgre(int64_t value)
{
    m_Nvgre = value;
    
}
int64_t PacketTunnelProtocolCounters::getGeneve() const
{
    return m_Geneve;
}
void PacketTunnelProtocolCounters::setGeneve(int64_t value)
{
    m_Geneve = value;
    
}
int64_t PacketTunnelProtocolCounters::getGrenat() const
{
    return m_Grenat;
}
void PacketTunnelProtocolCounters::setGrenat(int64_t value)
{
    m_Grenat = value;
    
}
int64_t PacketTunnelProtocolCounters::getGtpc() const
{
    return m_Gtpc;
}
void PacketTunnelProtocolCounters::setGtpc(int64_t value)
{
    m_Gtpc = value;
    
}
int64_t PacketTunnelProtocolCounters::getGtpu() const
{
    return m_Gtpu;
}
void PacketTunnelProtocolCounters::setGtpu(int64_t value)
{
    m_Gtpu = value;
    
}
int64_t PacketTunnelProtocolCounters::getEsp() const
{
    return m_Esp;
}
void PacketTunnelProtocolCounters::setEsp(int64_t value)
{
    m_Esp = value;
    
}
int64_t PacketTunnelProtocolCounters::getL2tp() const
{
    return m_L2tp;
}
void PacketTunnelProtocolCounters::setL2tp(int64_t value)
{
    m_L2tp = value;
    
}
int64_t PacketTunnelProtocolCounters::getVxlanGpe() const
{
    return m_Vxlan_gpe;
}
void PacketTunnelProtocolCounters::setVxlanGpe(int64_t value)
{
    m_Vxlan_gpe = value;
    
}
int64_t PacketTunnelProtocolCounters::getMplsInGre() const
{
    return m_Mpls_in_gre;
}
void PacketTunnelProtocolCounters::setMplsInGre(int64_t value)
{
    m_Mpls_in_gre = value;
    
}
int64_t PacketTunnelProtocolCounters::getMplsInUdp() const
{
    return m_Mpls_in_udp;
}
void PacketTunnelProtocolCounters::setMplsInUdp(int64_t value)
{
    m_Mpls_in_udp = value;
    
}

}
}
}

