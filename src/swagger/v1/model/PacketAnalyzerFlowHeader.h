/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketAnalyzerFlowHeader.h
 *
 * A decoded protocol header
 */

#ifndef PacketAnalyzerFlowHeader_H_
#define PacketAnalyzerFlowHeader_H_


#include "ModelBase.h"

#include "PacketProtocolIpv4.h"
#include "PacketProtocolMpls.h"
#include "PacketProtocolVlan.h"
#include "PacketProtocolEthernet.h"
#include "PacketProtocolUdp.h"
#include "PacketProtocolIpv6.h"
#include <string>
#include "PacketProtocolTcp.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// A decoded protocol header
/// </summary>
class  PacketAnalyzerFlowHeader
    : public ModelBase
{
public:
    PacketAnalyzerFlowHeader();
    virtual ~PacketAnalyzerFlowHeader();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketAnalyzerFlowHeader members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolEthernet> getEthernet() const;
    void setEthernet(std::shared_ptr<PacketProtocolEthernet> value);
    bool ethernetIsSet() const;
    void unsetEthernet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolIpv4> getIpv4() const;
    void setIpv4(std::shared_ptr<PacketProtocolIpv4> value);
    bool ipv4IsSet() const;
    void unsetIpv4();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolIpv6> getIpv6() const;
    void setIpv6(std::shared_ptr<PacketProtocolIpv6> value);
    bool ipv6IsSet() const;
    void unsetIpv6();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolMpls> getMpls() const;
    void setMpls(std::shared_ptr<PacketProtocolMpls> value);
    bool mplsIsSet() const;
    void unsetMpls();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolTcp> getTcp() const;
    void setTcp(std::shared_ptr<PacketProtocolTcp> value);
    bool tcpIsSet() const;
    void unsetTcp();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolUdp> getUdp() const;
    void setUdp(std::shared_ptr<PacketProtocolUdp> value);
    bool udpIsSet() const;
    void unsetUdp();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketProtocolVlan> getVlan() const;
    void setVlan(std::shared_ptr<PacketProtocolVlan> value);
    bool vlanIsSet() const;
    void unsetVlan();
    /// <summary>
    /// Base64 encoded header
    /// </summary>
    std::string getUnknown() const;
    void setUnknown(std::string value);
    bool unknownIsSet() const;
    void unsetUnknown();

protected:
    std::shared_ptr<PacketProtocolEthernet> m_Ethernet;
    bool m_EthernetIsSet;
    std::shared_ptr<PacketProtocolIpv4> m_Ipv4;
    bool m_Ipv4IsSet;
    std::shared_ptr<PacketProtocolIpv6> m_Ipv6;
    bool m_Ipv6IsSet;
    std::shared_ptr<PacketProtocolMpls> m_Mpls;
    bool m_MplsIsSet;
    std::shared_ptr<PacketProtocolTcp> m_Tcp;
    bool m_TcpIsSet;
    std::shared_ptr<PacketProtocolUdp> m_Udp;
    bool m_UdpIsSet;
    std::shared_ptr<PacketProtocolVlan> m_Vlan;
    bool m_VlanIsSet;
    std::string m_Unknown;
    bool m_UnknownIsSet;
};

}
}
}

#endif /* PacketAnalyzerFlowHeader_H_ */
