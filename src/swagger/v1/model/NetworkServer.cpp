/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "NetworkServer.h"

namespace swagger {
namespace v1 {
namespace model {

NetworkServer::NetworkServer()
{
    m_Id = "";
    m_Port = 0;
    m_Protocol = "";
    m_Interface = "";
    m_InterfaceIsSet = false;
    
}

NetworkServer::~NetworkServer()
{
}

void NetworkServer::validate()
{
    // TODO: implement validation
}

nlohmann::json NetworkServer::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["port"] = m_Port;
    val["protocol"] = ModelBase::toJson(m_Protocol);
    if(m_InterfaceIsSet)
    {
        val["interface"] = ModelBase::toJson(m_Interface);
    }
    val["stats"] = ModelBase::toJson(m_Stats);
    

    return val;
}

void NetworkServer::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setPort(val.at("port"));
    setProtocol(val.at("protocol"));
    if(val.find("interface") != val.end())
    {
        setInterface(val.at("interface"));
        
    }
    
}


std::string NetworkServer::getId() const
{
    return m_Id;
}
void NetworkServer::setId(std::string value)
{
    m_Id = value;
    
}
int32_t NetworkServer::getPort() const
{
    return m_Port;
}
void NetworkServer::setPort(int32_t value)
{
    m_Port = value;
    
}
std::string NetworkServer::getProtocol() const
{
    return m_Protocol;
}
void NetworkServer::setProtocol(std::string value)
{
    m_Protocol = value;
    
}
std::string NetworkServer::getInterface() const
{
    return m_Interface;
}
void NetworkServer::setInterface(std::string value)
{
    m_Interface = value;
    m_InterfaceIsSet = true;
}
bool NetworkServer::interfaceIsSet() const
{
    return m_InterfaceIsSet;
}
void NetworkServer::unsetInterface()
{
    m_InterfaceIsSet = false;
}
std::shared_ptr<NetworkServerStats> NetworkServer::getStats() const
{
    return m_Stats;
}
void NetworkServer::setStats(std::shared_ptr<NetworkServerStats> value)
{
    m_Stats = value;
    
}

}
}
}

