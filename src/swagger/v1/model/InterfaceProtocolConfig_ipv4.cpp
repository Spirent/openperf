/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "InterfaceProtocolConfig_ipv4.h"

namespace swagger {
namespace v1 {
namespace model {

InterfaceProtocolConfig_ipv4::InterfaceProtocolConfig_ipv4()
{
    m_Method = "";
    m_StaticIsSet = false;
    m_DhcpIsSet = false;
    
}

InterfaceProtocolConfig_ipv4::~InterfaceProtocolConfig_ipv4()
{
}

void InterfaceProtocolConfig_ipv4::validate()
{
    // TODO: implement validation
}

nlohmann::json InterfaceProtocolConfig_ipv4::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["method"] = ModelBase::toJson(m_Method);
    if(m_StaticIsSet)
    {
        val["static"] = ModelBase::toJson(m_Static);
    }
    if(m_DhcpIsSet)
    {
        val["dhcp"] = ModelBase::toJson(m_Dhcp);
    }
    

    return val;
}

void InterfaceProtocolConfig_ipv4::fromJson(nlohmann::json& val)
{
    setMethod(val.at("method"));
    if(val.find("static") != val.end())
    {
        if(!val["static"].is_null())
        {
            std::shared_ptr<InterfaceProtocolConfig_ipv4_static> newItem(new InterfaceProtocolConfig_ipv4_static());
            newItem->fromJson(val["static"]);
            setStatic( newItem );
        }
        
    }
    if(val.find("dhcp") != val.end())
    {
        if(!val["dhcp"].is_null())
        {
            std::shared_ptr<InterfaceProtocolConfig_ipv4_dhcp> newItem(new InterfaceProtocolConfig_ipv4_dhcp());
            newItem->fromJson(val["dhcp"]);
            setDhcp( newItem );
        }
        
    }
    
}


std::string InterfaceProtocolConfig_ipv4::getMethod() const
{
    return m_Method;
}
void InterfaceProtocolConfig_ipv4::setMethod(std::string value)
{
    m_Method = value;
    
}
std::shared_ptr<InterfaceProtocolConfig_ipv4_static> InterfaceProtocolConfig_ipv4::getStatic() const
{
    return m_Static;
}
void InterfaceProtocolConfig_ipv4::setStatic(std::shared_ptr<InterfaceProtocolConfig_ipv4_static> value)
{
    m_Static = value;
    m_StaticIsSet = true;
}
bool InterfaceProtocolConfig_ipv4::staticIsSet() const
{
    return m_StaticIsSet;
}
void InterfaceProtocolConfig_ipv4::unsetStatic()
{
    m_StaticIsSet = false;
}
std::shared_ptr<InterfaceProtocolConfig_ipv4_dhcp> InterfaceProtocolConfig_ipv4::getDhcp() const
{
    return m_Dhcp;
}
void InterfaceProtocolConfig_ipv4::setDhcp(std::shared_ptr<InterfaceProtocolConfig_ipv4_dhcp> value)
{
    m_Dhcp = value;
    m_DhcpIsSet = true;
}
bool InterfaceProtocolConfig_ipv4::dhcpIsSet() const
{
    return m_DhcpIsSet;
}
void InterfaceProtocolConfig_ipv4::unsetDhcp()
{
    m_DhcpIsSet = false;
}

}
}
}

