/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketProtocolTcp.h
 *
 * Defines a TCP header
 */

#ifndef PacketProtocolTcp_H_
#define PacketProtocolTcp_H_


#include "ModelBase.h"

#include <string>
#include <vector>
#include "TcpIpPort.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Defines a TCP header
/// </summary>
class  PacketProtocolTcp
    : public ModelBase
{
public:
    PacketProtocolTcp();
    virtual ~PacketProtocolTcp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketProtocolTcp members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TcpIpPort> getSourcePort() const;
    void setSourcePort(std::shared_ptr<TcpIpPort> value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TcpIpPort> getDestinationPort() const;
    void setDestinationPort(std::shared_ptr<TcpIpPort> value);
        /// <summary>
    /// sequence number field
    /// </summary>
    int64_t getSequenceNumber() const;
    void setSequenceNumber(int64_t value);
    bool sequenceNumberIsSet() const;
    void unsetSequence_number();
    /// <summary>
    /// ACK number field
    /// </summary>
    int64_t getAckNumber() const;
    void setAckNumber(int64_t value);
    bool ackNumberIsSet() const;
    void unsetAck_number();
    /// <summary>
    /// offset to data from the start of the TCP header
    /// </summary>
    int32_t getDataOffset() const;
    void setDataOffset(int32_t value);
    bool dataOffsetIsSet() const;
    void unsetData_offset();
    /// <summary>
    /// TCP header flags
    /// </summary>
    std::vector<std::string>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();
    /// <summary>
    /// sequence window field
    /// </summary>
    int32_t getWindow() const;
    void setWindow(int32_t value);
    bool windowIsSet() const;
    void unsetWindow();
    /// <summary>
    /// checksum field
    /// </summary>
    int32_t getChecksum() const;
    void setChecksum(int32_t value);
    bool checksumIsSet() const;
    void unsetChecksum();
    /// <summary>
    /// urgent pointer field
    /// </summary>
    int32_t getUrgentPointer() const;
    void setUrgentPointer(int32_t value);
    bool urgentPointerIsSet() const;
    void unsetUrgent_pointer();

protected:
    std::shared_ptr<TcpIpPort> m_Source_port;

    std::shared_ptr<TcpIpPort> m_Destination_port;

    int64_t m_Sequence_number;
    bool m_Sequence_numberIsSet;
    int64_t m_Ack_number;
    bool m_Ack_numberIsSet;
    int32_t m_Data_offset;
    bool m_Data_offsetIsSet;
    std::vector<std::string> m_Flags;
    bool m_FlagsIsSet;
    int32_t m_Window;
    bool m_WindowIsSet;
    int32_t m_Checksum;
    bool m_ChecksumIsSet;
    int32_t m_Urgent_pointer;
    bool m_Urgent_pointerIsSet;
};

}
}
}

#endif /* PacketProtocolTcp_H_ */
