/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketProtocolTcp.h
 *
 * Describes a tcp header
 */

#ifndef PacketProtocolTcp_H_
#define PacketProtocolTcp_H_


#include "ModelBase.h"

#include <string>
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Describes a tcp header
/// </summary>
class  PacketProtocolTcp
    : public ModelBase
{
public:
    PacketProtocolTcp();
    virtual ~PacketProtocolTcp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketProtocolTcp members

    /// <summary>
    /// tcp ack
    /// </summary>
    int64_t getAck() const;
    void setAck(int64_t value);
    bool ackIsSet() const;
    void unsetAck();
    /// <summary>
    /// tcp checksum
    /// </summary>
    int32_t getChecksum() const;
    void setChecksum(int32_t value);
    bool checksumIsSet() const;
    void unsetChecksum();
    /// <summary>
    /// tcp data offset
    /// </summary>
    int32_t getDataOffset() const;
    void setDataOffset(int32_t value);
    bool dataOffsetIsSet() const;
    void unsetData_offset();
    /// <summary>
    /// tcp destination
    /// </summary>
    int32_t getDestination() const;
    void setDestination(int32_t value);
    bool destinationIsSet() const;
    void unsetDestination();
    /// <summary>
    /// tcp flags
    /// </summary>
    std::vector<std::string>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();
    /// <summary>
    /// tcp reserved
    /// </summary>
    int32_t getReserved() const;
    void setReserved(int32_t value);
    bool reservedIsSet() const;
    void unsetReserved();
    /// <summary>
    /// tcp sequence
    /// </summary>
    int64_t getSequence() const;
    void setSequence(int64_t value);
    bool sequenceIsSet() const;
    void unsetSequence();
    /// <summary>
    /// tcp source
    /// </summary>
    int32_t getSource() const;
    void setSource(int32_t value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// tcp urgent pointer
    /// </summary>
    int32_t getUrgentPointer() const;
    void setUrgentPointer(int32_t value);
    bool urgentPointerIsSet() const;
    void unsetUrgent_pointer();
    /// <summary>
    /// tcp window
    /// </summary>
    int32_t getWindow() const;
    void setWindow(int32_t value);
    bool windowIsSet() const;
    void unsetWindow();

protected:
    int64_t m_Ack;
    bool m_AckIsSet;
    int32_t m_Checksum;
    bool m_ChecksumIsSet;
    int32_t m_Data_offset;
    bool m_Data_offsetIsSet;
    int32_t m_Destination;
    bool m_DestinationIsSet;
    std::vector<std::string> m_Flags;
    bool m_FlagsIsSet;
    int32_t m_Reserved;
    bool m_ReservedIsSet;
    int64_t m_Sequence;
    bool m_SequenceIsSet;
    int32_t m_Source;
    bool m_SourceIsSet;
    int32_t m_Urgent_pointer;
    bool m_Urgent_pointerIsSet;
    int32_t m_Window;
    bool m_WindowIsSet;
};

}
}
}

#endif /* PacketProtocolTcp_H_ */
