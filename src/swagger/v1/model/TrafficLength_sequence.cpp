/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TrafficLength_sequence.h"

namespace swagger {
namespace v1 {
namespace model {

TrafficLength_sequence::TrafficLength_sequence()
{
    m_Count = 0;
    m_Start = 0;
    m_Stop = 0;
    m_StopIsSet = false;
    m_SkipIsSet = false;
    
}

TrafficLength_sequence::~TrafficLength_sequence()
{
}

void TrafficLength_sequence::validate()
{
    // TODO: implement validation
}

nlohmann::json TrafficLength_sequence::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["count"] = m_Count;
    val["start"] = m_Start;
    if(m_StopIsSet)
    {
        val["stop"] = m_Stop;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Skip )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["skip"] = jsonArray;
        }
    }
    

    return val;
}

void TrafficLength_sequence::fromJson(nlohmann::json& val)
{
    setCount(val.at("count"));
    setStart(val.at("start"));
    if(val.find("stop") != val.end())
    {
        setStop(val.at("stop"));
    }
    {
        m_Skip.clear();
        nlohmann::json jsonArray;
        if(val.find("skip") != val.end())
        {
        for( auto& item : val["skip"] )
        {
            m_Skip.push_back(item);
            
        }
        }
    }
    
}


int32_t TrafficLength_sequence::getCount() const
{
    return m_Count;
}
void TrafficLength_sequence::setCount(int32_t value)
{
    m_Count = value;
    
}
int32_t TrafficLength_sequence::getStart() const
{
    return m_Start;
}
void TrafficLength_sequence::setStart(int32_t value)
{
    m_Start = value;
    
}
int32_t TrafficLength_sequence::getStop() const
{
    return m_Stop;
}
void TrafficLength_sequence::setStop(int32_t value)
{
    m_Stop = value;
    m_StopIsSet = true;
}
bool TrafficLength_sequence::stopIsSet() const
{
    return m_StopIsSet;
}
void TrafficLength_sequence::unsetStop()
{
    m_StopIsSet = false;
}
std::vector<int32_t>& TrafficLength_sequence::getSkip()
{
    return m_Skip;
}
bool TrafficLength_sequence::skipIsSet() const
{
    return m_SkipIsSet;
}
void TrafficLength_sequence::unsetSkip()
{
    m_SkipIsSet = false;
}

}
}
}

