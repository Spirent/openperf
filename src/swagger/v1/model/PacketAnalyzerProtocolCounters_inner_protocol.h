/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketAnalyzerProtocolCounters_inner_protocol.h
 *
 * Inner layer 4 protocol counters
 */

#ifndef PacketAnalyzerProtocolCounters_inner_protocol_H_
#define PacketAnalyzerProtocolCounters_inner_protocol_H_


#include "ModelBase.h"


namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Inner layer 4 protocol counters
/// </summary>
class  PacketAnalyzerProtocolCounters_inner_protocol
    : public ModelBase
{
public:
    PacketAnalyzerProtocolCounters_inner_protocol();
    virtual ~PacketAnalyzerProtocolCounters_inner_protocol();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketAnalyzerProtocolCounters_inner_protocol members

    /// <summary>
    /// Number of Transmission Control Protocol packets
    /// </summary>
    int64_t getTcp() const;
    void setTcp(int64_t value);
        /// <summary>
    /// Number of User Data Protocol packets
    /// </summary>
    int64_t getUdp() const;
    void setUdp(int64_t value);
        /// <summary>
    /// Number of fragmented packets
    /// </summary>
    int64_t getFragmented() const;
    void setFragmented(int64_t value);
        /// <summary>
    /// Number of Stream Control Transmission Protocol packets
    /// </summary>
    int64_t getSctp() const;
    void setSctp(int64_t value);
        /// <summary>
    /// Number of Internet Control Message Protocol packets
    /// </summary>
    int64_t getIcmp() const;
    void setIcmp(int64_t value);
        /// <summary>
    /// Number of non-fragmented packets
    /// </summary>
    int64_t getNonFragmented() const;
    void setNonFragmented(int64_t value);
    
protected:
    int64_t m_Tcp;

    int64_t m_Udp;

    int64_t m_Fragmented;

    int64_t m_Sctp;

    int64_t m_Icmp;

    int64_t m_Non_fragmented;

};

}
}
}

#endif /* PacketAnalyzerProtocolCounters_inner_protocol_H_ */
