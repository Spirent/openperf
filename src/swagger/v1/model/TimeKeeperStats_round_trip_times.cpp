/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TimeKeeperStats_round_trip_times.h"

namespace swagger {
namespace v1 {
namespace model {

TimeKeeperStats_round_trip_times::TimeKeeperStats_round_trip_times()
{
    m_Avg = 0.0;
    m_AvgIsSet = false;
    m_Max = 0.0;
    m_MaxIsSet = false;
    m_Min = 0.0;
    m_MinIsSet = false;
    m_Size = 0.0;
    
}

TimeKeeperStats_round_trip_times::~TimeKeeperStats_round_trip_times()
{
}

void TimeKeeperStats_round_trip_times::validate()
{
    // TODO: implement validation
}

nlohmann::json TimeKeeperStats_round_trip_times::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AvgIsSet)
    {
        val["avg"] = m_Avg;
    }
    if(m_MaxIsSet)
    {
        val["max"] = m_Max;
    }
    if(m_MinIsSet)
    {
        val["min"] = m_Min;
    }
    val["size"] = m_Size;
    

    return val;
}

void TimeKeeperStats_round_trip_times::fromJson(nlohmann::json& val)
{
    if(val.find("avg") != val.end())
    {
        setAvg(val.at("avg"));
    }
    if(val.find("max") != val.end())
    {
        setMax(val.at("max"));
    }
    if(val.find("min") != val.end())
    {
        setMin(val.at("min"));
    }
    setSize(val.at("size"));
    
}


double TimeKeeperStats_round_trip_times::getAvg() const
{
    return m_Avg;
}
void TimeKeeperStats_round_trip_times::setAvg(double value)
{
    m_Avg = value;
    m_AvgIsSet = true;
}
bool TimeKeeperStats_round_trip_times::avgIsSet() const
{
    return m_AvgIsSet;
}
void TimeKeeperStats_round_trip_times::unsetAvg()
{
    m_AvgIsSet = false;
}
double TimeKeeperStats_round_trip_times::getMax() const
{
    return m_Max;
}
void TimeKeeperStats_round_trip_times::setMax(double value)
{
    m_Max = value;
    m_MaxIsSet = true;
}
bool TimeKeeperStats_round_trip_times::maxIsSet() const
{
    return m_MaxIsSet;
}
void TimeKeeperStats_round_trip_times::unsetMax()
{
    m_MaxIsSet = false;
}
double TimeKeeperStats_round_trip_times::getMin() const
{
    return m_Min;
}
void TimeKeeperStats_round_trip_times::setMin(double value)
{
    m_Min = value;
    m_MinIsSet = true;
}
bool TimeKeeperStats_round_trip_times::minIsSet() const
{
    return m_MinIsSet;
}
void TimeKeeperStats_round_trip_times::unsetMin()
{
    m_MinIsSet = false;
}
double TimeKeeperStats_round_trip_times::getSize() const
{
    return m_Size;
}
void TimeKeeperStats_round_trip_times::setSize(double value)
{
    m_Size = value;
    
}

}
}
}

