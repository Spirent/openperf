/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TimeKeeperStats_round_trip_times.h"

namespace swagger {
namespace v1 {
namespace model {

TimeKeeperStats_round_trip_times::TimeKeeperStats_round_trip_times()
{
    m_Maximum = 0.0;
    m_MaximumIsSet = false;
    m_Median = 0.0;
    m_MedianIsSet = false;
    m_Minimum = 0.0;
    m_MinimumIsSet = false;
    
}

TimeKeeperStats_round_trip_times::~TimeKeeperStats_round_trip_times()
{
}

void TimeKeeperStats_round_trip_times::validate()
{
    // TODO: implement validation
}

nlohmann::json TimeKeeperStats_round_trip_times::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_MaximumIsSet)
    {
        val["maximum"] = m_Maximum;
    }
    if(m_MedianIsSet)
    {
        val["median"] = m_Median;
    }
    if(m_MinimumIsSet)
    {
        val["minimum"] = m_Minimum;
    }
    

    return val;
}

void TimeKeeperStats_round_trip_times::fromJson(nlohmann::json& val)
{
    if(val.find("maximum") != val.end())
    {
        setMaximum(val.at("maximum"));
    }
    if(val.find("median") != val.end())
    {
        setMedian(val.at("median"));
    }
    if(val.find("minimum") != val.end())
    {
        setMinimum(val.at("minimum"));
    }
    
}


double TimeKeeperStats_round_trip_times::getMaximum() const
{
    return m_Maximum;
}
void TimeKeeperStats_round_trip_times::setMaximum(double value)
{
    m_Maximum = value;
    m_MaximumIsSet = true;
}
bool TimeKeeperStats_round_trip_times::maximumIsSet() const
{
    return m_MaximumIsSet;
}
void TimeKeeperStats_round_trip_times::unsetMaximum()
{
    m_MaximumIsSet = false;
}
double TimeKeeperStats_round_trip_times::getMedian() const
{
    return m_Median;
}
void TimeKeeperStats_round_trip_times::setMedian(double value)
{
    m_Median = value;
    m_MedianIsSet = true;
}
bool TimeKeeperStats_round_trip_times::medianIsSet() const
{
    return m_MedianIsSet;
}
void TimeKeeperStats_round_trip_times::unsetMedian()
{
    m_MedianIsSet = false;
}
double TimeKeeperStats_round_trip_times::getMinimum() const
{
    return m_Minimum;
}
void TimeKeeperStats_round_trip_times::setMinimum(double value)
{
    m_Minimum = value;
    m_MinimumIsSet = true;
}
bool TimeKeeperStats_round_trip_times::minimumIsSet() const
{
    return m_MinimumIsSet;
}
void TimeKeeperStats_round_trip_times::unsetMinimum()
{
    m_MinimumIsSet = false;
}

}
}
}

