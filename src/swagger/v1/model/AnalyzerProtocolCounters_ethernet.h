/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * AnalyzerProtocolCounters_ethernet.h
 *
 * Layer 2 protocol counters
 */

#ifndef AnalyzerProtocolCounters_ethernet_H_
#define AnalyzerProtocolCounters_ethernet_H_


#include "ModelBase.h"


namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Layer 2 protocol counters
/// </summary>
class  AnalyzerProtocolCounters_ethernet
    : public ModelBase
{
public:
    AnalyzerProtocolCounters_ethernet();
    virtual ~AnalyzerProtocolCounters_ethernet();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AnalyzerProtocolCounters_ethernet members

    /// <summary>
    /// Number of IPv4/IPv6 frames
    /// </summary>
    int64_t getIp() const;
    void setIp(int64_t value);
        /// <summary>
    /// Number of Precision Time Protocol frames
    /// </summary>
    int64_t getTimesync() const;
    void setTimesync(int64_t value);
        /// <summary>
    /// Number of Address Resolution Protocol frames
    /// </summary>
    int64_t getArp() const;
    void setArp(int64_t value);
        /// <summary>
    /// Number of Link Layer Discover Protocol frames
    /// </summary>
    int64_t getLldp() const;
    void setLldp(int64_t value);
        /// <summary>
    /// Number of Network Service Header frames
    /// </summary>
    int64_t getNsh() const;
    void setNsh(int64_t value);
        /// <summary>
    /// Number of Virtual LAN frames
    /// </summary>
    int64_t getVlan() const;
    void setVlan(int64_t value);
        /// <summary>
    /// Number of Queue-in-Queue frames
    /// </summary>
    int64_t getQinq() const;
    void setQinq(int64_t value);
        /// <summary>
    /// Number of PPP over Ethernet frames
    /// </summary>
    int64_t getPppoe() const;
    void setPppoe(int64_t value);
        /// <summary>
    /// Number of Fiber Channel over Ethernet frames
    /// </summary>
    int64_t getFcoe() const;
    void setFcoe(int64_t value);
        /// <summary>
    /// Number of Multi Protocol Label Switched frames
    /// </summary>
    int64_t getMpls() const;
    void setMpls(int64_t value);
    
protected:
    int64_t m_Ip;

    int64_t m_Timesync;

    int64_t m_Arp;

    int64_t m_Lldp;

    int64_t m_Nsh;

    int64_t m_Vlan;

    int64_t m_Qinq;

    int64_t m_Pppoe;

    int64_t m_Fcoe;

    int64_t m_Mpls;

};

}
}
}

#endif /* AnalyzerProtocolCounters_ethernet_H_ */
