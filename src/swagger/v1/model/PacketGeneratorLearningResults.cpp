/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketGeneratorLearningResults.h"

namespace swagger {
namespace v1 {
namespace model {

PacketGeneratorLearningResults::PacketGeneratorLearningResults()
{
    m_Resolved_state = "";
    m_Ipv4IsSet = false;
    
}

PacketGeneratorLearningResults::~PacketGeneratorLearningResults()
{
}

void PacketGeneratorLearningResults::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketGeneratorLearningResults::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["resolved_state"] = ModelBase::toJson(m_Resolved_state);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Ipv4 )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["ipv4"] = jsonArray;
        }
    }
    

    return val;
}

void PacketGeneratorLearningResults::fromJson(nlohmann::json& val)
{
    setResolvedState(val.at("resolved_state"));
    {
        m_Ipv4.clear();
        nlohmann::json jsonArray;
        if(val.find("ipv4") != val.end())
        {
        for( auto& item : val["ipv4"] )
        {
            
            if(item.is_null())
            {
                m_Ipv4.push_back( std::shared_ptr<PacketGeneratorLearningResultIpv4>(nullptr) );
            }
            else
            {
                std::shared_ptr<PacketGeneratorLearningResultIpv4> newItem(new PacketGeneratorLearningResultIpv4());
                newItem->fromJson(item);
                m_Ipv4.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::string PacketGeneratorLearningResults::getResolvedState() const
{
    return m_Resolved_state;
}
void PacketGeneratorLearningResults::setResolvedState(std::string value)
{
    m_Resolved_state = value;
    
}
std::vector<std::shared_ptr<PacketGeneratorLearningResultIpv4>>& PacketGeneratorLearningResults::getIpv4()
{
    return m_Ipv4;
}
bool PacketGeneratorLearningResults::ipv4IsSet() const
{
    return m_Ipv4IsSet;
}
void PacketGeneratorLearningResults::unsetIpv4()
{
    m_Ipv4IsSet = false;
}

}
}
}

