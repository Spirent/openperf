/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * AnalyzerResult.h
 *
 * Results collected by a running packet analyzer
 */

#ifndef AnalyzerResult_H_
#define AnalyzerResult_H_


#include "ModelBase.h"

#include "AnalyzerProtocolCounters.h"
#include <string>
#include "AnalyzerStreamCounters.h"
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Results collected by a running packet analyzer
/// </summary>
class  AnalyzerResult
    : public ModelBase
{
public:
    AnalyzerResult();
    virtual ~AnalyzerResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AnalyzerResult members

    /// <summary>
    /// Unique analyzer result identifier
    /// </summary>
    std::string getId() const;
    void setId(std::string value);
        /// <summary>
    /// Unique analyzer identifier that generated this result
    /// </summary>
    std::string getAnalyzerId() const;
    void setAnalyzerId(std::string value);
    bool analyzerIdIsSet() const;
    void unsetAnalyzer_id();
    /// <summary>
    /// Indicates whether the result is currently receiving updates
    /// </summary>
    bool isActive() const;
    void setActive(bool value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters> getProtocolCounters() const;
    void setProtocolCounters(std::shared_ptr<AnalyzerProtocolCounters> value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerStreamCounters> getStreamCounters() const;
    void setStreamCounters(std::shared_ptr<AnalyzerStreamCounters> value);
        /// <summary>
    /// List of unique stream ids included in stats. Individual stream statistics may be queried via the &#x60;rx-streams&#x60; endpoint. 
    /// </summary>
    std::vector<std::string>& getStreams();
    
protected:
    std::string m_Id;

    std::string m_Analyzer_id;
    bool m_Analyzer_idIsSet;
    bool m_Active;

    std::shared_ptr<AnalyzerProtocolCounters> m_Protocol_counters;

    std::shared_ptr<AnalyzerStreamCounters> m_Stream_counters;

    std::vector<std::string> m_Streams;

};

}
}
}

#endif /* AnalyzerResult_H_ */
