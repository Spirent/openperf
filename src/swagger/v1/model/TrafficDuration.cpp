/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TrafficDuration.h"

namespace swagger {
namespace v1 {
namespace model {

TrafficDuration::TrafficDuration()
{
    m_Continuous = false;
    m_ContinuousIsSet = false;
    m_Frames = 0;
    m_FramesIsSet = false;
    m_TimeIsSet = false;
    
}

TrafficDuration::~TrafficDuration()
{
}

void TrafficDuration::validate()
{
    // TODO: implement validation
}

nlohmann::json TrafficDuration::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ContinuousIsSet)
    {
        val["continuous"] = m_Continuous;
    }
    if(m_FramesIsSet)
    {
        val["frames"] = m_Frames;
    }
    if(m_TimeIsSet)
    {
        val["time"] = ModelBase::toJson(m_Time);
    }
    

    return val;
}

void TrafficDuration::fromJson(nlohmann::json& val)
{
    if(val.find("continuous") != val.end())
    {
        setContinuous(val.at("continuous"));
    }
    if(val.find("frames") != val.end())
    {
        setFrames(val.at("frames"));
    }
    if(val.find("time") != val.end())
    {
        if(!val["time"].is_null())
        {
            std::shared_ptr<TrafficDuration_time> newItem(new TrafficDuration_time());
            newItem->fromJson(val["time"]);
            setTime( newItem );
        }
        
    }
    
}


bool TrafficDuration::isContinuous() const
{
    return m_Continuous;
}
void TrafficDuration::setContinuous(bool value)
{
    m_Continuous = value;
    m_ContinuousIsSet = true;
}
bool TrafficDuration::continuousIsSet() const
{
    return m_ContinuousIsSet;
}
void TrafficDuration::unsetContinuous()
{
    m_ContinuousIsSet = false;
}
int32_t TrafficDuration::getFrames() const
{
    return m_Frames;
}
void TrafficDuration::setFrames(int32_t value)
{
    m_Frames = value;
    m_FramesIsSet = true;
}
bool TrafficDuration::framesIsSet() const
{
    return m_FramesIsSet;
}
void TrafficDuration::unsetFrames()
{
    m_FramesIsSet = false;
}
std::shared_ptr<TrafficDuration_time> TrafficDuration::getTime() const
{
    return m_Time;
}
void TrafficDuration::setTime(std::shared_ptr<TrafficDuration_time> value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool TrafficDuration::timeIsSet() const
{
    return m_TimeIsSet;
}
void TrafficDuration::unsetTime()
{
    m_TimeIsSet = false;
}

}
}
}

