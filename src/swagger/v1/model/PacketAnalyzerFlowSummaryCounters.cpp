/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAnalyzerFlowSummaryCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketAnalyzerFlowSummaryCounters::PacketAnalyzerFlowSummaryCounters()
{
    m_Min = 0L;
    m_MinIsSet = false;
    m_Max = 0L;
    m_MaxIsSet = false;
    m_Total = 0L;
    m_Std_dev = 0L;
    m_Std_devIsSet = false;
    
}

PacketAnalyzerFlowSummaryCounters::~PacketAnalyzerFlowSummaryCounters()
{
}

void PacketAnalyzerFlowSummaryCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketAnalyzerFlowSummaryCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_MinIsSet)
    {
        val["min"] = m_Min;
    }
    if(m_MaxIsSet)
    {
        val["max"] = m_Max;
    }
    val["total"] = m_Total;
    if(m_Std_devIsSet)
    {
        val["std_dev"] = m_Std_dev;
    }
    

    return val;
}

void PacketAnalyzerFlowSummaryCounters::fromJson(nlohmann::json& val)
{
    if(val.find("min") != val.end())
    {
        setMin(val.at("min"));
    }
    if(val.find("max") != val.end())
    {
        setMax(val.at("max"));
    }
    setTotal(val.at("total"));
    if(val.find("std_dev") != val.end())
    {
        setStdDev(val.at("std_dev"));
    }
    
}


int64_t PacketAnalyzerFlowSummaryCounters::getMin() const
{
    return m_Min;
}
void PacketAnalyzerFlowSummaryCounters::setMin(int64_t value)
{
    m_Min = value;
    m_MinIsSet = true;
}
bool PacketAnalyzerFlowSummaryCounters::minIsSet() const
{
    return m_MinIsSet;
}
void PacketAnalyzerFlowSummaryCounters::unsetMin()
{
    m_MinIsSet = false;
}
int64_t PacketAnalyzerFlowSummaryCounters::getMax() const
{
    return m_Max;
}
void PacketAnalyzerFlowSummaryCounters::setMax(int64_t value)
{
    m_Max = value;
    m_MaxIsSet = true;
}
bool PacketAnalyzerFlowSummaryCounters::maxIsSet() const
{
    return m_MaxIsSet;
}
void PacketAnalyzerFlowSummaryCounters::unsetMax()
{
    m_MaxIsSet = false;
}
int64_t PacketAnalyzerFlowSummaryCounters::getTotal() const
{
    return m_Total;
}
void PacketAnalyzerFlowSummaryCounters::setTotal(int64_t value)
{
    m_Total = value;
    
}
int64_t PacketAnalyzerFlowSummaryCounters::getStdDev() const
{
    return m_Std_dev;
}
void PacketAnalyzerFlowSummaryCounters::setStdDev(int64_t value)
{
    m_Std_dev = value;
    m_Std_devIsSet = true;
}
bool PacketAnalyzerFlowSummaryCounters::stdDevIsSet() const
{
    return m_Std_devIsSet;
}
void PacketAnalyzerFlowSummaryCounters::unsetStd_dev()
{
    m_Std_devIsSet = false;
}

}
}
}

