/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TimeKeeperInfo.h
 *
 * TimeKeeper internal state information
 */

#ifndef TimeKeeperInfo_H_
#define TimeKeeperInfo_H_


#include "ModelBase.h"


namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// TimeKeeper internal state information
/// </summary>
class  TimeKeeperInfo
    : public ModelBase
{
public:
    TimeKeeperInfo();
    virtual ~TimeKeeperInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TimeKeeperInfo members

    /// <summary>
    /// The TimeCounter frequency as measured by the interval between the two best timestamp exchanges with the TimeSource over the past two hours, in hz. 
    /// </summary>
    double getFrequency() const;
    void setFrequency(double value);
    bool frequencyIsSet() const;
    void unsetFrequency();
    /// <summary>
    /// The estimated error in the TimeCounter frequency measurement, in hz.
    /// </summary>
    double getFrequencyError() const;
    void setFrequencyError(double value);
    bool frequencyErrorIsSet() const;
    void unsetFrequency_error();
    /// <summary>
    /// The TimeCounter frequency as measured by the interval between the two best timestamp exchanges with the TimeSource over the past hour, in hz. This value is used to help determine TimeCounter drift. 
    /// </summary>
    double getLocalFrequency() const;
    void setLocalFrequency(double value);
    bool localFrequencyIsSet() const;
    void unsetLocal_frequency();
    /// <summary>
    /// The estimated error in the local TimeCounter frequency measurement, in hz.
    /// </summary>
    double getLocalFrequencyError() const;
    void setLocalFrequencyError(double value);
    bool localFrequencyErrorIsSet() const;
    void unsetLocal_frequency_error();
    /// <summary>
    /// The offset applied to TimeCounter derived timestamp values, in seconds.  This value comes from the system host clock. 
    /// </summary>
    double getOffset() const;
    void setOffset(double value);
        /// <summary>
    /// Indicates if the clock is synchronized to the source
    /// </summary>
    bool isSynced() const;
    void setSynced(bool value);
    bool syncedIsSet() const;
    void unsetSynced();
    /// <summary>
    /// The calculated correction to apply to the offset, based on the measured TimeCounter frequency and TimeSource timestamps. 
    /// </summary>
    double getTheta() const;
    void setTheta(double value);
    bool thetaIsSet() const;
    void unsetTheta();

protected:
    double m_Frequency;
    bool m_FrequencyIsSet;
    double m_Frequency_error;
    bool m_Frequency_errorIsSet;
    double m_Local_frequency;
    bool m_Local_frequencyIsSet;
    double m_Local_frequency_error;
    bool m_Local_frequency_errorIsSet;
    double m_Offset;

    bool m_Synced;
    bool m_SyncedIsSet;
    double m_Theta;
    bool m_ThetaIsSet;
};

}
}
}

#endif /* TimeKeeperInfo_H_ */
