/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "BlockGeneratorResult.h"

namespace swagger {
namespace v1 {
namespace model {

BlockGeneratorResult::BlockGeneratorResult()
{
    m_Id = "";
    m_Generator_id = "";
    m_Generator_idIsSet = false;
    m_Active = false;
    m_Timestamp = "";
    
}

BlockGeneratorResult::~BlockGeneratorResult()
{
}

void BlockGeneratorResult::validate()
{
    // TODO: implement validation
}

nlohmann::json BlockGeneratorResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    if(m_Generator_idIsSet)
    {
        val["generator_id"] = ModelBase::toJson(m_Generator_id);
    }
    val["active"] = m_Active;
    val["timestamp"] = ModelBase::toJson(m_Timestamp);
    val["read"] = ModelBase::toJson(m_Read);
    val["write"] = ModelBase::toJson(m_Write);
    

    return val;
}

void BlockGeneratorResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    if(val.find("generator_id") != val.end())
    {
        setGeneratorId(val.at("generator_id"));
        
    }
    setActive(val.at("active"));
    setTimestamp(val.at("timestamp"));
    
}


std::string BlockGeneratorResult::getId() const
{
    return m_Id;
}
void BlockGeneratorResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string BlockGeneratorResult::getGeneratorId() const
{
    return m_Generator_id;
}
void BlockGeneratorResult::setGeneratorId(std::string value)
{
    m_Generator_id = value;
    m_Generator_idIsSet = true;
}
bool BlockGeneratorResult::generatorIdIsSet() const
{
    return m_Generator_idIsSet;
}
void BlockGeneratorResult::unsetGenerator_id()
{
    m_Generator_idIsSet = false;
}
bool BlockGeneratorResult::isActive() const
{
    return m_Active;
}
void BlockGeneratorResult::setActive(bool value)
{
    m_Active = value;
    
}
std::string BlockGeneratorResult::getTimestamp() const
{
    return m_Timestamp;
}
void BlockGeneratorResult::setTimestamp(std::string value)
{
    m_Timestamp = value;
    
}
std::shared_ptr<BlockGeneratorStats> BlockGeneratorResult::getRead() const
{
    return m_Read;
}
void BlockGeneratorResult::setRead(std::shared_ptr<BlockGeneratorStats> value)
{
    m_Read = value;
    
}
std::shared_ptr<BlockGeneratorStats> BlockGeneratorResult::getWrite() const
{
    return m_Write;
}
void BlockGeneratorResult::setWrite(std::shared_ptr<BlockGeneratorStats> value)
{
    m_Write = value;
    
}

}
}
}

