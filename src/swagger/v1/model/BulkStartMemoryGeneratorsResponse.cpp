/**
* Openperf Memory I/O Generation API
* REST API interface to Openperf memory I/O module
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "BulkStartMemoryGeneratorsResponse.h"

namespace swagger {
namespace v1 {
namespace model {

BulkStartMemoryGeneratorsResponse::BulkStartMemoryGeneratorsResponse()
{
    m_SucceededIsSet = false;
    m_FailedIsSet = false;
    
}

BulkStartMemoryGeneratorsResponse::~BulkStartMemoryGeneratorsResponse()
{
}

void BulkStartMemoryGeneratorsResponse::validate()
{
    // TODO: implement validation
}

nlohmann::json BulkStartMemoryGeneratorsResponse::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Succeeded )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["succeeded"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Failed )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["failed"] = jsonArray;
        }
    }
    

    return val;
}

void BulkStartMemoryGeneratorsResponse::fromJson(nlohmann::json& val)
{
    {
        m_Succeeded.clear();
        nlohmann::json jsonArray;
        if(val.find("succeeded") != val.end())
        {
        for( auto& item : val["succeeded"] )
        {
            m_Succeeded.push_back(item);
            
        }
        }
    }
    {
        m_Failed.clear();
        nlohmann::json jsonArray;
        if(val.find("failed") != val.end())
        {
        for( auto& item : val["failed"] )
        {
            
            if(item.is_null())
            {
                m_Failed.push_back( std::shared_ptr<BulkStartMemoryGeneratorsResponse_failed>(nullptr) );
            }
            else
            {
                std::shared_ptr<BulkStartMemoryGeneratorsResponse_failed> newItem(new BulkStartMemoryGeneratorsResponse_failed());
                newItem->fromJson(item);
                m_Failed.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::vector<std::string>& BulkStartMemoryGeneratorsResponse::getSucceeded()
{
    return m_Succeeded;
}
bool BulkStartMemoryGeneratorsResponse::succeededIsSet() const
{
    return m_SucceededIsSet;
}
void BulkStartMemoryGeneratorsResponse::unsetSucceeded()
{
    m_SucceededIsSet = false;
}
std::vector<std::shared_ptr<BulkStartMemoryGeneratorsResponse_failed>>& BulkStartMemoryGeneratorsResponse::getFailed()
{
    return m_Failed;
}
bool BulkStartMemoryGeneratorsResponse::failedIsSet() const
{
    return m_FailedIsSet;
}
void BulkStartMemoryGeneratorsResponse::unsetFailed()
{
    m_FailedIsSet = false;
}

}
}
}

