/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TrafficPacketTemplate.h
 *
 * Defines a set of packets for the packet generator
 */

#ifndef TrafficPacketTemplate_H_
#define TrafficPacketTemplate_H_


#include "ModelBase.h"

#include "TrafficProtocol.h"
#include <string>
#include "TrafficLength.h"
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Defines a set of packets for the packet generator
/// </summary>
class  TrafficPacketTemplate
    : public ModelBase
{
public:
    TrafficPacketTemplate();
    virtual ~TrafficPacketTemplate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TrafficPacketTemplate members

    /// <summary>
    /// Ordered list of packet protocols. Packets are constructed by iterating over the sequence of protocols. 
    /// </summary>
    std::vector<std::shared_ptr<TrafficProtocol>>& getProtocols();
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficLength> getLength() const;
    void setLength(std::shared_ptr<TrafficLength> value);
        /// <summary>
    /// Specifies how modifiers from different protocols are combined in the packet template 
    /// </summary>
    std::string getModifierTie() const;
    void setModifierTie(std::string value);
    bool modifierTieIsSet() const;
    void unsetModifier_tie();

protected:
    std::vector<std::shared_ptr<TrafficProtocol>> m_Protocols;

    std::shared_ptr<TrafficLength> m_Length;

    std::string m_Modifier_tie;
    bool m_Modifier_tieIsSet;
};

}
}
}

#endif /* TrafficPacketTemplate_H_ */
