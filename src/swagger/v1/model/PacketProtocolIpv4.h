/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketProtocolIpv4.h
 *
 * 
 */

#ifndef PacketProtocolIpv4_H_
#define PacketProtocolIpv4_H_


#include "ModelBase.h"

#include <string>
#include "Ipv4Address.h"
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// 
/// </summary>
class  PacketProtocolIpv4
    : public ModelBase
{
public:
    PacketProtocolIpv4();
    virtual ~PacketProtocolIpv4();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketProtocolIpv4 members

    /// <summary>
    /// IP header version
    /// </summary>
    int32_t getVersion() const;
    void setVersion(int32_t value);
    bool versionIsSet() const;
    void unsetVersion();
    /// <summary>
    /// IP header length
    /// </summary>
    int32_t getHeaderLength() const;
    void setHeaderLength(int32_t value);
    bool headerLengthIsSet() const;
    void unsetHeader_length();
    /// <summary>
    /// Type of Service field
    /// </summary>
    int32_t getTos() const;
    void setTos(int32_t value);
    bool tosIsSet() const;
    void unsetTos();
    /// <summary>
    /// IP packet length (include payload)
    /// </summary>
    int32_t getPacketLength() const;
    void setPacketLength(int32_t value);
    bool packetLengthIsSet() const;
    void unsetPacket_length();
    /// <summary>
    /// Identification field
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// IP header flags
    /// </summary>
    std::vector<std::string>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();
    /// <summary>
    /// IP fragment offset
    /// </summary>
    int32_t getFragmentOffset() const;
    void setFragmentOffset(int32_t value);
    bool fragmentOffsetIsSet() const;
    void unsetFragment_offset();
    /// <summary>
    /// Time To Live field
    /// </summary>
    int32_t getTtl() const;
    void setTtl(int32_t value);
    bool ttlIsSet() const;
    void unsetTtl();
    /// <summary>
    /// Protocol field
    /// </summary>
    int32_t getProtocol() const;
    void setProtocol(int32_t value);
    bool protocolIsSet() const;
    void unsetProtocol();
    /// <summary>
    /// IPv4 header checksum
    /// </summary>
    int32_t getChecksum() const;
    void setChecksum(int32_t value);
    bool checksumIsSet() const;
    void unsetChecksum();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv4Address> getSource() const;
    void setSource(std::shared_ptr<Ipv4Address> value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv4Address> getDestination() const;
    void setDestination(std::shared_ptr<Ipv4Address> value);
    
protected:
    int32_t m_Version;
    bool m_VersionIsSet;
    int32_t m_Header_length;
    bool m_Header_lengthIsSet;
    int32_t m_Tos;
    bool m_TosIsSet;
    int32_t m_Packet_length;
    bool m_Packet_lengthIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    std::vector<std::string> m_Flags;
    bool m_FlagsIsSet;
    int32_t m_Fragment_offset;
    bool m_Fragment_offsetIsSet;
    int32_t m_Ttl;
    bool m_TtlIsSet;
    int32_t m_Protocol;
    bool m_ProtocolIsSet;
    int32_t m_Checksum;
    bool m_ChecksumIsSet;
    std::shared_ptr<Ipv4Address> m_Source;
    bool m_SourceIsSet;
    std::shared_ptr<Ipv4Address> m_Destination;

};

}
}
}

#endif /* PacketProtocolIpv4_H_ */
