/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketProtocolIpv4.h
 *
 * Describes an IPv4 header
 */

#ifndef PacketProtocolIpv4_H_
#define PacketProtocolIpv4_H_


#include "ModelBase.h"

#include <string>
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Describes an IPv4 header
/// </summary>
class  PacketProtocolIpv4
    : public ModelBase
{
public:
    PacketProtocolIpv4();
    virtual ~PacketProtocolIpv4();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketProtocolIpv4 members

    /// <summary>
    /// IPv4 checksum
    /// </summary>
    int32_t getChecksum() const;
    void setChecksum(int32_t value);
    bool checksumIsSet() const;
    void unsetChecksum();
    /// <summary>
    /// IPv4 destination address
    /// </summary>
    std::string getDestination() const;
    void setDestination(std::string value);
    bool destinationIsSet() const;
    void unsetDestination();
    /// <summary>
    /// IPv4 dscp
    /// </summary>
    int32_t getDscp() const;
    void setDscp(int32_t value);
    bool dscpIsSet() const;
    void unsetDscp();
    /// <summary>
    /// IPv4 ecn
    /// </summary>
    std::string getEcn() const;
    void setEcn(std::string value);
    bool ecnIsSet() const;
    void unsetEcn();
    /// <summary>
    /// IPv4 flags
    /// </summary>
    std::vector<std::string>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();
    /// <summary>
    /// IPv4 fragment offset
    /// </summary>
    int32_t getFragmentOffset() const;
    void setFragmentOffset(int32_t value);
    bool fragmentOffsetIsSet() const;
    void unsetFragment_offset();
    /// <summary>
    /// IPv4 header length
    /// </summary>
    int32_t getHeaderLength() const;
    void setHeaderLength(int32_t value);
    bool headerLengthIsSet() const;
    void unsetHeader_length();
    /// <summary>
    /// IPv4 identification
    /// </summary>
    int32_t getIdentification() const;
    void setIdentification(int32_t value);
    bool identificationIsSet() const;
    void unsetIdentification();
    /// <summary>
    /// IPv4 protocol
    /// </summary>
    int32_t getProtocol() const;
    void setProtocol(int32_t value);
    bool protocolIsSet() const;
    void unsetProtocol();
    /// <summary>
    /// IPv4 source address
    /// </summary>
    std::string getSource() const;
    void setSource(std::string value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// IPv4 time to live
    /// </summary>
    int32_t getTimeToLive() const;
    void setTimeToLive(int32_t value);
    bool timeToLiveIsSet() const;
    void unsetTime_to_live();
    /// <summary>
    /// IPv4 total length
    /// </summary>
    int32_t getTotalLength() const;
    void setTotalLength(int32_t value);
    bool totalLengthIsSet() const;
    void unsetTotal_length();
    /// <summary>
    /// IPv4 version
    /// </summary>
    int32_t getVersion() const;
    void setVersion(int32_t value);
    bool versionIsSet() const;
    void unsetVersion();

protected:
    int32_t m_Checksum;
    bool m_ChecksumIsSet;
    std::string m_Destination;
    bool m_DestinationIsSet;
    int32_t m_Dscp;
    bool m_DscpIsSet;
    std::string m_Ecn;
    bool m_EcnIsSet;
    std::vector<std::string> m_Flags;
    bool m_FlagsIsSet;
    int32_t m_Fragment_offset;
    bool m_Fragment_offsetIsSet;
    int32_t m_Header_length;
    bool m_Header_lengthIsSet;
    int32_t m_Identification;
    bool m_IdentificationIsSet;
    int32_t m_Protocol;
    bool m_ProtocolIsSet;
    std::string m_Source;
    bool m_SourceIsSet;
    int32_t m_Time_to_live;
    bool m_Time_to_liveIsSet;
    int32_t m_Total_length;
    bool m_Total_lengthIsSet;
    int32_t m_Version;
    bool m_VersionIsSet;
};

}
}
}

#endif /* PacketProtocolIpv4_H_ */
