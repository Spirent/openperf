/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * AnalyzerProtocolCounters.h
 *
 * Result counters for protocols
 */

#ifndef AnalyzerProtocolCounters_H_
#define AnalyzerProtocolCounters_H_


#include "ModelBase.h"

#include "AnalyzerProtocolCounters_ethernet.h"
#include "AnalyzerProtocolCounters_protocol.h"
#include "AnalyzerProtocolCounters_tunnel.h"
#include "AnalyzerProtocolCounters_ip.h"
#include "AnalyzerProtocolCounters_inner_ethernet.h"
#include "AnalyzerProtocolCounters_inner_protocol.h"
#include "AnalyzerProtocolCounters_inner_ip.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Result counters for protocols
/// </summary>
class  AnalyzerProtocolCounters
    : public ModelBase
{
public:
    AnalyzerProtocolCounters();
    virtual ~AnalyzerProtocolCounters();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AnalyzerProtocolCounters members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_ethernet> getEthernet() const;
    void setEthernet(std::shared_ptr<AnalyzerProtocolCounters_ethernet> value);
    bool ethernetIsSet() const;
    void unsetEthernet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_ip> getIp() const;
    void setIp(std::shared_ptr<AnalyzerProtocolCounters_ip> value);
    bool ipIsSet() const;
    void unsetIp();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_protocol> getProtocol() const;
    void setProtocol(std::shared_ptr<AnalyzerProtocolCounters_protocol> value);
    bool protocolIsSet() const;
    void unsetProtocol();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_tunnel> getTunnel() const;
    void setTunnel(std::shared_ptr<AnalyzerProtocolCounters_tunnel> value);
    bool tunnelIsSet() const;
    void unsetTunnel();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_inner_ethernet> getInnerEthernet() const;
    void setInnerEthernet(std::shared_ptr<AnalyzerProtocolCounters_inner_ethernet> value);
    bool innerEthernetIsSet() const;
    void unsetInner_ethernet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_inner_ip> getInnerIp() const;
    void setInnerIp(std::shared_ptr<AnalyzerProtocolCounters_inner_ip> value);
    bool innerIpIsSet() const;
    void unsetInner_ip();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyzerProtocolCounters_inner_protocol> getInnerProtocol() const;
    void setInnerProtocol(std::shared_ptr<AnalyzerProtocolCounters_inner_protocol> value);
    bool innerProtocolIsSet() const;
    void unsetInner_protocol();

protected:
    std::shared_ptr<AnalyzerProtocolCounters_ethernet> m_Ethernet;
    bool m_EthernetIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_ip> m_Ip;
    bool m_IpIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_protocol> m_Protocol;
    bool m_ProtocolIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_tunnel> m_Tunnel;
    bool m_TunnelIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_inner_ethernet> m_Inner_ethernet;
    bool m_Inner_ethernetIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_inner_ip> m_Inner_ip;
    bool m_Inner_ipIsSet;
    std::shared_ptr<AnalyzerProtocolCounters_inner_protocol> m_Inner_protocol;
    bool m_Inner_protocolIsSet;
};

}
}
}

#endif /* AnalyzerProtocolCounters_H_ */
