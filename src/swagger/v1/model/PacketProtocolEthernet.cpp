/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketProtocolEthernet.h"

namespace swagger {
namespace v1 {
namespace model {

PacketProtocolEthernet::PacketProtocolEthernet()
{
    m_SourceIsSet = false;
    m_DestinationIsSet = false;
    m_Ethertype = 0;
    m_EthertypeIsSet = false;
    
}

PacketProtocolEthernet::~PacketProtocolEthernet()
{
}

void PacketProtocolEthernet::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketProtocolEthernet::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SourceIsSet)
    {
        val["source"] = ModelBase::toJson(m_Source);
    }
    if(m_DestinationIsSet)
    {
        val["destination"] = ModelBase::toJson(m_Destination);
    }
    if(m_EthertypeIsSet)
    {
        val["ethertype"] = m_Ethertype;
    }
    

    return val;
}

void PacketProtocolEthernet::fromJson(nlohmann::json& val)
{
    if(val.find("source") != val.end())
    {
        if(!val["source"].is_null())
        {
            std::shared_ptr<MacAddress> newItem(new MacAddress());
            newItem->fromJson(val["source"]);
            setSource( newItem );
        }
        
    }
    if(val.find("destination") != val.end())
    {
        if(!val["destination"].is_null())
        {
            std::shared_ptr<MacAddress> newItem(new MacAddress());
            newItem->fromJson(val["destination"]);
            setDestination( newItem );
        }
        
    }
    if(val.find("ethertype") != val.end())
    {
        setEthertype(val.at("ethertype"));
    }
    
}


std::shared_ptr<MacAddress> PacketProtocolEthernet::getSource() const
{
    return m_Source;
}
void PacketProtocolEthernet::setSource(std::shared_ptr<MacAddress> value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool PacketProtocolEthernet::sourceIsSet() const
{
    return m_SourceIsSet;
}
void PacketProtocolEthernet::unsetSource()
{
    m_SourceIsSet = false;
}
std::shared_ptr<MacAddress> PacketProtocolEthernet::getDestination() const
{
    return m_Destination;
}
void PacketProtocolEthernet::setDestination(std::shared_ptr<MacAddress> value)
{
    m_Destination = value;
    m_DestinationIsSet = true;
}
bool PacketProtocolEthernet::destinationIsSet() const
{
    return m_DestinationIsSet;
}
void PacketProtocolEthernet::unsetDestination()
{
    m_DestinationIsSet = false;
}
int32_t PacketProtocolEthernet::getEthertype() const
{
    return m_Ethertype;
}
void PacketProtocolEthernet::setEthertype(int32_t value)
{
    m_Ethertype = value;
    m_EthertypeIsSet = true;
}
bool PacketProtocolEthernet::ethertypeIsSet() const
{
    return m_EthertypeIsSet;
}
void PacketProtocolEthernet::unsetEthertype()
{
    m_EthertypeIsSet = false;
}

}
}
}

