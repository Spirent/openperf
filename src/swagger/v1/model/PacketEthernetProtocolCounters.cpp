/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketEthernetProtocolCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketEthernetProtocolCounters::PacketEthernetProtocolCounters()
{
    m_Ip = 0L;
    m_Timesync = 0L;
    m_Arp = 0L;
    m_Lldp = 0L;
    m_Nsh = 0L;
    m_Vlan = 0L;
    m_Qinq = 0L;
    m_Pppoe = 0L;
    m_Fcoe = 0L;
    m_Mpls = 0L;
    
}

PacketEthernetProtocolCounters::~PacketEthernetProtocolCounters()
{
}

void PacketEthernetProtocolCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketEthernetProtocolCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["ip"] = m_Ip;
    val["timesync"] = m_Timesync;
    val["arp"] = m_Arp;
    val["lldp"] = m_Lldp;
    val["nsh"] = m_Nsh;
    val["vlan"] = m_Vlan;
    val["qinq"] = m_Qinq;
    val["pppoe"] = m_Pppoe;
    val["fcoe"] = m_Fcoe;
    val["mpls"] = m_Mpls;
    

    return val;
}

void PacketEthernetProtocolCounters::fromJson(nlohmann::json& val)
{
    setIp(val.at("ip"));
    setTimesync(val.at("timesync"));
    setArp(val.at("arp"));
    setLldp(val.at("lldp"));
    setNsh(val.at("nsh"));
    setVlan(val.at("vlan"));
    setQinq(val.at("qinq"));
    setPppoe(val.at("pppoe"));
    setFcoe(val.at("fcoe"));
    setMpls(val.at("mpls"));
    
}


int64_t PacketEthernetProtocolCounters::getIp() const
{
    return m_Ip;
}
void PacketEthernetProtocolCounters::setIp(int64_t value)
{
    m_Ip = value;
    
}
int64_t PacketEthernetProtocolCounters::getTimesync() const
{
    return m_Timesync;
}
void PacketEthernetProtocolCounters::setTimesync(int64_t value)
{
    m_Timesync = value;
    
}
int64_t PacketEthernetProtocolCounters::getArp() const
{
    return m_Arp;
}
void PacketEthernetProtocolCounters::setArp(int64_t value)
{
    m_Arp = value;
    
}
int64_t PacketEthernetProtocolCounters::getLldp() const
{
    return m_Lldp;
}
void PacketEthernetProtocolCounters::setLldp(int64_t value)
{
    m_Lldp = value;
    
}
int64_t PacketEthernetProtocolCounters::getNsh() const
{
    return m_Nsh;
}
void PacketEthernetProtocolCounters::setNsh(int64_t value)
{
    m_Nsh = value;
    
}
int64_t PacketEthernetProtocolCounters::getVlan() const
{
    return m_Vlan;
}
void PacketEthernetProtocolCounters::setVlan(int64_t value)
{
    m_Vlan = value;
    
}
int64_t PacketEthernetProtocolCounters::getQinq() const
{
    return m_Qinq;
}
void PacketEthernetProtocolCounters::setQinq(int64_t value)
{
    m_Qinq = value;
    
}
int64_t PacketEthernetProtocolCounters::getPppoe() const
{
    return m_Pppoe;
}
void PacketEthernetProtocolCounters::setPppoe(int64_t value)
{
    m_Pppoe = value;
    
}
int64_t PacketEthernetProtocolCounters::getFcoe() const
{
    return m_Fcoe;
}
void PacketEthernetProtocolCounters::setFcoe(int64_t value)
{
    m_Fcoe = value;
    
}
int64_t PacketEthernetProtocolCounters::getMpls() const
{
    return m_Mpls;
}
void PacketEthernetProtocolCounters::setMpls(int64_t value)
{
    m_Mpls = value;
    
}

}
}
}

