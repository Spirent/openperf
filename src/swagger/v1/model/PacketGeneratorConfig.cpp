/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketGeneratorConfig.h"

namespace swagger {
namespace v1 {
namespace model {

PacketGeneratorConfig::PacketGeneratorConfig()
{
    m_Flow_count = 0L;
    m_Flow_countIsSet = false;
    m_Order = "";
    m_OrderIsSet = false;
    
}

PacketGeneratorConfig::~PacketGeneratorConfig()
{
}

void PacketGeneratorConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketGeneratorConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["duration"] = ModelBase::toJson(m_Duration);
    if(m_Flow_countIsSet)
    {
        val["flow_count"] = m_Flow_count;
    }
    val["load"] = ModelBase::toJson(m_Load);
    if(m_OrderIsSet)
    {
        val["order"] = ModelBase::toJson(m_Order);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Traffic )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["traffic"] = jsonArray;
            }
    

    return val;
}

void PacketGeneratorConfig::fromJson(nlohmann::json& val)
{
    if(val.find("flow_count") != val.end())
    {
        setFlowCount(val.at("flow_count"));
    }
    if(val.find("order") != val.end())
    {
        setOrder(val.at("order"));
        
    }
    {
        m_Traffic.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["traffic"] )
        {
            
            if(item.is_null())
            {
                m_Traffic.push_back( std::shared_ptr<TrafficDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<TrafficDefinition> newItem(new TrafficDefinition());
                newItem->fromJson(item);
                m_Traffic.push_back( newItem );
            }
            
        }
    }
    
}


std::shared_ptr<TrafficDuration> PacketGeneratorConfig::getDuration() const
{
    return m_Duration;
}
void PacketGeneratorConfig::setDuration(std::shared_ptr<TrafficDuration> value)
{
    m_Duration = value;
    
}
int64_t PacketGeneratorConfig::getFlowCount() const
{
    return m_Flow_count;
}
void PacketGeneratorConfig::setFlowCount(int64_t value)
{
    m_Flow_count = value;
    m_Flow_countIsSet = true;
}
bool PacketGeneratorConfig::flowCountIsSet() const
{
    return m_Flow_countIsSet;
}
void PacketGeneratorConfig::unsetFlow_count()
{
    m_Flow_countIsSet = false;
}
std::shared_ptr<TrafficLoad> PacketGeneratorConfig::getLoad() const
{
    return m_Load;
}
void PacketGeneratorConfig::setLoad(std::shared_ptr<TrafficLoad> value)
{
    m_Load = value;
    
}
std::string PacketGeneratorConfig::getOrder() const
{
    return m_Order;
}
void PacketGeneratorConfig::setOrder(std::string value)
{
    m_Order = value;
    m_OrderIsSet = true;
}
bool PacketGeneratorConfig::orderIsSet() const
{
    return m_OrderIsSet;
}
void PacketGeneratorConfig::unsetOrder()
{
    m_OrderIsSet = false;
}
std::vector<std::shared_ptr<TrafficDefinition>>& PacketGeneratorConfig::getTraffic()
{
    return m_Traffic;
}

}
}
}

