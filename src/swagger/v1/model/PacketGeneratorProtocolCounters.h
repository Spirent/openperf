/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketGeneratorProtocolCounters.h
 *
 * Packet generator protocol statistics
 */

#ifndef PacketGeneratorProtocolCounters_H_
#define PacketGeneratorProtocolCounters_H_


#include "ModelBase.h"

#include "PacketIpProtocolCounters.h"
#include "PacketEthernetProtocolCounters.h"
#include "PacketInnerIpProtocolCounters.h"
#include "PacketTransportProtocolCounters.h"
#include "PacketTunnelProtocolCounters.h"
#include "PacketInnerTransportProtocolCounters.h"
#include "PacketInnerEthernetProtocolCounters.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Packet generator protocol statistics
/// </summary>
class  PacketGeneratorProtocolCounters
    : public ModelBase
{
public:
    PacketGeneratorProtocolCounters();
    virtual ~PacketGeneratorProtocolCounters();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketGeneratorProtocolCounters members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketEthernetProtocolCounters> getEthernet() const;
    void setEthernet(std::shared_ptr<PacketEthernetProtocolCounters> value);
    bool ethernetIsSet() const;
    void unsetEthernet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketIpProtocolCounters> getIp() const;
    void setIp(std::shared_ptr<PacketIpProtocolCounters> value);
    bool ipIsSet() const;
    void unsetIp();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketTransportProtocolCounters> getTransport() const;
    void setTransport(std::shared_ptr<PacketTransportProtocolCounters> value);
    bool transportIsSet() const;
    void unsetTransport();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketTunnelProtocolCounters> getTunnel() const;
    void setTunnel(std::shared_ptr<PacketTunnelProtocolCounters> value);
    bool tunnelIsSet() const;
    void unsetTunnel();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketInnerEthernetProtocolCounters> getInnerEthernet() const;
    void setInnerEthernet(std::shared_ptr<PacketInnerEthernetProtocolCounters> value);
    bool innerEthernetIsSet() const;
    void unsetInner_ethernet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketInnerIpProtocolCounters> getInnerIp() const;
    void setInnerIp(std::shared_ptr<PacketInnerIpProtocolCounters> value);
    bool innerIpIsSet() const;
    void unsetInner_ip();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacketInnerTransportProtocolCounters> getInnerTransport() const;
    void setInnerTransport(std::shared_ptr<PacketInnerTransportProtocolCounters> value);
    bool innerTransportIsSet() const;
    void unsetInner_transport();

protected:
    std::shared_ptr<PacketEthernetProtocolCounters> m_Ethernet;
    bool m_EthernetIsSet;
    std::shared_ptr<PacketIpProtocolCounters> m_Ip;
    bool m_IpIsSet;
    std::shared_ptr<PacketTransportProtocolCounters> m_Transport;
    bool m_TransportIsSet;
    std::shared_ptr<PacketTunnelProtocolCounters> m_Tunnel;
    bool m_TunnelIsSet;
    std::shared_ptr<PacketInnerEthernetProtocolCounters> m_Inner_ethernet;
    bool m_Inner_ethernetIsSet;
    std::shared_ptr<PacketInnerIpProtocolCounters> m_Inner_ip;
    bool m_Inner_ipIsSet;
    std::shared_ptr<PacketInnerTransportProtocolCounters> m_Inner_transport;
    bool m_Inner_transportIsSet;
};

}
}
}

#endif /* PacketGeneratorProtocolCounters_H_ */
