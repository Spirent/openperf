/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketGeneratorFlowCounters.h
 *
 * Packet generator flow statistics
 */

#ifndef PacketGeneratorFlowCounters_H_
#define PacketGeneratorFlowCounters_H_


#include "ModelBase.h"

#include <string>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Packet generator flow statistics
/// </summary>
class  PacketGeneratorFlowCounters
    : public ModelBase
{
public:
    PacketGeneratorFlowCounters();
    virtual ~PacketGeneratorFlowCounters();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketGeneratorFlowCounters members

    /// <summary>
    /// The number of packets not transmitted due to errors
    /// </summary>
    int64_t getErrors() const;
    void setErrors(int64_t value);
        /// <summary>
    /// The total number of octets that have been transmitted
    /// </summary>
    int64_t getOctetsActual() const;
    void setOctetsActual(int64_t value);
        /// <summary>
    /// The total number of octets that should have been transmitted
    /// </summary>
    int64_t getOctetsIntended() const;
    void setOctetsIntended(int64_t value);
        /// <summary>
    /// The total number of packets that have been transmitted
    /// </summary>
    int64_t getPacketsActual() const;
    void setPacketsActual(int64_t value);
        /// <summary>
    /// The total number of packets that should have been transmitted
    /// </summary>
    int64_t getPacketsIntended() const;
    void setPacketsIntended(int64_t value);
        /// <summary>
    /// The timestamp of the first transmitted packet
    /// </summary>
    std::string getTimestampFirst() const;
    void setTimestampFirst(std::string value);
    bool timestampFirstIsSet() const;
    void unsetTimestamp_first();
    /// <summary>
    /// The timestamp of the most recently transmitted packet
    /// </summary>
    std::string getTimestampLast() const;
    void setTimestampLast(std::string value);
    bool timestampLastIsSet() const;
    void unsetTimestamp_last();

protected:
    int64_t m_Errors;

    int64_t m_Octets_actual;

    int64_t m_Octets_intended;

    int64_t m_Packets_actual;

    int64_t m_Packets_intended;

    std::string m_Timestamp_first;
    bool m_Timestamp_firstIsSet;
    std::string m_Timestamp_last;
    bool m_Timestamp_lastIsSet;
};

}
}
}

#endif /* PacketGeneratorFlowCounters_H_ */
