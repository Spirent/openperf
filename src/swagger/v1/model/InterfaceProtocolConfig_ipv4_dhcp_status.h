/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * InterfaceProtocolConfig_ipv4_dhcp_status.h
 *
 * DHCP status information
 */

#ifndef InterfaceProtocolConfig_ipv4_dhcp_status_H_
#define InterfaceProtocolConfig_ipv4_dhcp_status_H_


#include "ModelBase.h"

#include <string>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// DHCP status information
/// </summary>
class  InterfaceProtocolConfig_ipv4_dhcp_status
    : public ModelBase
{
public:
    InterfaceProtocolConfig_ipv4_dhcp_status();
    virtual ~InterfaceProtocolConfig_ipv4_dhcp_status();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// InterfaceProtocolConfig_ipv4_dhcp_status members

    /// <summary>
    /// IP address
    /// </summary>
    std::string getAddress() const;
    void setAddress(std::string value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// Prefix length
    /// </summary>
    int32_t getPrefixLength() const;
    void setPrefixLength(int32_t value);
    bool prefixLengthIsSet() const;
    void unsetPrefix_length();
    /// <summary>
    /// Default gateway
    /// </summary>
    std::string getGateway() const;
    void setGateway(std::string value);
    bool gatewayIsSet() const;
    void unsetGateway();
    /// <summary>
    /// Current DHCP client state. Most states are described in RFC 2131. The \&quot;checking\&quot; state is non-standard and comes from RFC 5227. The \&quot;checking\&quot; state means the client is performing Address Conflict Detection (ACD). 
    /// </summary>
    std::string getState() const;
    void setState(std::string value);
    bool stateIsSet() const;
    void unsetState();

protected:
    std::string m_Address;
    bool m_AddressIsSet;
    int32_t m_Prefix_length;
    bool m_Prefix_lengthIsSet;
    std::string m_Gateway;
    bool m_GatewayIsSet;
    std::string m_State;
    bool m_StateIsSet;
};

}
}
}

#endif /* InterfaceProtocolConfig_ipv4_dhcp_status_H_ */
