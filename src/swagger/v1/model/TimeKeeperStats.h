/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TimeKeeperStats.h
 *
 * TimeKeeper statistics
 */

#ifndef TimeKeeperStats_H_
#define TimeKeeperStats_H_


#include "ModelBase.h"

#include "TimeKeeperStats_round_trip_times.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// TimeKeeper statistics
/// </summary>
class  TimeKeeperStats
    : public ModelBase
{
public:
    TimeKeeperStats();
    virtual ~TimeKeeperStats();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TimeKeeperStats members

    /// <summary>
    /// The number of times the frequency has been calculated.
    /// </summary>
    double getFrequencyUpdates() const;
    void setFrequencyUpdates(double value);
        /// <summary>
    /// The number of times the local frequency has been calculated.
    /// </summary>
    double getLocalFrequencyUpdates() const;
    void setLocalFrequencyUpdates(double value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimeKeeperStats_round_trip_times> getRoundTripTimes() const;
    void setRoundTripTimes(std::shared_ptr<TimeKeeperStats_round_trip_times> value);
        /// <summary>
    /// The number of times theta has been calculated.
    /// </summary>
    double getThetaUpdates() const;
    void setThetaUpdates(double value);
        /// <summary>
    /// The number of timestamp messages received by the time keeper.
    /// </summary>
    double getTimestamps() const;
    void setTimestamps(double value);
        /// <summary>
    /// The number of clock synchronization events.
    /// </summary>
    double getUpdates() const;
    void setUpdates(double value);
    
protected:
    double m_Frequency_updates;

    double m_Local_frequency_updates;

    std::shared_ptr<TimeKeeperStats_round_trip_times> m_Round_trip_times;

    double m_Theta_updates;

    double m_Timestamps;

    double m_Updates;

};

}
}
}

#endif /* TimeKeeperStats_H_ */
