/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TimeKeeperStats.h
 *
 * TimeKeeper statistics
 */

#ifndef TimeKeeperStats_H_
#define TimeKeeperStats_H_


#include "ModelBase.h"

#include "TimeKeeperStats_round_trip_times.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// TimeKeeper statistics
/// </summary>
class  TimeKeeperStats
    : public ModelBase
{
public:
    TimeKeeperStats();
    virtual ~TimeKeeperStats();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TimeKeeperStats members

    /// <summary>
    /// The number of times the frequency calculation has been updated.
    /// </summary>
    int64_t getFrequencyAccept() const;
    void setFrequencyAccept(int64_t value);
        /// <summary>
    /// The number of times the frequency calculation has been rejected due to an excessive delta between old and new values. 
    /// </summary>
    int64_t getFrequencyReject() const;
    void setFrequencyReject(int64_t value);
        /// <summary>
    /// The number of times the local frequency calculation has been updated.
    /// </summary>
    int64_t getLocalFrequencyAccept() const;
    void setLocalFrequencyAccept(int64_t value);
        /// <summary>
    /// The number of times the local frequency calculation has been rejected due to an excessive delta between old and new values. 
    /// </summary>
    int64_t getLocalFrequencyReject() const;
    void setLocalFrequencyReject(int64_t value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimeKeeperStats_round_trip_times> getRoundTripTimes() const;
    void setRoundTripTimes(std::shared_ptr<TimeKeeperStats_round_trip_times> value);
        /// <summary>
    /// The number of times the theta calculation has been updated.
    /// </summary>
    int64_t getThetaAccept() const;
    void setThetaAccept(int64_t value);
        /// <summary>
    /// Then umber of times the theta calculation has been rejected due to excessive delta between old and new values. 
    /// </summary>
    int64_t getThetaReject() const;
    void setThetaReject(int64_t value);
        /// <summary>
    /// The number of timestamps in the current working set of timestamps. Old timestamps are dropped from the history of timestamps as they become irrelevant. 
    /// </summary>
    int64_t getTimestamps() const;
    void setTimestamps(int64_t value);
    
protected:
    int64_t m_Frequency_accept;

    int64_t m_Frequency_reject;

    int64_t m_Local_frequency_accept;

    int64_t m_Local_frequency_reject;

    std::shared_ptr<TimeKeeperStats_round_trip_times> m_Round_trip_times;

    int64_t m_Theta_accept;

    int64_t m_Theta_reject;

    int64_t m_Timestamps;

};

}
}
}

#endif /* TimeKeeperStats_H_ */
