/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAnalyzerFlowCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketAnalyzerFlowCounters::PacketAnalyzerFlowCounters()
{
    m_HeadersIsSet = false;
    m_Frame_lengthIsSet = false;
    m_InterarrivalIsSet = false;
    m_Jitter_ipdvIsSet = false;
    m_Jitter_rfcIsSet = false;
    m_LatencyIsSet = false;
    m_SequenceIsSet = false;
    m_Frame_count = 0L;
    m_Timestamp_first = "";
    m_Timestamp_firstIsSet = false;
    m_Timestamp_last = "";
    m_Timestamp_lastIsSet = false;
    
}

PacketAnalyzerFlowCounters::~PacketAnalyzerFlowCounters()
{
}

void PacketAnalyzerFlowCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketAnalyzerFlowCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Headers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["headers"] = jsonArray;
        }
    }
    if(m_Frame_lengthIsSet)
    {
        val["frame_length"] = ModelBase::toJson(m_Frame_length);
    }
    if(m_InterarrivalIsSet)
    {
        val["interarrival"] = ModelBase::toJson(m_Interarrival);
    }
    if(m_Jitter_ipdvIsSet)
    {
        val["jitter_ipdv"] = ModelBase::toJson(m_Jitter_ipdv);
    }
    if(m_Jitter_rfcIsSet)
    {
        val["jitter_rfc"] = ModelBase::toJson(m_Jitter_rfc);
    }
    if(m_LatencyIsSet)
    {
        val["latency"] = ModelBase::toJson(m_Latency);
    }
    if(m_SequenceIsSet)
    {
        val["sequence"] = ModelBase::toJson(m_Sequence);
    }
    val["frame_count"] = m_Frame_count;
    if(m_Timestamp_firstIsSet)
    {
        val["timestamp_first"] = ModelBase::toJson(m_Timestamp_first);
    }
    if(m_Timestamp_lastIsSet)
    {
        val["timestamp_last"] = ModelBase::toJson(m_Timestamp_last);
    }
    

    return val;
}

void PacketAnalyzerFlowCounters::fromJson(nlohmann::json& val)
{
    {
        m_Headers.clear();
        nlohmann::json jsonArray;
        if(val.find("headers") != val.end())
        {
        for( auto& item : val["headers"] )
        {
            
            if(item.is_null())
            {
                m_Headers.push_back( std::shared_ptr<PacketAnalyzerFlowHeader>(nullptr) );
            }
            else
            {
                std::shared_ptr<PacketAnalyzerFlowHeader> newItem(new PacketAnalyzerFlowHeader());
                newItem->fromJson(item);
                m_Headers.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("frame_length") != val.end())
    {
        if(!val["frame_length"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_frame_length> newItem(new PacketAnalyzerFlowCounters_frame_length());
            newItem->fromJson(val["frame_length"]);
            setFrameLength( newItem );
        }
        
    }
    if(val.find("interarrival") != val.end())
    {
        if(!val["interarrival"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_interarrival> newItem(new PacketAnalyzerFlowCounters_interarrival());
            newItem->fromJson(val["interarrival"]);
            setInterarrival( newItem );
        }
        
    }
    if(val.find("jitter_ipdv") != val.end())
    {
        if(!val["jitter_ipdv"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_jitter_ipdv> newItem(new PacketAnalyzerFlowCounters_jitter_ipdv());
            newItem->fromJson(val["jitter_ipdv"]);
            setJitterIpdv( newItem );
        }
        
    }
    if(val.find("jitter_rfc") != val.end())
    {
        if(!val["jitter_rfc"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_jitter_rfc> newItem(new PacketAnalyzerFlowCounters_jitter_rfc());
            newItem->fromJson(val["jitter_rfc"]);
            setJitterRfc( newItem );
        }
        
    }
    if(val.find("latency") != val.end())
    {
        if(!val["latency"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_latency> newItem(new PacketAnalyzerFlowCounters_latency());
            newItem->fromJson(val["latency"]);
            setLatency( newItem );
        }
        
    }
    if(val.find("sequence") != val.end())
    {
        if(!val["sequence"].is_null())
        {
            std::shared_ptr<PacketAnalyzerFlowCounters_sequence> newItem(new PacketAnalyzerFlowCounters_sequence());
            newItem->fromJson(val["sequence"]);
            setSequence( newItem );
        }
        
    }
    setFrameCount(val.at("frame_count"));
    if(val.find("timestamp_first") != val.end())
    {
        setTimestampFirst(val.at("timestamp_first"));
        
    }
    if(val.find("timestamp_last") != val.end())
    {
        setTimestampLast(val.at("timestamp_last"));
        
    }
    
}


std::vector<std::shared_ptr<PacketAnalyzerFlowHeader>>& PacketAnalyzerFlowCounters::getHeaders()
{
    return m_Headers;
}
bool PacketAnalyzerFlowCounters::headersIsSet() const
{
    return m_HeadersIsSet;
}
void PacketAnalyzerFlowCounters::unsetHeaders()
{
    m_HeadersIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_frame_length> PacketAnalyzerFlowCounters::getFrameLength() const
{
    return m_Frame_length;
}
void PacketAnalyzerFlowCounters::setFrameLength(std::shared_ptr<PacketAnalyzerFlowCounters_frame_length> value)
{
    m_Frame_length = value;
    m_Frame_lengthIsSet = true;
}
bool PacketAnalyzerFlowCounters::frameLengthIsSet() const
{
    return m_Frame_lengthIsSet;
}
void PacketAnalyzerFlowCounters::unsetFrame_length()
{
    m_Frame_lengthIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_interarrival> PacketAnalyzerFlowCounters::getInterarrival() const
{
    return m_Interarrival;
}
void PacketAnalyzerFlowCounters::setInterarrival(std::shared_ptr<PacketAnalyzerFlowCounters_interarrival> value)
{
    m_Interarrival = value;
    m_InterarrivalIsSet = true;
}
bool PacketAnalyzerFlowCounters::interarrivalIsSet() const
{
    return m_InterarrivalIsSet;
}
void PacketAnalyzerFlowCounters::unsetInterarrival()
{
    m_InterarrivalIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_jitter_ipdv> PacketAnalyzerFlowCounters::getJitterIpdv() const
{
    return m_Jitter_ipdv;
}
void PacketAnalyzerFlowCounters::setJitterIpdv(std::shared_ptr<PacketAnalyzerFlowCounters_jitter_ipdv> value)
{
    m_Jitter_ipdv = value;
    m_Jitter_ipdvIsSet = true;
}
bool PacketAnalyzerFlowCounters::jitterIpdvIsSet() const
{
    return m_Jitter_ipdvIsSet;
}
void PacketAnalyzerFlowCounters::unsetJitter_ipdv()
{
    m_Jitter_ipdvIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_jitter_rfc> PacketAnalyzerFlowCounters::getJitterRfc() const
{
    return m_Jitter_rfc;
}
void PacketAnalyzerFlowCounters::setJitterRfc(std::shared_ptr<PacketAnalyzerFlowCounters_jitter_rfc> value)
{
    m_Jitter_rfc = value;
    m_Jitter_rfcIsSet = true;
}
bool PacketAnalyzerFlowCounters::jitterRfcIsSet() const
{
    return m_Jitter_rfcIsSet;
}
void PacketAnalyzerFlowCounters::unsetJitter_rfc()
{
    m_Jitter_rfcIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_latency> PacketAnalyzerFlowCounters::getLatency() const
{
    return m_Latency;
}
void PacketAnalyzerFlowCounters::setLatency(std::shared_ptr<PacketAnalyzerFlowCounters_latency> value)
{
    m_Latency = value;
    m_LatencyIsSet = true;
}
bool PacketAnalyzerFlowCounters::latencyIsSet() const
{
    return m_LatencyIsSet;
}
void PacketAnalyzerFlowCounters::unsetLatency()
{
    m_LatencyIsSet = false;
}
std::shared_ptr<PacketAnalyzerFlowCounters_sequence> PacketAnalyzerFlowCounters::getSequence() const
{
    return m_Sequence;
}
void PacketAnalyzerFlowCounters::setSequence(std::shared_ptr<PacketAnalyzerFlowCounters_sequence> value)
{
    m_Sequence = value;
    m_SequenceIsSet = true;
}
bool PacketAnalyzerFlowCounters::sequenceIsSet() const
{
    return m_SequenceIsSet;
}
void PacketAnalyzerFlowCounters::unsetSequence()
{
    m_SequenceIsSet = false;
}
int64_t PacketAnalyzerFlowCounters::getFrameCount() const
{
    return m_Frame_count;
}
void PacketAnalyzerFlowCounters::setFrameCount(int64_t value)
{
    m_Frame_count = value;
    
}
std::string PacketAnalyzerFlowCounters::getTimestampFirst() const
{
    return m_Timestamp_first;
}
void PacketAnalyzerFlowCounters::setTimestampFirst(std::string value)
{
    m_Timestamp_first = value;
    m_Timestamp_firstIsSet = true;
}
bool PacketAnalyzerFlowCounters::timestampFirstIsSet() const
{
    return m_Timestamp_firstIsSet;
}
void PacketAnalyzerFlowCounters::unsetTimestamp_first()
{
    m_Timestamp_firstIsSet = false;
}
std::string PacketAnalyzerFlowCounters::getTimestampLast() const
{
    return m_Timestamp_last;
}
void PacketAnalyzerFlowCounters::setTimestampLast(std::string value)
{
    m_Timestamp_last = value;
    m_Timestamp_lastIsSet = true;
}
bool PacketAnalyzerFlowCounters::timestampLastIsSet() const
{
    return m_Timestamp_lastIsSet;
}
void PacketAnalyzerFlowCounters::unsetTimestamp_last()
{
    m_Timestamp_lastIsSet = false;
}

}
}
}

