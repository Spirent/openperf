/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TimeKeeperStats.h"

namespace swagger {
namespace v1 {
namespace model {

TimeKeeperStats::TimeKeeperStats()
{
    m_Frequency_updates = 0.0;
    m_Local_frequency_updates = 0.0;
    m_Theta_updates = 0.0;
    m_Timestamps = 0.0;
    m_Updates = 0.0;
    
}

TimeKeeperStats::~TimeKeeperStats()
{
}

void TimeKeeperStats::validate()
{
    // TODO: implement validation
}

nlohmann::json TimeKeeperStats::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["frequency_updates"] = m_Frequency_updates;
    val["local_frequency_updates"] = m_Local_frequency_updates;
    val["round_trip_times"] = ModelBase::toJson(m_Round_trip_times);
    val["theta_updates"] = m_Theta_updates;
    val["timestamps"] = m_Timestamps;
    val["updates"] = m_Updates;
    

    return val;
}

void TimeKeeperStats::fromJson(nlohmann::json& val)
{
    setFrequencyUpdates(val.at("frequency_updates"));
    setLocalFrequencyUpdates(val.at("local_frequency_updates"));
    setThetaUpdates(val.at("theta_updates"));
    setTimestamps(val.at("timestamps"));
    setUpdates(val.at("updates"));
    
}


double TimeKeeperStats::getFrequencyUpdates() const
{
    return m_Frequency_updates;
}
void TimeKeeperStats::setFrequencyUpdates(double value)
{
    m_Frequency_updates = value;
    
}
double TimeKeeperStats::getLocalFrequencyUpdates() const
{
    return m_Local_frequency_updates;
}
void TimeKeeperStats::setLocalFrequencyUpdates(double value)
{
    m_Local_frequency_updates = value;
    
}
std::shared_ptr<TimeKeeperStats_round_trip_times> TimeKeeperStats::getRoundTripTimes() const
{
    return m_Round_trip_times;
}
void TimeKeeperStats::setRoundTripTimes(std::shared_ptr<TimeKeeperStats_round_trip_times> value)
{
    m_Round_trip_times = value;
    
}
double TimeKeeperStats::getThetaUpdates() const
{
    return m_Theta_updates;
}
void TimeKeeperStats::setThetaUpdates(double value)
{
    m_Theta_updates = value;
    
}
double TimeKeeperStats::getTimestamps() const
{
    return m_Timestamps;
}
void TimeKeeperStats::setTimestamps(double value)
{
    m_Timestamps = value;
    
}
double TimeKeeperStats::getUpdates() const
{
    return m_Updates;
}
void TimeKeeperStats::setUpdates(double value)
{
    m_Updates = value;
    
}

}
}
}

