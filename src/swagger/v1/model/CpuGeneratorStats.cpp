/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "CpuGeneratorStats.h"

namespace swagger {
namespace v1 {
namespace model {

CpuGeneratorStats::CpuGeneratorStats()
{
    m_Available = 0L;
    m_Utilization = 0L;
    m_System = 0L;
    m_User = 0L;
    m_Steal = 0L;
    m_StealIsSet = false;
    m_Error = 0L;
    
}

CpuGeneratorStats::~CpuGeneratorStats()
{
}

void CpuGeneratorStats::validate()
{
    // TODO: implement validation
}

nlohmann::json CpuGeneratorStats::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["available"] = m_Available;
    val["utilization"] = m_Utilization;
    val["system"] = m_System;
    val["user"] = m_User;
    if(m_StealIsSet)
    {
        val["steal"] = m_Steal;
    }
    val["error"] = m_Error;
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Cores )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["cores"] = jsonArray;
            }
    

    return val;
}

void CpuGeneratorStats::fromJson(nlohmann::json& val)
{
    setAvailable(val.at("available"));
    setUtilization(val.at("utilization"));
    setSystem(val.at("system"));
    setUser(val.at("user"));
    if(val.find("steal") != val.end())
    {
        setSteal(val.at("steal"));
    }
    setError(val.at("error"));
    {
        m_Cores.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["cores"] )
        {
            
            if(item.is_null())
            {
                m_Cores.push_back( std::shared_ptr<CpuGeneratorCoreStats>(nullptr) );
            }
            else
            {
                std::shared_ptr<CpuGeneratorCoreStats> newItem(new CpuGeneratorCoreStats());
                newItem->fromJson(item);
                m_Cores.push_back( newItem );
            }
            
        }
    }
    
}


int64_t CpuGeneratorStats::getAvailable() const
{
    return m_Available;
}
void CpuGeneratorStats::setAvailable(int64_t value)
{
    m_Available = value;
    
}
int64_t CpuGeneratorStats::getUtilization() const
{
    return m_Utilization;
}
void CpuGeneratorStats::setUtilization(int64_t value)
{
    m_Utilization = value;
    
}
int64_t CpuGeneratorStats::getSystem() const
{
    return m_System;
}
void CpuGeneratorStats::setSystem(int64_t value)
{
    m_System = value;
    
}
int64_t CpuGeneratorStats::getUser() const
{
    return m_User;
}
void CpuGeneratorStats::setUser(int64_t value)
{
    m_User = value;
    
}
int64_t CpuGeneratorStats::getSteal() const
{
    return m_Steal;
}
void CpuGeneratorStats::setSteal(int64_t value)
{
    m_Steal = value;
    m_StealIsSet = true;
}
bool CpuGeneratorStats::stealIsSet() const
{
    return m_StealIsSet;
}
void CpuGeneratorStats::unsetSteal()
{
    m_StealIsSet = false;
}
int64_t CpuGeneratorStats::getError() const
{
    return m_Error;
}
void CpuGeneratorStats::setError(int64_t value)
{
    m_Error = value;
    
}
std::vector<std::shared_ptr<CpuGeneratorCoreStats>>& CpuGeneratorStats::getCores()
{
    return m_Cores;
}

}
}
}

