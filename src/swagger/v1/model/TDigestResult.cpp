/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TDigestResult.h"

namespace swagger {
namespace v1 {
namespace model {

TDigestResult::TDigestResult()
{
    m_Id = "";
    m_Function = "";
    m_Stat_x = "";
    m_Stat_y = "";
    m_Stat_yIsSet = false;
    m_Compression = 0;
    
}

TDigestResult::~TDigestResult()
{
}

void TDigestResult::validate()
{
    // TODO: implement validation
}

nlohmann::json TDigestResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["function"] = ModelBase::toJson(m_Function);
    val["stat_x"] = ModelBase::toJson(m_Stat_x);
    if(m_Stat_yIsSet)
    {
        val["stat_y"] = ModelBase::toJson(m_Stat_y);
    }
    val["compression"] = m_Compression;
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Centroids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["centroids"] = jsonArray;
            }
    

    return val;
}

void TDigestResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setFunction(val.at("function"));
    setStatX(val.at("stat_x"));
    if(val.find("stat_y") != val.end())
    {
        setStatY(val.at("stat_y"));
        
    }
    setCompression(val.at("compression"));
    {
        m_Centroids.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["centroids"] )
        {
            
            if(item.is_null())
            {
                m_Centroids.push_back( std::shared_ptr<TDigestCentroid>(nullptr) );
            }
            else
            {
                std::shared_ptr<TDigestCentroid> newItem(new TDigestCentroid());
                newItem->fromJson(item);
                m_Centroids.push_back( newItem );
            }
            
        }
    }
    
}


std::string TDigestResult::getId() const
{
    return m_Id;
}
void TDigestResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string TDigestResult::getFunction() const
{
    return m_Function;
}
void TDigestResult::setFunction(std::string value)
{
    m_Function = value;
    
}
std::string TDigestResult::getStatX() const
{
    return m_Stat_x;
}
void TDigestResult::setStatX(std::string value)
{
    m_Stat_x = value;
    
}
std::string TDigestResult::getStatY() const
{
    return m_Stat_y;
}
void TDigestResult::setStatY(std::string value)
{
    m_Stat_y = value;
    m_Stat_yIsSet = true;
}
bool TDigestResult::statYIsSet() const
{
    return m_Stat_yIsSet;
}
void TDigestResult::unsetStat_y()
{
    m_Stat_yIsSet = false;
}
int32_t TDigestResult::getCompression() const
{
    return m_Compression;
}
void TDigestResult::setCompression(int32_t value)
{
    m_Compression = value;
    
}
std::vector<std::shared_ptr<TDigestCentroid>>& TDigestResult::getCentroids()
{
    return m_Centroids;
}

}
}
}

