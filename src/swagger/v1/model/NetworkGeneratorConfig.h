/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * NetworkGeneratorConfig.h
 *
 * Network generator configuration
 */

#ifndef NetworkGeneratorConfig_H_
#define NetworkGeneratorConfig_H_


#include "ModelBase.h"

#include "NetworkGeneratorConfig_target.h"

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Network generator configuration
/// </summary>
class  NetworkGeneratorConfig
    : public ModelBase
{
public:
    NetworkGeneratorConfig();
    virtual ~NetworkGeneratorConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// NetworkGeneratorConfig members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetworkGeneratorConfig_target> getTarget() const;
    void setTarget(std::shared_ptr<NetworkGeneratorConfig_target> value);
    bool targetIsSet() const;
    void unsetTarget();
    /// <summary>
    /// Number of connections to establish with the server
    /// </summary>
    int64_t getConnections() const;
    void setConnections(int64_t value);
        /// <summary>
    /// Number of operations over a connection before closed
    /// </summary>
    int32_t getOpsPerConnection() const;
    void setOpsPerConnection(int32_t value);
        /// <summary>
    /// Number of read opertions to perform per second
    /// </summary>
    int32_t getReadsPerSec() const;
    void setReadsPerSec(int32_t value);
        /// <summary>
    /// Number of bytes to request from the server per read operation
    /// </summary>
    int32_t getReadSize() const;
    void setReadSize(int32_t value);
        /// <summary>
    /// Number of write operations to perform per second
    /// </summary>
    int32_t getWritesPerSec() const;
    void setWritesPerSec(int32_t value);
        /// <summary>
    /// Number of bytes to send to the server per write operation
    /// </summary>
    int32_t getWriteSize() const;
    void setWriteSize(int32_t value);
    
protected:
    std::shared_ptr<NetworkGeneratorConfig_target> m_Target;
    bool m_TargetIsSet;
    int64_t m_Connections;

    int32_t m_Ops_per_connection;

    int32_t m_Reads_per_sec;

    int32_t m_Read_size;

    int32_t m_Writes_per_sec;

    int32_t m_Write_size;

};

}
}
}

#endif /* NetworkGeneratorConfig_H_ */
