/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TimeSourceStats_ntp.h
 *
 * NTP statistics
 */

#ifndef TimeSourceStats_ntp_H_
#define TimeSourceStats_ntp_H_


#include "ModelBase.h"

#include <string>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// NTP statistics
/// </summary>
class  TimeSourceStats_ntp
    : public ModelBase
{
public:
    TimeSourceStats_ntp();
    virtual ~TimeSourceStats_ntp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TimeSourceStats_ntp members

    /// <summary>
    /// the time and date of the last accepted NTP reply, in ISO8601 format
    /// </summary>
    std::string getLastRxAccepted() const;
    void setLastRxAccepted(std::string value);
    bool lastRxAcceptedIsSet() const;
    void unsetLast_rx_accepted();
    /// <summary>
    /// The time and date of the last ignored NTP reply, in ISO8601 format
    /// </summary>
    std::string getLastRxIgnored() const;
    void setLastRxIgnored(std::string value);
    bool lastRxIgnoredIsSet() const;
    void unsetLast_rx_ignored();
    /// <summary>
    /// Current NTP server poll period, in seconds
    /// </summary>
    int64_t getPollPeriod() const;
    void setPollPeriod(int64_t value);
        /// <summary>
    /// Received packets that were ignored due to an invalid origin timestamp or stratum, e.g. a Kiss-o&#39;-Death packet 
    /// </summary>
    int64_t getRxIgnored() const;
    void setRxIgnored(int64_t value);
        /// <summary>
    /// Received packets
    /// </summary>
    int64_t getRxPackets() const;
    void setRxPackets(int64_t value);
        /// <summary>
    /// Transmitted packets
    /// </summary>
    int64_t getTxPackets() const;
    void setTxPackets(int64_t value);
        /// <summary>
    /// Time source distance from a NTP reference clock, in network hops. 
    /// </summary>
    int32_t getStratum() const;
    void setStratum(int32_t value);
    bool stratumIsSet() const;
    void unsetStratum();

protected:
    std::string m_Last_rx_accepted;
    bool m_Last_rx_acceptedIsSet;
    std::string m_Last_rx_ignored;
    bool m_Last_rx_ignoredIsSet;
    int64_t m_Poll_period;

    int64_t m_Rx_ignored;

    int64_t m_Rx_packets;

    int64_t m_Tx_packets;

    int32_t m_Stratum;
    bool m_StratumIsSet;
};

}
}
}

#endif /* TimeSourceStats_ntp_H_ */
