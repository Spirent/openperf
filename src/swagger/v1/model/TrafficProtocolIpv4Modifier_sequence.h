/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * TrafficProtocolIpv4Modifier_sequence.h
 *
 * Specifies a sequence of IPv4 addresses
 */

#ifndef TrafficProtocolIpv4Modifier_sequence_H_
#define TrafficProtocolIpv4Modifier_sequence_H_


#include "ModelBase.h"

#include <string>
#include <vector>

namespace swagger {
namespace v1 {
namespace model {

/// <summary>
/// Specifies a sequence of IPv4 addresses
/// </summary>
class  TrafficProtocolIpv4Modifier_sequence
    : public ModelBase
{
public:
    TrafficProtocolIpv4Modifier_sequence();
    virtual ~TrafficProtocolIpv4Modifier_sequence();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// TrafficProtocolIpv4Modifier_sequence members

    /// <summary>
    /// The number of addresses in the sequence
    /// </summary>
    int32_t getCount() const;
    void setCount(int32_t value);
        /// <summary>
    /// First IPv4 address in the sequence
    /// </summary>
    std::string getStart() const;
    void setStart(std::string value);
        /// <summary>
    /// Last IPv4 address in the sequence
    /// </summary>
    std::string getStop() const;
    void setStop(std::string value);
    bool stopIsSet() const;
    void unsetStop();
    /// <summary>
    /// List of addresses in the sequence to skip
    /// </summary>
    std::vector<std::string>& getSkip();
    bool skipIsSet() const;
    void unsetSkip();

protected:
    int32_t m_Count;

    std::string m_Start;

    std::string m_Stop;
    bool m_StopIsSet;
    std::vector<std::string> m_Skip;
    bool m_SkipIsSet;
};

}
}
}

#endif /* TrafficProtocolIpv4Modifier_sequence_H_ */
