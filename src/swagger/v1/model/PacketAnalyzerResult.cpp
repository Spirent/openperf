/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAnalyzerResult.h"

namespace swagger {
namespace v1 {
namespace model {

PacketAnalyzerResult::PacketAnalyzerResult()
{
    m_Id = "";
    m_Analyzer_id = "";
    m_Analyzer_idIsSet = false;
    m_Active = false;
    m_FlowsIsSet = false;
    
}

PacketAnalyzerResult::~PacketAnalyzerResult()
{
}

void PacketAnalyzerResult::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketAnalyzerResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    if(m_Analyzer_idIsSet)
    {
        val["analyzer_id"] = ModelBase::toJson(m_Analyzer_id);
    }
    val["active"] = m_Active;
    val["protocol_counters"] = ModelBase::toJson(m_Protocol_counters);
    val["flow_counters"] = ModelBase::toJson(m_Flow_counters);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Flows )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["flows"] = jsonArray;
        }
    }
    

    return val;
}

void PacketAnalyzerResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    if(val.find("analyzer_id") != val.end())
    {
        setAnalyzerId(val.at("analyzer_id"));
        
    }
    setActive(val.at("active"));
    {
        m_Flows.clear();
        nlohmann::json jsonArray;
        if(val.find("flows") != val.end())
        {
        for( auto& item : val["flows"] )
        {
            m_Flows.push_back(item);
            
        }
        }
    }
    
}


std::string PacketAnalyzerResult::getId() const
{
    return m_Id;
}
void PacketAnalyzerResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string PacketAnalyzerResult::getAnalyzerId() const
{
    return m_Analyzer_id;
}
void PacketAnalyzerResult::setAnalyzerId(std::string value)
{
    m_Analyzer_id = value;
    m_Analyzer_idIsSet = true;
}
bool PacketAnalyzerResult::analyzerIdIsSet() const
{
    return m_Analyzer_idIsSet;
}
void PacketAnalyzerResult::unsetAnalyzer_id()
{
    m_Analyzer_idIsSet = false;
}
bool PacketAnalyzerResult::isActive() const
{
    return m_Active;
}
void PacketAnalyzerResult::setActive(bool value)
{
    m_Active = value;
    
}
std::shared_ptr<PacketAnalyzerProtocolCounters> PacketAnalyzerResult::getProtocolCounters() const
{
    return m_Protocol_counters;
}
void PacketAnalyzerResult::setProtocolCounters(std::shared_ptr<PacketAnalyzerProtocolCounters> value)
{
    m_Protocol_counters = value;
    
}
std::shared_ptr<PacketAnalyzerFlowCounters> PacketAnalyzerResult::getFlowCounters() const
{
    return m_Flow_counters;
}
void PacketAnalyzerResult::setFlowCounters(std::shared_ptr<PacketAnalyzerFlowCounters> value)
{
    m_Flow_counters = value;
    
}
std::vector<std::string>& PacketAnalyzerResult::getFlows()
{
    return m_Flows;
}
bool PacketAnalyzerResult::flowsIsSet() const
{
    return m_FlowsIsSet;
}
void PacketAnalyzerResult::unsetFlows()
{
    m_FlowsIsSet = false;
}

}
}
}

