/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketProtocolIpv4.h"

namespace swagger {
namespace v1 {
namespace model {

PacketProtocolIpv4::PacketProtocolIpv4()
{
    m_Version = 0;
    m_VersionIsSet = false;
    m_Header_length = 0;
    m_Header_lengthIsSet = false;
    m_Tos = 0;
    m_TosIsSet = false;
    m_Packet_length = 0;
    m_Packet_lengthIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_FlagsIsSet = false;
    m_Fragment_offset = 0;
    m_Fragment_offsetIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
    m_Protocol = 0;
    m_ProtocolIsSet = false;
    m_Checksum = 0;
    m_ChecksumIsSet = false;
    m_SourceIsSet = false;
    
}

PacketProtocolIpv4::~PacketProtocolIpv4()
{
}

void PacketProtocolIpv4::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketProtocolIpv4::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_VersionIsSet)
    {
        val["version"] = m_Version;
    }
    if(m_Header_lengthIsSet)
    {
        val["header_length"] = m_Header_length;
    }
    if(m_TosIsSet)
    {
        val["tos"] = m_Tos;
    }
    if(m_Packet_lengthIsSet)
    {
        val["packet_length"] = m_Packet_length;
    }
    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Flags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["flags"] = jsonArray;
        }
    }
    if(m_Fragment_offsetIsSet)
    {
        val["fragment_offset"] = m_Fragment_offset;
    }
    if(m_TtlIsSet)
    {
        val["ttl"] = m_Ttl;
    }
    if(m_ProtocolIsSet)
    {
        val["protocol"] = m_Protocol;
    }
    if(m_ChecksumIsSet)
    {
        val["checksum"] = m_Checksum;
    }
    if(m_SourceIsSet)
    {
        val["source"] = ModelBase::toJson(m_Source);
    }
    val["destination"] = ModelBase::toJson(m_Destination);
    

    return val;
}

void PacketProtocolIpv4::fromJson(nlohmann::json& val)
{
    if(val.find("version") != val.end())
    {
        setVersion(val.at("version"));
    }
    if(val.find("header_length") != val.end())
    {
        setHeaderLength(val.at("header_length"));
    }
    if(val.find("tos") != val.end())
    {
        setTos(val.at("tos"));
    }
    if(val.find("packet_length") != val.end())
    {
        setPacketLength(val.at("packet_length"));
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    {
        m_Flags.clear();
        nlohmann::json jsonArray;
        if(val.find("flags") != val.end())
        {
        for( auto& item : val["flags"] )
        {
            m_Flags.push_back(item);
            
        }
        }
    }
    if(val.find("fragment_offset") != val.end())
    {
        setFragmentOffset(val.at("fragment_offset"));
    }
    if(val.find("ttl") != val.end())
    {
        setTtl(val.at("ttl"));
    }
    if(val.find("protocol") != val.end())
    {
        setProtocol(val.at("protocol"));
    }
    if(val.find("checksum") != val.end())
    {
        setChecksum(val.at("checksum"));
    }
    if(val.find("source") != val.end())
    {
        if(!val["source"].is_null())
        {
            std::shared_ptr<Ipv4Address> newItem(new Ipv4Address());
            newItem->fromJson(val["source"]);
            setSource( newItem );
        }
        
    }
    
}


int32_t PacketProtocolIpv4::getVersion() const
{
    return m_Version;
}
void PacketProtocolIpv4::setVersion(int32_t value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool PacketProtocolIpv4::versionIsSet() const
{
    return m_VersionIsSet;
}
void PacketProtocolIpv4::unsetVersion()
{
    m_VersionIsSet = false;
}
int32_t PacketProtocolIpv4::getHeaderLength() const
{
    return m_Header_length;
}
void PacketProtocolIpv4::setHeaderLength(int32_t value)
{
    m_Header_length = value;
    m_Header_lengthIsSet = true;
}
bool PacketProtocolIpv4::headerLengthIsSet() const
{
    return m_Header_lengthIsSet;
}
void PacketProtocolIpv4::unsetHeader_length()
{
    m_Header_lengthIsSet = false;
}
int32_t PacketProtocolIpv4::getTos() const
{
    return m_Tos;
}
void PacketProtocolIpv4::setTos(int32_t value)
{
    m_Tos = value;
    m_TosIsSet = true;
}
bool PacketProtocolIpv4::tosIsSet() const
{
    return m_TosIsSet;
}
void PacketProtocolIpv4::unsetTos()
{
    m_TosIsSet = false;
}
int32_t PacketProtocolIpv4::getPacketLength() const
{
    return m_Packet_length;
}
void PacketProtocolIpv4::setPacketLength(int32_t value)
{
    m_Packet_length = value;
    m_Packet_lengthIsSet = true;
}
bool PacketProtocolIpv4::packetLengthIsSet() const
{
    return m_Packet_lengthIsSet;
}
void PacketProtocolIpv4::unsetPacket_length()
{
    m_Packet_lengthIsSet = false;
}
int32_t PacketProtocolIpv4::getId() const
{
    return m_Id;
}
void PacketProtocolIpv4::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PacketProtocolIpv4::idIsSet() const
{
    return m_IdIsSet;
}
void PacketProtocolIpv4::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::string>& PacketProtocolIpv4::getFlags()
{
    return m_Flags;
}
bool PacketProtocolIpv4::flagsIsSet() const
{
    return m_FlagsIsSet;
}
void PacketProtocolIpv4::unsetFlags()
{
    m_FlagsIsSet = false;
}
int32_t PacketProtocolIpv4::getFragmentOffset() const
{
    return m_Fragment_offset;
}
void PacketProtocolIpv4::setFragmentOffset(int32_t value)
{
    m_Fragment_offset = value;
    m_Fragment_offsetIsSet = true;
}
bool PacketProtocolIpv4::fragmentOffsetIsSet() const
{
    return m_Fragment_offsetIsSet;
}
void PacketProtocolIpv4::unsetFragment_offset()
{
    m_Fragment_offsetIsSet = false;
}
int32_t PacketProtocolIpv4::getTtl() const
{
    return m_Ttl;
}
void PacketProtocolIpv4::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}
bool PacketProtocolIpv4::ttlIsSet() const
{
    return m_TtlIsSet;
}
void PacketProtocolIpv4::unsetTtl()
{
    m_TtlIsSet = false;
}
int32_t PacketProtocolIpv4::getProtocol() const
{
    return m_Protocol;
}
void PacketProtocolIpv4::setProtocol(int32_t value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool PacketProtocolIpv4::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void PacketProtocolIpv4::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
int32_t PacketProtocolIpv4::getChecksum() const
{
    return m_Checksum;
}
void PacketProtocolIpv4::setChecksum(int32_t value)
{
    m_Checksum = value;
    m_ChecksumIsSet = true;
}
bool PacketProtocolIpv4::checksumIsSet() const
{
    return m_ChecksumIsSet;
}
void PacketProtocolIpv4::unsetChecksum()
{
    m_ChecksumIsSet = false;
}
std::shared_ptr<Ipv4Address> PacketProtocolIpv4::getSource() const
{
    return m_Source;
}
void PacketProtocolIpv4::setSource(std::shared_ptr<Ipv4Address> value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool PacketProtocolIpv4::sourceIsSet() const
{
    return m_SourceIsSet;
}
void PacketProtocolIpv4::unsetSource()
{
    m_SourceIsSet = false;
}
std::shared_ptr<Ipv4Address> PacketProtocolIpv4::getDestination() const
{
    return m_Destination;
}
void PacketProtocolIpv4::setDestination(std::shared_ptr<Ipv4Address> value)
{
    m_Destination = value;
    
}

}
}
}

