/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAnalyzerProtocolCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketAnalyzerProtocolCounters::PacketAnalyzerProtocolCounters()
{
    m_EthernetIsSet = false;
    m_IpIsSet = false;
    m_ProtocolIsSet = false;
    m_TunnelIsSet = false;
    m_Inner_ethernetIsSet = false;
    m_Inner_ipIsSet = false;
    m_Inner_protocolIsSet = false;
    
}

PacketAnalyzerProtocolCounters::~PacketAnalyzerProtocolCounters()
{
}

void PacketAnalyzerProtocolCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketAnalyzerProtocolCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EthernetIsSet)
    {
        val["ethernet"] = ModelBase::toJson(m_Ethernet);
    }
    if(m_IpIsSet)
    {
        val["ip"] = ModelBase::toJson(m_Ip);
    }
    if(m_ProtocolIsSet)
    {
        val["protocol"] = ModelBase::toJson(m_Protocol);
    }
    if(m_TunnelIsSet)
    {
        val["tunnel"] = ModelBase::toJson(m_Tunnel);
    }
    if(m_Inner_ethernetIsSet)
    {
        val["inner_ethernet"] = ModelBase::toJson(m_Inner_ethernet);
    }
    if(m_Inner_ipIsSet)
    {
        val["inner_ip"] = ModelBase::toJson(m_Inner_ip);
    }
    if(m_Inner_protocolIsSet)
    {
        val["inner_protocol"] = ModelBase::toJson(m_Inner_protocol);
    }
    

    return val;
}

void PacketAnalyzerProtocolCounters::fromJson(nlohmann::json& val)
{
    if(val.find("ethernet") != val.end())
    {
        if(!val["ethernet"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_ethernet> newItem(new PacketAnalyzerProtocolCounters_ethernet());
            newItem->fromJson(val["ethernet"]);
            setEthernet( newItem );
        }
        
    }
    if(val.find("ip") != val.end())
    {
        if(!val["ip"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_ip> newItem(new PacketAnalyzerProtocolCounters_ip());
            newItem->fromJson(val["ip"]);
            setIp( newItem );
        }
        
    }
    if(val.find("protocol") != val.end())
    {
        if(!val["protocol"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_protocol> newItem(new PacketAnalyzerProtocolCounters_protocol());
            newItem->fromJson(val["protocol"]);
            setProtocol( newItem );
        }
        
    }
    if(val.find("tunnel") != val.end())
    {
        if(!val["tunnel"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_tunnel> newItem(new PacketAnalyzerProtocolCounters_tunnel());
            newItem->fromJson(val["tunnel"]);
            setTunnel( newItem );
        }
        
    }
    if(val.find("inner_ethernet") != val.end())
    {
        if(!val["inner_ethernet"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ethernet> newItem(new PacketAnalyzerProtocolCounters_inner_ethernet());
            newItem->fromJson(val["inner_ethernet"]);
            setInnerEthernet( newItem );
        }
        
    }
    if(val.find("inner_ip") != val.end())
    {
        if(!val["inner_ip"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ip> newItem(new PacketAnalyzerProtocolCounters_inner_ip());
            newItem->fromJson(val["inner_ip"]);
            setInnerIp( newItem );
        }
        
    }
    if(val.find("inner_protocol") != val.end())
    {
        if(!val["inner_protocol"].is_null())
        {
            std::shared_ptr<PacketAnalyzerProtocolCounters_inner_protocol> newItem(new PacketAnalyzerProtocolCounters_inner_protocol());
            newItem->fromJson(val["inner_protocol"]);
            setInnerProtocol( newItem );
        }
        
    }
    
}


std::shared_ptr<PacketAnalyzerProtocolCounters_ethernet> PacketAnalyzerProtocolCounters::getEthernet() const
{
    return m_Ethernet;
}
void PacketAnalyzerProtocolCounters::setEthernet(std::shared_ptr<PacketAnalyzerProtocolCounters_ethernet> value)
{
    m_Ethernet = value;
    m_EthernetIsSet = true;
}
bool PacketAnalyzerProtocolCounters::ethernetIsSet() const
{
    return m_EthernetIsSet;
}
void PacketAnalyzerProtocolCounters::unsetEthernet()
{
    m_EthernetIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_ip> PacketAnalyzerProtocolCounters::getIp() const
{
    return m_Ip;
}
void PacketAnalyzerProtocolCounters::setIp(std::shared_ptr<PacketAnalyzerProtocolCounters_ip> value)
{
    m_Ip = value;
    m_IpIsSet = true;
}
bool PacketAnalyzerProtocolCounters::ipIsSet() const
{
    return m_IpIsSet;
}
void PacketAnalyzerProtocolCounters::unsetIp()
{
    m_IpIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_protocol> PacketAnalyzerProtocolCounters::getProtocol() const
{
    return m_Protocol;
}
void PacketAnalyzerProtocolCounters::setProtocol(std::shared_ptr<PacketAnalyzerProtocolCounters_protocol> value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool PacketAnalyzerProtocolCounters::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void PacketAnalyzerProtocolCounters::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_tunnel> PacketAnalyzerProtocolCounters::getTunnel() const
{
    return m_Tunnel;
}
void PacketAnalyzerProtocolCounters::setTunnel(std::shared_ptr<PacketAnalyzerProtocolCounters_tunnel> value)
{
    m_Tunnel = value;
    m_TunnelIsSet = true;
}
bool PacketAnalyzerProtocolCounters::tunnelIsSet() const
{
    return m_TunnelIsSet;
}
void PacketAnalyzerProtocolCounters::unsetTunnel()
{
    m_TunnelIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ethernet> PacketAnalyzerProtocolCounters::getInnerEthernet() const
{
    return m_Inner_ethernet;
}
void PacketAnalyzerProtocolCounters::setInnerEthernet(std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ethernet> value)
{
    m_Inner_ethernet = value;
    m_Inner_ethernetIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerEthernetIsSet() const
{
    return m_Inner_ethernetIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_ethernet()
{
    m_Inner_ethernetIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ip> PacketAnalyzerProtocolCounters::getInnerIp() const
{
    return m_Inner_ip;
}
void PacketAnalyzerProtocolCounters::setInnerIp(std::shared_ptr<PacketAnalyzerProtocolCounters_inner_ip> value)
{
    m_Inner_ip = value;
    m_Inner_ipIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerIpIsSet() const
{
    return m_Inner_ipIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_ip()
{
    m_Inner_ipIsSet = false;
}
std::shared_ptr<PacketAnalyzerProtocolCounters_inner_protocol> PacketAnalyzerProtocolCounters::getInnerProtocol() const
{
    return m_Inner_protocol;
}
void PacketAnalyzerProtocolCounters::setInnerProtocol(std::shared_ptr<PacketAnalyzerProtocolCounters_inner_protocol> value)
{
    m_Inner_protocol = value;
    m_Inner_protocolIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerProtocolIsSet() const
{
    return m_Inner_protocolIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_protocol()
{
    m_Inner_protocolIsSet = false;
}

}
}
}

