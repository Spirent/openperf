/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAnalyzerProtocolCounters.h"

namespace swagger {
namespace v1 {
namespace model {

PacketAnalyzerProtocolCounters::PacketAnalyzerProtocolCounters()
{
    m_EthernetIsSet = false;
    m_IpIsSet = false;
    m_TransportIsSet = false;
    m_TunnelIsSet = false;
    m_Inner_ethernetIsSet = false;
    m_Inner_ipIsSet = false;
    m_Inner_transportIsSet = false;
    
}

PacketAnalyzerProtocolCounters::~PacketAnalyzerProtocolCounters()
{
}

void PacketAnalyzerProtocolCounters::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketAnalyzerProtocolCounters::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EthernetIsSet)
    {
        val["ethernet"] = ModelBase::toJson(m_Ethernet);
    }
    if(m_IpIsSet)
    {
        val["ip"] = ModelBase::toJson(m_Ip);
    }
    if(m_TransportIsSet)
    {
        val["transport"] = ModelBase::toJson(m_Transport);
    }
    if(m_TunnelIsSet)
    {
        val["tunnel"] = ModelBase::toJson(m_Tunnel);
    }
    if(m_Inner_ethernetIsSet)
    {
        val["inner_ethernet"] = ModelBase::toJson(m_Inner_ethernet);
    }
    if(m_Inner_ipIsSet)
    {
        val["inner_ip"] = ModelBase::toJson(m_Inner_ip);
    }
    if(m_Inner_transportIsSet)
    {
        val["inner_transport"] = ModelBase::toJson(m_Inner_transport);
    }
    

    return val;
}

void PacketAnalyzerProtocolCounters::fromJson(nlohmann::json& val)
{
    if(val.find("ethernet") != val.end())
    {
        if(!val["ethernet"].is_null())
        {
            std::shared_ptr<PacketEthernetProtocolCounters> newItem(new PacketEthernetProtocolCounters());
            newItem->fromJson(val["ethernet"]);
            setEthernet( newItem );
        }
        
    }
    if(val.find("ip") != val.end())
    {
        if(!val["ip"].is_null())
        {
            std::shared_ptr<PacketIpProtocolCounters> newItem(new PacketIpProtocolCounters());
            newItem->fromJson(val["ip"]);
            setIp( newItem );
        }
        
    }
    if(val.find("transport") != val.end())
    {
        if(!val["transport"].is_null())
        {
            std::shared_ptr<PacketTransportProtocolCounters> newItem(new PacketTransportProtocolCounters());
            newItem->fromJson(val["transport"]);
            setTransport( newItem );
        }
        
    }
    if(val.find("tunnel") != val.end())
    {
        if(!val["tunnel"].is_null())
        {
            std::shared_ptr<PacketTunnelProtocolCounters> newItem(new PacketTunnelProtocolCounters());
            newItem->fromJson(val["tunnel"]);
            setTunnel( newItem );
        }
        
    }
    if(val.find("inner_ethernet") != val.end())
    {
        if(!val["inner_ethernet"].is_null())
        {
            std::shared_ptr<PacketInnerEthernetProtocolCounters> newItem(new PacketInnerEthernetProtocolCounters());
            newItem->fromJson(val["inner_ethernet"]);
            setInnerEthernet( newItem );
        }
        
    }
    if(val.find("inner_ip") != val.end())
    {
        if(!val["inner_ip"].is_null())
        {
            std::shared_ptr<PacketInnerIpProtocolCounters> newItem(new PacketInnerIpProtocolCounters());
            newItem->fromJson(val["inner_ip"]);
            setInnerIp( newItem );
        }
        
    }
    if(val.find("inner_transport") != val.end())
    {
        if(!val["inner_transport"].is_null())
        {
            std::shared_ptr<PacketInnerTransportProtocolCounters> newItem(new PacketInnerTransportProtocolCounters());
            newItem->fromJson(val["inner_transport"]);
            setInnerTransport( newItem );
        }
        
    }
    
}


std::shared_ptr<PacketEthernetProtocolCounters> PacketAnalyzerProtocolCounters::getEthernet() const
{
    return m_Ethernet;
}
void PacketAnalyzerProtocolCounters::setEthernet(std::shared_ptr<PacketEthernetProtocolCounters> value)
{
    m_Ethernet = value;
    m_EthernetIsSet = true;
}
bool PacketAnalyzerProtocolCounters::ethernetIsSet() const
{
    return m_EthernetIsSet;
}
void PacketAnalyzerProtocolCounters::unsetEthernet()
{
    m_EthernetIsSet = false;
}
std::shared_ptr<PacketIpProtocolCounters> PacketAnalyzerProtocolCounters::getIp() const
{
    return m_Ip;
}
void PacketAnalyzerProtocolCounters::setIp(std::shared_ptr<PacketIpProtocolCounters> value)
{
    m_Ip = value;
    m_IpIsSet = true;
}
bool PacketAnalyzerProtocolCounters::ipIsSet() const
{
    return m_IpIsSet;
}
void PacketAnalyzerProtocolCounters::unsetIp()
{
    m_IpIsSet = false;
}
std::shared_ptr<PacketTransportProtocolCounters> PacketAnalyzerProtocolCounters::getTransport() const
{
    return m_Transport;
}
void PacketAnalyzerProtocolCounters::setTransport(std::shared_ptr<PacketTransportProtocolCounters> value)
{
    m_Transport = value;
    m_TransportIsSet = true;
}
bool PacketAnalyzerProtocolCounters::transportIsSet() const
{
    return m_TransportIsSet;
}
void PacketAnalyzerProtocolCounters::unsetTransport()
{
    m_TransportIsSet = false;
}
std::shared_ptr<PacketTunnelProtocolCounters> PacketAnalyzerProtocolCounters::getTunnel() const
{
    return m_Tunnel;
}
void PacketAnalyzerProtocolCounters::setTunnel(std::shared_ptr<PacketTunnelProtocolCounters> value)
{
    m_Tunnel = value;
    m_TunnelIsSet = true;
}
bool PacketAnalyzerProtocolCounters::tunnelIsSet() const
{
    return m_TunnelIsSet;
}
void PacketAnalyzerProtocolCounters::unsetTunnel()
{
    m_TunnelIsSet = false;
}
std::shared_ptr<PacketInnerEthernetProtocolCounters> PacketAnalyzerProtocolCounters::getInnerEthernet() const
{
    return m_Inner_ethernet;
}
void PacketAnalyzerProtocolCounters::setInnerEthernet(std::shared_ptr<PacketInnerEthernetProtocolCounters> value)
{
    m_Inner_ethernet = value;
    m_Inner_ethernetIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerEthernetIsSet() const
{
    return m_Inner_ethernetIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_ethernet()
{
    m_Inner_ethernetIsSet = false;
}
std::shared_ptr<PacketInnerIpProtocolCounters> PacketAnalyzerProtocolCounters::getInnerIp() const
{
    return m_Inner_ip;
}
void PacketAnalyzerProtocolCounters::setInnerIp(std::shared_ptr<PacketInnerIpProtocolCounters> value)
{
    m_Inner_ip = value;
    m_Inner_ipIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerIpIsSet() const
{
    return m_Inner_ipIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_ip()
{
    m_Inner_ipIsSet = false;
}
std::shared_ptr<PacketInnerTransportProtocolCounters> PacketAnalyzerProtocolCounters::getInnerTransport() const
{
    return m_Inner_transport;
}
void PacketAnalyzerProtocolCounters::setInnerTransport(std::shared_ptr<PacketInnerTransportProtocolCounters> value)
{
    m_Inner_transport = value;
    m_Inner_transportIsSet = true;
}
bool PacketAnalyzerProtocolCounters::innerTransportIsSet() const
{
    return m_Inner_transportIsSet;
}
void PacketAnalyzerProtocolCounters::unsetInner_transport()
{
    m_Inner_transportIsSet = false;
}

}
}
}

