/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "AnalyzerStreamCounters_sequence.h"

namespace swagger {
namespace v1 {
namespace model {

AnalyzerStreamCounters_sequence::AnalyzerStreamCounters_sequence()
{
    m_Dropped = 0L;
    m_Duplicate = 0L;
    m_Late = 0L;
    m_Reordered = 0L;
    m_In_order = 0L;
    m_Run_length = 0L;
    
}

AnalyzerStreamCounters_sequence::~AnalyzerStreamCounters_sequence()
{
}

void AnalyzerStreamCounters_sequence::validate()
{
    // TODO: implement validation
}

nlohmann::json AnalyzerStreamCounters_sequence::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["dropped"] = m_Dropped;
    val["duplicate"] = m_Duplicate;
    val["late"] = m_Late;
    val["reordered"] = m_Reordered;
    val["in_order"] = m_In_order;
    val["run_length"] = m_Run_length;
    

    return val;
}

void AnalyzerStreamCounters_sequence::fromJson(nlohmann::json& val)
{
    setDropped(val.at("dropped"));
    setDuplicate(val.at("duplicate"));
    setLate(val.at("late"));
    setReordered(val.at("reordered"));
    setInOrder(val.at("in_order"));
    setRunLength(val.at("run_length"));
    
}


int64_t AnalyzerStreamCounters_sequence::getDropped() const
{
    return m_Dropped;
}
void AnalyzerStreamCounters_sequence::setDropped(int64_t value)
{
    m_Dropped = value;
    
}
int64_t AnalyzerStreamCounters_sequence::getDuplicate() const
{
    return m_Duplicate;
}
void AnalyzerStreamCounters_sequence::setDuplicate(int64_t value)
{
    m_Duplicate = value;
    
}
int64_t AnalyzerStreamCounters_sequence::getLate() const
{
    return m_Late;
}
void AnalyzerStreamCounters_sequence::setLate(int64_t value)
{
    m_Late = value;
    
}
int64_t AnalyzerStreamCounters_sequence::getReordered() const
{
    return m_Reordered;
}
void AnalyzerStreamCounters_sequence::setReordered(int64_t value)
{
    m_Reordered = value;
    
}
int64_t AnalyzerStreamCounters_sequence::getInOrder() const
{
    return m_In_order;
}
void AnalyzerStreamCounters_sequence::setInOrder(int64_t value)
{
    m_In_order = value;
    
}
int64_t AnalyzerStreamCounters_sequence::getRunLength() const
{
    return m_Run_length;
}
void AnalyzerStreamCounters_sequence::setRunLength(int64_t value)
{
    m_Run_length = value;
    
}

}
}
}

