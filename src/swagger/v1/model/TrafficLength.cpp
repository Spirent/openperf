/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TrafficLength.h"

namespace swagger {
namespace v1 {
namespace model {

TrafficLength::TrafficLength()
{
    m_Fixed = 0;
    m_FixedIsSet = false;
    m_ListIsSet = false;
    m_SequenceIsSet = false;
    
}

TrafficLength::~TrafficLength()
{
}

void TrafficLength::validate()
{
    // TODO: implement validation
}

nlohmann::json TrafficLength::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_FixedIsSet)
    {
        val["fixed"] = m_Fixed;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_List )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["list"] = jsonArray;
        }
    }
    if(m_SequenceIsSet)
    {
        val["sequence"] = ModelBase::toJson(m_Sequence);
    }
    

    return val;
}

void TrafficLength::fromJson(nlohmann::json& val)
{
    if(val.find("fixed") != val.end())
    {
        setFixed(val.at("fixed"));
    }
    {
        m_List.clear();
        nlohmann::json jsonArray;
        if(val.find("list") != val.end())
        {
        for( auto& item : val["list"] )
        {
            m_List.push_back(item);
            
        }
        }
    }
    if(val.find("sequence") != val.end())
    {
        if(!val["sequence"].is_null())
        {
            std::shared_ptr<TrafficLength_sequence> newItem(new TrafficLength_sequence());
            newItem->fromJson(val["sequence"]);
            setSequence( newItem );
        }
        
    }
    
}


int32_t TrafficLength::getFixed() const
{
    return m_Fixed;
}
void TrafficLength::setFixed(int32_t value)
{
    m_Fixed = value;
    m_FixedIsSet = true;
}
bool TrafficLength::fixedIsSet() const
{
    return m_FixedIsSet;
}
void TrafficLength::unsetFixed()
{
    m_FixedIsSet = false;
}
std::vector<int32_t>& TrafficLength::getList()
{
    return m_List;
}
bool TrafficLength::listIsSet() const
{
    return m_ListIsSet;
}
void TrafficLength::unsetList()
{
    m_ListIsSet = false;
}
std::shared_ptr<TrafficLength_sequence> TrafficLength::getSequence() const
{
    return m_Sequence;
}
void TrafficLength::setSequence(std::shared_ptr<TrafficLength_sequence> value)
{
    m_Sequence = value;
    m_SequenceIsSet = true;
}
bool TrafficLength::sequenceIsSet() const
{
    return m_SequenceIsSet;
}
void TrafficLength::unsetSequence()
{
    m_SequenceIsSet = false;
}

}
}
}

