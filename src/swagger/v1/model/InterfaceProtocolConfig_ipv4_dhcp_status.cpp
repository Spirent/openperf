/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "InterfaceProtocolConfig_ipv4_dhcp_status.h"

namespace swagger {
namespace v1 {
namespace model {

InterfaceProtocolConfig_ipv4_dhcp_status::InterfaceProtocolConfig_ipv4_dhcp_status()
{
    m_Address = "";
    m_AddressIsSet = false;
    m_Prefix_length = 0;
    m_Prefix_lengthIsSet = false;
    m_Gateway = "";
    m_GatewayIsSet = false;
    m_State = "";
    m_StateIsSet = false;
    
}

InterfaceProtocolConfig_ipv4_dhcp_status::~InterfaceProtocolConfig_ipv4_dhcp_status()
{
}

void InterfaceProtocolConfig_ipv4_dhcp_status::validate()
{
    // TODO: implement validation
}

nlohmann::json InterfaceProtocolConfig_ipv4_dhcp_status::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AddressIsSet)
    {
        val["address"] = ModelBase::toJson(m_Address);
    }
    if(m_Prefix_lengthIsSet)
    {
        val["prefix_length"] = m_Prefix_length;
    }
    if(m_GatewayIsSet)
    {
        val["gateway"] = ModelBase::toJson(m_Gateway);
    }
    if(m_StateIsSet)
    {
        val["state"] = ModelBase::toJson(m_State);
    }
    

    return val;
}

void InterfaceProtocolConfig_ipv4_dhcp_status::fromJson(nlohmann::json& val)
{
    if(val.find("address") != val.end())
    {
        setAddress(val.at("address"));
        
    }
    if(val.find("prefix_length") != val.end())
    {
        setPrefixLength(val.at("prefix_length"));
    }
    if(val.find("gateway") != val.end())
    {
        setGateway(val.at("gateway"));
        
    }
    if(val.find("state") != val.end())
    {
        setState(val.at("state"));
        
    }
    
}


std::string InterfaceProtocolConfig_ipv4_dhcp_status::getAddress() const
{
    return m_Address;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::setAddress(std::string value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool InterfaceProtocolConfig_ipv4_dhcp_status::addressIsSet() const
{
    return m_AddressIsSet;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::unsetAddress()
{
    m_AddressIsSet = false;
}
int32_t InterfaceProtocolConfig_ipv4_dhcp_status::getPrefixLength() const
{
    return m_Prefix_length;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::setPrefixLength(int32_t value)
{
    m_Prefix_length = value;
    m_Prefix_lengthIsSet = true;
}
bool InterfaceProtocolConfig_ipv4_dhcp_status::prefixLengthIsSet() const
{
    return m_Prefix_lengthIsSet;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::unsetPrefix_length()
{
    m_Prefix_lengthIsSet = false;
}
std::string InterfaceProtocolConfig_ipv4_dhcp_status::getGateway() const
{
    return m_Gateway;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::setGateway(std::string value)
{
    m_Gateway = value;
    m_GatewayIsSet = true;
}
bool InterfaceProtocolConfig_ipv4_dhcp_status::gatewayIsSet() const
{
    return m_GatewayIsSet;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::unsetGateway()
{
    m_GatewayIsSet = false;
}
std::string InterfaceProtocolConfig_ipv4_dhcp_status::getState() const
{
    return m_State;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::setState(std::string value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool InterfaceProtocolConfig_ipv4_dhcp_status::stateIsSet() const
{
    return m_StateIsSet;
}
void InterfaceProtocolConfig_ipv4_dhcp_status::unsetState()
{
    m_StateIsSet = false;
}

}
}
}

