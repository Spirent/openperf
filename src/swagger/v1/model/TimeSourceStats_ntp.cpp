/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TimeSourceStats_ntp.h"

namespace swagger {
namespace v1 {
namespace model {

TimeSourceStats_ntp::TimeSourceStats_ntp()
{
    m_Last_rx_accepted = "";
    m_Last_rx_acceptedIsSet = false;
    m_Last_rx_ignored = "";
    m_Last_rx_ignoredIsSet = false;
    m_Poll_period = 0L;
    m_Rx_ignored = 0L;
    m_Rx_packets = 0L;
    m_Tx_packets = 0L;
    m_Stratum = 0;
    m_StratumIsSet = false;
    
}

TimeSourceStats_ntp::~TimeSourceStats_ntp()
{
}

void TimeSourceStats_ntp::validate()
{
    // TODO: implement validation
}

nlohmann::json TimeSourceStats_ntp::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Last_rx_acceptedIsSet)
    {
        val["last_rx_accepted"] = ModelBase::toJson(m_Last_rx_accepted);
    }
    if(m_Last_rx_ignoredIsSet)
    {
        val["last_rx_ignored"] = ModelBase::toJson(m_Last_rx_ignored);
    }
    val["poll_period"] = m_Poll_period;
    val["rx_ignored"] = m_Rx_ignored;
    val["rx_packets"] = m_Rx_packets;
    val["tx_packets"] = m_Tx_packets;
    if(m_StratumIsSet)
    {
        val["stratum"] = m_Stratum;
    }
    

    return val;
}

void TimeSourceStats_ntp::fromJson(nlohmann::json& val)
{
    if(val.find("last_rx_accepted") != val.end())
    {
        setLastRxAccepted(val.at("last_rx_accepted"));
        
    }
    if(val.find("last_rx_ignored") != val.end())
    {
        setLastRxIgnored(val.at("last_rx_ignored"));
        
    }
    setPollPeriod(val.at("poll_period"));
    setRxIgnored(val.at("rx_ignored"));
    setRxPackets(val.at("rx_packets"));
    setTxPackets(val.at("tx_packets"));
    if(val.find("stratum") != val.end())
    {
        setStratum(val.at("stratum"));
    }
    
}


std::string TimeSourceStats_ntp::getLastRxAccepted() const
{
    return m_Last_rx_accepted;
}
void TimeSourceStats_ntp::setLastRxAccepted(std::string value)
{
    m_Last_rx_accepted = value;
    m_Last_rx_acceptedIsSet = true;
}
bool TimeSourceStats_ntp::lastRxAcceptedIsSet() const
{
    return m_Last_rx_acceptedIsSet;
}
void TimeSourceStats_ntp::unsetLast_rx_accepted()
{
    m_Last_rx_acceptedIsSet = false;
}
std::string TimeSourceStats_ntp::getLastRxIgnored() const
{
    return m_Last_rx_ignored;
}
void TimeSourceStats_ntp::setLastRxIgnored(std::string value)
{
    m_Last_rx_ignored = value;
    m_Last_rx_ignoredIsSet = true;
}
bool TimeSourceStats_ntp::lastRxIgnoredIsSet() const
{
    return m_Last_rx_ignoredIsSet;
}
void TimeSourceStats_ntp::unsetLast_rx_ignored()
{
    m_Last_rx_ignoredIsSet = false;
}
int64_t TimeSourceStats_ntp::getPollPeriod() const
{
    return m_Poll_period;
}
void TimeSourceStats_ntp::setPollPeriod(int64_t value)
{
    m_Poll_period = value;
    
}
int64_t TimeSourceStats_ntp::getRxIgnored() const
{
    return m_Rx_ignored;
}
void TimeSourceStats_ntp::setRxIgnored(int64_t value)
{
    m_Rx_ignored = value;
    
}
int64_t TimeSourceStats_ntp::getRxPackets() const
{
    return m_Rx_packets;
}
void TimeSourceStats_ntp::setRxPackets(int64_t value)
{
    m_Rx_packets = value;
    
}
int64_t TimeSourceStats_ntp::getTxPackets() const
{
    return m_Tx_packets;
}
void TimeSourceStats_ntp::setTxPackets(int64_t value)
{
    m_Tx_packets = value;
    
}
int32_t TimeSourceStats_ntp::getStratum() const
{
    return m_Stratum;
}
void TimeSourceStats_ntp::setStratum(int32_t value)
{
    m_Stratum = value;
    m_StratumIsSet = true;
}
bool TimeSourceStats_ntp::stratumIsSet() const
{
    return m_StratumIsSet;
}
void TimeSourceStats_ntp::unsetStratum()
{
    m_StratumIsSet = false;
}

}
}
}

