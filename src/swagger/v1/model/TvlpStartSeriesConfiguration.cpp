/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "TvlpStartSeriesConfiguration.h"

namespace swagger {
namespace v1 {
namespace model {

TvlpStartSeriesConfiguration::TvlpStartSeriesConfiguration()
{
    m_Load_scale = 0.0;
    m_Load_scaleIsSet = false;
    m_Time_scale = 0.0;
    m_Time_scaleIsSet = false;
    m_Start_time = "";
    m_Start_timeIsSet = false;
    m_Dynamic_resultsIsSet = false;
    
}

TvlpStartSeriesConfiguration::~TvlpStartSeriesConfiguration()
{
}

void TvlpStartSeriesConfiguration::validate()
{
    // TODO: implement validation
}

nlohmann::json TvlpStartSeriesConfiguration::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Load_scaleIsSet)
    {
        val["load_scale"] = m_Load_scale;
    }
    if(m_Time_scaleIsSet)
    {
        val["time_scale"] = m_Time_scale;
    }
    if(m_Start_timeIsSet)
    {
        val["start_time"] = ModelBase::toJson(m_Start_time);
    }
    if(m_Dynamic_resultsIsSet)
    {
        val["dynamic_results"] = ModelBase::toJson(m_Dynamic_results);
    }
    

    return val;
}

void TvlpStartSeriesConfiguration::fromJson(nlohmann::json& val)
{
    if(val.find("load_scale") != val.end())
    {
        setLoadScale(val.at("load_scale"));
    }
    if(val.find("time_scale") != val.end())
    {
        setTimeScale(val.at("time_scale"));
    }
    if(val.find("start_time") != val.end())
    {
        setStartTime(val.at("start_time"));
        
    }
    if(val.find("dynamic_results") != val.end())
    {
        if(!val["dynamic_results"].is_null())
        {
            std::shared_ptr<DynamicResultsConfig> newItem(new DynamicResultsConfig());
            newItem->fromJson(val["dynamic_results"]);
            setDynamicResults( newItem );
        }
        
    }
    
}


double TvlpStartSeriesConfiguration::getLoadScale() const
{
    return m_Load_scale;
}
void TvlpStartSeriesConfiguration::setLoadScale(double value)
{
    m_Load_scale = value;
    m_Load_scaleIsSet = true;
}
bool TvlpStartSeriesConfiguration::loadScaleIsSet() const
{
    return m_Load_scaleIsSet;
}
void TvlpStartSeriesConfiguration::unsetLoad_scale()
{
    m_Load_scaleIsSet = false;
}
double TvlpStartSeriesConfiguration::getTimeScale() const
{
    return m_Time_scale;
}
void TvlpStartSeriesConfiguration::setTimeScale(double value)
{
    m_Time_scale = value;
    m_Time_scaleIsSet = true;
}
bool TvlpStartSeriesConfiguration::timeScaleIsSet() const
{
    return m_Time_scaleIsSet;
}
void TvlpStartSeriesConfiguration::unsetTime_scale()
{
    m_Time_scaleIsSet = false;
}
std::string TvlpStartSeriesConfiguration::getStartTime() const
{
    return m_Start_time;
}
void TvlpStartSeriesConfiguration::setStartTime(std::string value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}
bool TvlpStartSeriesConfiguration::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}
void TvlpStartSeriesConfiguration::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
std::shared_ptr<DynamicResultsConfig> TvlpStartSeriesConfiguration::getDynamicResults() const
{
    return m_Dynamic_results;
}
void TvlpStartSeriesConfiguration::setDynamicResults(std::shared_ptr<DynamicResultsConfig> value)
{
    m_Dynamic_results = value;
    m_Dynamic_resultsIsSet = true;
}
bool TvlpStartSeriesConfiguration::dynamicResultsIsSet() const
{
    return m_Dynamic_resultsIsSet;
}
void TvlpStartSeriesConfiguration::unsetDynamic_results()
{
    m_Dynamic_resultsIsSet = false;
}

}
}
}

