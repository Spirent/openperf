/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "ThresholdResult.h"

namespace swagger {
namespace v1 {
namespace model {

ThresholdResult::ThresholdResult()
{
    m_Id = "";
    m_Value = 0.0;
    m_Function = "";
    m_Condition = "";
    m_Stat_x = "";
    m_Stat_y = "";
    m_Stat_yIsSet = false;
    m_Condition_true = 0;
    m_Condition_false = 0;
    
}

ThresholdResult::~ThresholdResult()
{
}

void ThresholdResult::validate()
{
    // TODO: implement validation
}

nlohmann::json ThresholdResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["value"] = m_Value;
    val["function"] = ModelBase::toJson(m_Function);
    val["condition"] = ModelBase::toJson(m_Condition);
    val["stat_x"] = ModelBase::toJson(m_Stat_x);
    if(m_Stat_yIsSet)
    {
        val["stat_y"] = ModelBase::toJson(m_Stat_y);
    }
    val["condition_true"] = m_Condition_true;
    val["condition_false"] = m_Condition_false;
    

    return val;
}

void ThresholdResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setValue(val.at("value"));
    setFunction(val.at("function"));
    setCondition(val.at("condition"));
    setStatX(val.at("stat_x"));
    if(val.find("stat_y") != val.end())
    {
        setStatY(val.at("stat_y"));
        
    }
    setConditionTrue(val.at("condition_true"));
    setConditionFalse(val.at("condition_false"));
    
}


std::string ThresholdResult::getId() const
{
    return m_Id;
}
void ThresholdResult::setId(std::string value)
{
    m_Id = value;
    
}
double ThresholdResult::getValue() const
{
    return m_Value;
}
void ThresholdResult::setValue(double value)
{
    m_Value = value;
    
}
std::string ThresholdResult::getFunction() const
{
    return m_Function;
}
void ThresholdResult::setFunction(std::string value)
{
    m_Function = value;
    
}
std::string ThresholdResult::getCondition() const
{
    return m_Condition;
}
void ThresholdResult::setCondition(std::string value)
{
    m_Condition = value;
    
}
std::string ThresholdResult::getStatX() const
{
    return m_Stat_x;
}
void ThresholdResult::setStatX(std::string value)
{
    m_Stat_x = value;
    
}
std::string ThresholdResult::getStatY() const
{
    return m_Stat_y;
}
void ThresholdResult::setStatY(std::string value)
{
    m_Stat_y = value;
    m_Stat_yIsSet = true;
}
bool ThresholdResult::statYIsSet() const
{
    return m_Stat_yIsSet;
}
void ThresholdResult::unsetStat_y()
{
    m_Stat_yIsSet = false;
}
int32_t ThresholdResult::getConditionTrue() const
{
    return m_Condition_true;
}
void ThresholdResult::setConditionTrue(int32_t value)
{
    m_Condition_true = value;
    
}
int32_t ThresholdResult::getConditionFalse() const
{
    return m_Condition_false;
}
void ThresholdResult::setConditionFalse(int32_t value)
{
    m_Condition_false = value;
    
}

}
}
}

