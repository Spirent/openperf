/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "AnalyzerProtocolCounters_ip.h"

namespace swagger {
namespace v1 {
namespace model {

AnalyzerProtocolCounters_ip::AnalyzerProtocolCounters_ip()
{
    m_Ipv4 = 0L;
    m_Ipv4_ext = 0L;
    m_Ipv4_ext_unknown = 0L;
    m_Ipv6 = 0L;
    m_Ipv6_ext = 0L;
    m_Ipv6_ext_unknown = 0L;
    
}

AnalyzerProtocolCounters_ip::~AnalyzerProtocolCounters_ip()
{
}

void AnalyzerProtocolCounters_ip::validate()
{
    // TODO: implement validation
}

nlohmann::json AnalyzerProtocolCounters_ip::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["ipv4"] = m_Ipv4;
    val["ipv4_ext"] = m_Ipv4_ext;
    val["ipv4_ext_unknown"] = m_Ipv4_ext_unknown;
    val["ipv6"] = m_Ipv6;
    val["ipv6_ext"] = m_Ipv6_ext;
    val["ipv6_ext_unknown"] = m_Ipv6_ext_unknown;
    

    return val;
}

void AnalyzerProtocolCounters_ip::fromJson(nlohmann::json& val)
{
    setIpv4(val.at("ipv4"));
    setIpv4Ext(val.at("ipv4_ext"));
    setIpv4ExtUnknown(val.at("ipv4_ext_unknown"));
    setIpv6(val.at("ipv6"));
    setIpv6Ext(val.at("ipv6_ext"));
    setIpv6ExtUnknown(val.at("ipv6_ext_unknown"));
    
}


int64_t AnalyzerProtocolCounters_ip::getIpv4() const
{
    return m_Ipv4;
}
void AnalyzerProtocolCounters_ip::setIpv4(int64_t value)
{
    m_Ipv4 = value;
    
}
int64_t AnalyzerProtocolCounters_ip::getIpv4Ext() const
{
    return m_Ipv4_ext;
}
void AnalyzerProtocolCounters_ip::setIpv4Ext(int64_t value)
{
    m_Ipv4_ext = value;
    
}
int64_t AnalyzerProtocolCounters_ip::getIpv4ExtUnknown() const
{
    return m_Ipv4_ext_unknown;
}
void AnalyzerProtocolCounters_ip::setIpv4ExtUnknown(int64_t value)
{
    m_Ipv4_ext_unknown = value;
    
}
int64_t AnalyzerProtocolCounters_ip::getIpv6() const
{
    return m_Ipv6;
}
void AnalyzerProtocolCounters_ip::setIpv6(int64_t value)
{
    m_Ipv6 = value;
    
}
int64_t AnalyzerProtocolCounters_ip::getIpv6Ext() const
{
    return m_Ipv6_ext;
}
void AnalyzerProtocolCounters_ip::setIpv6Ext(int64_t value)
{
    m_Ipv6_ext = value;
    
}
int64_t AnalyzerProtocolCounters_ip::getIpv6ExtUnknown() const
{
    return m_Ipv6_ext_unknown;
}
void AnalyzerProtocolCounters_ip::setIpv6ExtUnknown(int64_t value)
{
    m_Ipv6_ext_unknown = value;
    
}

}
}
}

