/**
 * IPv6 implementation for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "ipv6.hpp"

namespace packet::protocol {

/**
 * IPv6 getter implementations
 **/

uint32_t get_ipv6_version(const ipv6& header) noexcept
{
    auto tmp = header.version_traffic_class_flow_label.load<uint32_t>() & 0xf0000000;
    tmp >>= 28;
    return (tmp);
}

uint32_t get_ipv6_traffic_class(const ipv6& header) noexcept
{
    auto tmp = header.version_traffic_class_flow_label.load<uint32_t>() & 0xff00000;
    tmp >>= 20;
    return (tmp);
}

uint32_t get_ipv6_flow_label(const ipv6& header) noexcept
{
    auto tmp = header.version_traffic_class_flow_label.load<uint32_t>() & 0xfffff;
    return (tmp);
}

uint16_t get_ipv6_payload_length(const ipv6& header) noexcept
{
    return (header.payload_length.load());
}

uint8_t get_ipv6_next_header(const ipv6& header) noexcept
{
    auto tmp = header.next_header.load<uint8_t>();
    return (tmp);
}

uint8_t get_ipv6_hop_limit(const ipv6& header) noexcept
{
    return (header.hop_limit.load());
}

const type::ipv6_address& get_ipv6_source(const ipv6& header) noexcept
{
    return (header.source);
}

const type::ipv6_address& get_ipv6_destination(const ipv6& header) noexcept
{
    return (header.destination);
}

/**
 * IPv6 setter implementations
 **/

void set_ipv6_version(ipv6& header, uint32_t value) noexcept
{
    value <<= 28;
    header.version_traffic_class_flow_label.store(static_cast<uint32_t>(((value & 0xf0000000) | (header.version_traffic_class_flow_label.load<uint32_t>() & ~0xf0000000))));
}

void set_ipv6_traffic_class(ipv6& header, uint32_t value) noexcept
{
    value <<= 20;
    header.version_traffic_class_flow_label.store(static_cast<uint32_t>(((value & 0xff00000) | (header.version_traffic_class_flow_label.load<uint32_t>() & ~0xff00000))));
}

void set_ipv6_flow_label(ipv6& header, uint32_t value) noexcept
{
    header.version_traffic_class_flow_label.store(static_cast<uint32_t>(((value & 0xfffff) | (header.version_traffic_class_flow_label.load<uint32_t>() & ~0xfffff))));
}

void set_ipv6_payload_length(ipv6& header, uint16_t value) noexcept
{
    header.payload_length = value;
}

void set_ipv6_next_header(ipv6& header, uint8_t value) noexcept
{
    header.next_header.store(value);
}

void set_ipv6_hop_limit(ipv6& header, uint8_t value) noexcept
{
    header.hop_limit = value;
}

void set_ipv6_source(ipv6& header, const type::ipv6_address& value) noexcept
{
    header.source = value;
}

void set_ipv6_source(ipv6& header, type::ipv6_address&& value) noexcept
{
    set_ipv6_source(header, value);
}

void set_ipv6_destination(ipv6& header, const type::ipv6_address& value) noexcept
{
    header.destination = value;
}

void set_ipv6_destination(ipv6& header, type::ipv6_address&& value) noexcept
{
    set_ipv6_destination(header, value);
}

}
