/**
 * Ethernet implementation for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "ethernet.hpp"

namespace libpacket::protocol {

/**
 * Ethernet getter implementations
 **/

const type::mac_address& get_ethernet_destination(const ethernet& header) noexcept
{
    return (header.destination);
}

const type::mac_address& get_ethernet_source(const ethernet& header) noexcept
{
    return (header.source);
}

uint16_t get_ethernet_ether_type(const ethernet& header) noexcept
{
    auto tmp = header.ether_type.load<uint16_t>();
    return (tmp);
}

/**
 * Ethernet setter implementations
 **/

void set_ethernet_destination(ethernet& header, const type::mac_address& value) noexcept
{
    header.destination = value;
}

void set_ethernet_destination(ethernet& header, type::mac_address&& value) noexcept
{
    set_ethernet_destination(header, value);
}

void set_ethernet_source(ethernet& header, const type::mac_address& value) noexcept
{
    header.source = value;
}

void set_ethernet_source(ethernet& header, type::mac_address&& value) noexcept
{
    set_ethernet_source(header, value);
}

void set_ethernet_ether_type(ethernet& header, uint16_t value) noexcept
{
    header.ether_type.store(value);
}

/**
 * Ethernet field translate implementation
 **/

template <typename Key, typename Value, typename... Pairs>
constexpr auto associative_array(Pairs&&... pairs)
    -> std::array<std::pair<Key, Value>, sizeof... (pairs)>
{
    return {{std::forward<Pairs>(pairs)...}};
}

enum ethernet::field_name ethernet::get_field_name(std::string_view name) noexcept
{
    constexpr auto field_names = associative_array<std::string_view, ethernet::field_name>(
        std::pair("destination", ethernet::field_name::destination),
        std::pair("source", ethernet::field_name::source),
        std::pair("ether_type", ethernet::field_name::ether_type));

    auto cursor = std::begin(field_names), end = std::end(field_names);
    while (cursor != end) {
        if (cursor->first == name) return (cursor->second);
        cursor++;
    }

    return (ethernet::field_name::none);
}

const std::type_info& ethernet::get_field_type(ethernet::field_name field) noexcept
{
    switch (field) {
        case ethernet::field_name::destination:
            return (typeid(type::mac_address));
        case ethernet::field_name::source:
            return (typeid(type::mac_address));
        case ethernet::field_name::ether_type:
            return (typeid(uint16_t));
        default:
            return (typeid(nullptr));
    }
}

}
