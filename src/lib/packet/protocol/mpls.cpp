/**
 * MPLS implementation for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "mpls.hpp"

namespace packet::protocol {

/**
 * MPLS getter implementations
 **/

uint32_t get_mpls_label(const mpls& header) noexcept
{
    auto tmp = header.label_traffic_class_bottom_of_stack.load<uint32_t>() & 0xfffff0;
    tmp >>= 4;
    return (tmp);
}

uint32_t get_mpls_traffic_class(const mpls& header) noexcept
{
    auto tmp = header.label_traffic_class_bottom_of_stack.load<uint32_t>() & 0xe;
    tmp >>= 1;
    return (tmp);
}

bool get_mpls_bottom_of_stack(const mpls& header) noexcept
{
    auto tmp = header.label_traffic_class_bottom_of_stack.load<uint32_t>() & 0x1;
    return (static_cast<bool>(tmp));
}

uint8_t get_mpls_ttl(const mpls& header) noexcept
{
    return (header.ttl.load());
}

/**
 * MPLS setter implementations
 **/

void set_mpls_label(mpls& header, uint32_t value) noexcept
{
    value <<= 4;
    header.label_traffic_class_bottom_of_stack.store(static_cast<uint32_t>(((value & 0xfffff0) | (header.label_traffic_class_bottom_of_stack.load<uint32_t>() & ~0xfffff0))));
}

void set_mpls_traffic_class(mpls& header, uint32_t value) noexcept
{
    value <<= 1;
    header.label_traffic_class_bottom_of_stack.store(static_cast<uint32_t>(((value & 0xe) | (header.label_traffic_class_bottom_of_stack.load<uint32_t>() & ~0xe))));
}

void set_mpls_bottom_of_stack(mpls& header, bool value) noexcept
{
    auto tmp = static_cast<uint32_t>(value);
    header.label_traffic_class_bottom_of_stack.store(static_cast<uint32_t>(((tmp & 0x1) | (header.label_traffic_class_bottom_of_stack.load<uint32_t>() & ~0x1))));
}

void set_mpls_ttl(mpls& header, uint8_t value) noexcept
{
    header.ttl = value;
}

}
