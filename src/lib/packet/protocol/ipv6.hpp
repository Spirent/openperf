#ifndef _LIB_PACKET_PROTOCOL_IPV6_HPP_
#define _LIB_PACKET_PROTOCOL_IPV6_HPP_

/**
 * IPv6 header for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "packet/type/endian.hpp"
#include "packet/type/ipv6_address.hpp"

namespace packet::protocol {

struct ipv6
{
    static constexpr uint16_t protocol_length = 40;

    type::endian::field<4> version_traffic_class_flow_label;
    type::endian::number<uint16_t> payload_length;
    type::endian::field<1> next_header;
    type::endian::number<uint8_t> hop_limit;
    type::ipv6_address source;
    type::ipv6_address destination;
};

/**
 * IPv6 get functions
 **/

uint32_t get_ipv6_version(const ipv6& header) noexcept;
uint32_t get_ipv6_traffic_class(const ipv6& header) noexcept;
uint32_t get_ipv6_flow_label(const ipv6& header) noexcept;
uint16_t get_ipv6_payload_length(const ipv6& header) noexcept;
uint8_t get_ipv6_next_header(const ipv6& header) noexcept;
uint8_t get_ipv6_hop_limit(const ipv6& header) noexcept;
const type::ipv6_address& get_ipv6_source(const ipv6& header) noexcept;
const type::ipv6_address& get_ipv6_destination(const ipv6& header) noexcept;

/**
 * IPv6 set functions
 **/

void set_ipv6_version(ipv6& header, uint32_t value) noexcept;
void set_ipv6_traffic_class(ipv6& header, uint32_t value) noexcept;
void set_ipv6_flow_label(ipv6& header, uint32_t value) noexcept;
void set_ipv6_payload_length(ipv6& header, uint16_t value) noexcept;
void set_ipv6_next_header(ipv6& header, uint8_t value) noexcept;
void set_ipv6_hop_limit(ipv6& header, uint8_t value) noexcept;
void set_ipv6_source(ipv6& header, const type::ipv6_address& value) noexcept;
void set_ipv6_source(ipv6& header, type::ipv6_address&& value) noexcept;
void set_ipv6_destination(ipv6& header, const type::ipv6_address& value) noexcept;
void set_ipv6_destination(ipv6& header, type::ipv6_address&& value) noexcept;

}

#endif /* _LIB_PACKET_PROTOCOL_IPV6_HPP_ */
