#ifndef _LIB_PACKET_PROTOCOL_UDP_HPP_
#define _LIB_PACKET_PROTOCOL_UDP_HPP_

/**
 * udp header for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include <type_traits>
#include "packet/type/endian.hpp"

namespace libpacket::protocol {

struct udp
{
    static constexpr size_t protocol_field_count = 4;
    static constexpr uint16_t protocol_length = 8;
    static constexpr std::string_view protocol_name = "udp";

    enum class field_name
    {
        none,
        source,
        destination,
        length,
        checksum,
    };

    type::endian::number<uint16_t> source;
    type::endian::number<uint16_t> destination;
    type::endian::number<uint16_t> length;
    type::endian::field<2> checksum;

    static enum udp::field_name get_field_name(std::string_view name) noexcept;
    static const std::type_info& get_field_type(field_name field) noexcept;

    template <typename Value>
    void set_field(enum field_name field, Value value) noexcept;
};

/**
 * udp get functions
 **/

uint16_t get_udp_source(const udp& header) noexcept;
uint16_t get_udp_destination(const udp& header) noexcept;
uint16_t get_udp_length(const udp& header) noexcept;
uint16_t get_udp_checksum(const udp& header) noexcept;

/**
 * udp set functions
 **/

void set_udp_defaults(udp& header) noexcept;
void set_udp_source(udp& header, uint16_t value) noexcept;
void set_udp_destination(udp& header, uint16_t value) noexcept;
void set_udp_length(udp& header, uint16_t value) noexcept;
void set_udp_checksum(udp& header, uint16_t value) noexcept;

/**
 * udp generic functions
 **/

template <typename Value>
void udp::set_field(enum udp::field_name field, Value value) noexcept
{
    switch (field) {
        case udp::field_name::source:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_udp_source(*this, value);
            }
            break;
        case udp::field_name::destination:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_udp_destination(*this, value);
            }
            break;
        case udp::field_name::length:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_udp_length(*this, value);
            }
            break;
        case udp::field_name::checksum:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_udp_checksum(*this, value);
            }
            break;
        default:
            break; /* no-op */
    }
}

}

#endif /* _LIB_PACKET_PROTOCOL_UDP_HPP_ */
