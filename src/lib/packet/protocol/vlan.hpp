#ifndef _LIB_PACKET_PROTOCOL_VLAN_HPP_
#define _LIB_PACKET_PROTOCOL_VLAN_HPP_

/**
 * vlan header for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include <type_traits>
#include "packet/type/endian.hpp"

namespace libpacket::protocol {

struct vlan
{
    static constexpr size_t protocol_field_count = 4;
    static constexpr uint16_t protocol_length = 4;
    static constexpr std::string_view protocol_name = "vlan";

    enum class field_name
    {
        none,
        priority,
        drop_eligible,
        id,
        ether_type,
    };

    enum class priority_value
    {
        network_control = 0x7,
        internetwork_control = 0x6,
        voice = 0x5,
        video = 0x4,
        critical_app = 0x3,
        excellent_effort = 0x2,
        background = 0x1,
        best_effort = 0x0,
    };

    type::endian::field<2> priority_drop_eligible_id;
    type::endian::field<2> ether_type;

    static enum vlan::field_name get_field_name(std::string_view name) noexcept;
    static const std::type_info& get_field_type(field_name field) noexcept;

    template <typename Value>
    void set_field(enum field_name field, Value value) noexcept;
};

/**
 * vlan get functions
 **/

enum vlan::priority_value get_vlan_priority(const vlan& header) noexcept;
bool get_vlan_drop_eligible(const vlan& header) noexcept;
uint16_t get_vlan_id(const vlan& header) noexcept;
uint16_t get_vlan_ether_type(const vlan& header) noexcept;

/**
 * vlan set functions
 **/

void set_vlan_priority(vlan& header, enum vlan::priority_value value) noexcept;
void set_vlan_drop_eligible(vlan& header, bool value) noexcept;
void set_vlan_id(vlan& header, uint16_t value) noexcept;
void set_vlan_ether_type(vlan& header, uint16_t value) noexcept;

/**
 * vlan generic functions
 **/

template <typename Value>
void vlan::set_field(enum vlan::field_name field, Value value) noexcept
{
    switch (field) {
        case vlan::field_name::priority:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_vlan_priority(*this, static_cast<enum vlan::priority_value>(value));
            }
            break;
        case vlan::field_name::drop_eligible:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_vlan_drop_eligible(*this, static_cast<bool>(value));
            }
            break;
        case vlan::field_name::id:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_vlan_id(*this, value);
            }
            break;
        case vlan::field_name::ether_type:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_vlan_ether_type(*this, value);
            }
            break;
        default:
            break; /* no-op */
    }
}

}

#endif /* _LIB_PACKET_PROTOCOL_VLAN_HPP_ */
