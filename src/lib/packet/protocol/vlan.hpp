#ifndef _LIB_PACKET_PROTOCOL_VLAN_HPP_
#define _LIB_PACKET_PROTOCOL_VLAN_HPP_

/**
 * vlan header for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "packet/type/endian.hpp"

namespace packet::protocol {

struct vlan
{
    static constexpr uint16_t protocol_length = 4;

    enum class priority_value
    {
        network_control = 0x7,
        internetwork_control = 0x6,
        voice = 0x5,
        video = 0x4,
        critical_app = 0x3,
        excellent_effort = 0x2,
        background = 0x1,
        best_effort = 0x0,
    };

    type::endian::field<2> priority_drop_eligible_id;
    type::endian::field<2> ether_type;
};

/**
 * vlan get functions
 **/

enum vlan::priority_value get_vlan_priority(const vlan& header) noexcept;
bool get_vlan_drop_eligible(const vlan& header) noexcept;
uint16_t get_vlan_id(const vlan& header) noexcept;
uint16_t get_vlan_ether_type(const vlan& header) noexcept;

/**
 * vlan set functions
 **/

void set_vlan_priority(vlan& header, enum vlan::priority_value value) noexcept;
void set_vlan_drop_eligible(vlan& header, bool value) noexcept;
void set_vlan_id(vlan& header, uint16_t value) noexcept;
void set_vlan_ether_type(vlan& header, uint16_t value) noexcept;

}

#endif /* _LIB_PACKET_PROTOCOL_VLAN_HPP_ */
