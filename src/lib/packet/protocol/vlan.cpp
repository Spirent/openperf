/**
 * vlan implementation for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include "vlan.hpp"

namespace packet::protocol {

/**
 * vlan getter implementations
 **/

enum vlan::priority_value get_vlan_priority(const vlan& header) noexcept
{
    auto tmp = header.priority_drop_eligible_id.load<uint16_t>() & 0xe000;
    tmp >>= 13;
    return (static_cast<enum vlan::priority_value>(tmp));
}

bool get_vlan_drop_eligible(const vlan& header) noexcept
{
    auto tmp = header.priority_drop_eligible_id.load<uint16_t>() & 0x1000;
    tmp >>= 12;
    return (static_cast<bool>(tmp));
}

uint16_t get_vlan_id(const vlan& header) noexcept
{
    auto tmp = header.priority_drop_eligible_id.load<uint16_t>() & 0xfff;
    return (tmp);
}

uint16_t get_vlan_ether_type(const vlan& header) noexcept
{
    auto tmp = header.ether_type.load<uint16_t>();
    return (tmp);
}

/**
 * vlan setter implementations
 **/

void set_vlan_priority(vlan& header, enum vlan::priority_value value) noexcept
{
    auto tmp = static_cast<uint16_t>(value);
    tmp <<= 13;
    header.priority_drop_eligible_id.store(static_cast<uint16_t>(((tmp & 0xe000) | (header.priority_drop_eligible_id.load<uint16_t>() & ~0xe000))));
}

void set_vlan_drop_eligible(vlan& header, bool value) noexcept
{
    auto tmp = static_cast<uint16_t>(value);
    tmp <<= 12;
    header.priority_drop_eligible_id.store(static_cast<uint16_t>(((tmp & 0x1000) | (header.priority_drop_eligible_id.load<uint16_t>() & ~0x1000))));
}

void set_vlan_id(vlan& header, uint16_t value) noexcept
{
    header.priority_drop_eligible_id.store(static_cast<uint16_t>(((value & 0xfff) | (header.priority_drop_eligible_id.load<uint16_t>() & ~0xfff))));
}

void set_vlan_ether_type(vlan& header, uint16_t value) noexcept
{
    header.ether_type.store(value);
}

}
