#ifndef _LIB_PACKET_PROTOCOL_ETHERNET_HPP_
#define _LIB_PACKET_PROTOCOL_ETHERNET_HPP_

/**
 * Ethernet header for the packet header C++ Library
 *
 * This file is automatically generated by the library code generator.
 * Do not edit this file manually.
 **/

#include <type_traits>
#include "packet/type/endian.hpp"
#include "packet/type/mac_address.hpp"

namespace libpacket::protocol {

struct ethernet
{
    static constexpr size_t protocol_field_count = 3;
    static constexpr uint16_t protocol_length = 14;
    static constexpr std::string_view protocol_name = "ethernet";

    enum class field_name
    {
        none,
        destination,
        source,
        ether_type,
    };

    type::mac_address destination;
    type::mac_address source;
    type::endian::field<2> ether_type;

    static enum ethernet::field_name get_field_name(std::string_view name) noexcept;
    static const std::type_info& get_field_type(field_name field) noexcept;

    template <typename Value>
    void set_field(enum field_name field, Value value) noexcept;
};

/**
 * Ethernet get functions
 **/

const type::mac_address& get_ethernet_destination(const ethernet& header) noexcept;
const type::mac_address& get_ethernet_source(const ethernet& header) noexcept;
uint16_t get_ethernet_ether_type(const ethernet& header) noexcept;

/**
 * Ethernet set functions
 **/

void set_ethernet_destination(ethernet& header, const type::mac_address& value) noexcept;
void set_ethernet_destination(ethernet& header, type::mac_address&& value) noexcept;
void set_ethernet_source(ethernet& header, const type::mac_address& value) noexcept;
void set_ethernet_source(ethernet& header, type::mac_address&& value) noexcept;
void set_ethernet_ether_type(ethernet& header, uint16_t value) noexcept;

/**
 * Ethernet generic functions
 **/

template <typename Value>
void ethernet::set_field(enum ethernet::field_name field, Value value) noexcept
{
    switch (field) {
        case ethernet::field_name::destination:
            if constexpr (std::is_convertible_v<Value, type::mac_address>) {
                set_ethernet_destination(*this, value);
            }
            break;
        case ethernet::field_name::source:
            if constexpr (std::is_convertible_v<Value, type::mac_address>) {
                set_ethernet_source(*this, value);
            }
            break;
        case ethernet::field_name::ether_type:
            if constexpr (std::is_convertible_v<Value, uint16_t>) {
                set_ethernet_ether_type(*this, value);
            }
            break;
        default:
            break; /* no-op */
    }
}

}

#endif /* _LIB_PACKET_PROTOCOL_ETHERNET_HPP_ */
