// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortStatus Port status
// swagger:model PortStatus
type PortStatus struct {

	// Port duplex
	// Required: true
	// Enum: [full half unknown]
	Duplex *string `json:"duplex"`

	// Link status
	// Required: true
	// Enum: [up down unknown]
	Link *string `json:"link"`

	// Port speed (in Mbps)
	// Required: true
	Speed *int64 `json:"speed"`
}

// Validate validates this port status
func (m *PortStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuplex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var portStatusTypeDuplexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","half","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portStatusTypeDuplexPropEnum = append(portStatusTypeDuplexPropEnum, v)
	}
}

const (

	// PortStatusDuplexFull captures enum value "full"
	PortStatusDuplexFull string = "full"

	// PortStatusDuplexHalf captures enum value "half"
	PortStatusDuplexHalf string = "half"

	// PortStatusDuplexUnknown captures enum value "unknown"
	PortStatusDuplexUnknown string = "unknown"
)

// prop value enum
func (m *PortStatus) validateDuplexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, portStatusTypeDuplexPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PortStatus) validateDuplex(formats strfmt.Registry) error {

	if err := validate.Required("duplex", "body", m.Duplex); err != nil {
		return err
	}

	// value enum
	if err := m.validateDuplexEnum("duplex", "body", *m.Duplex); err != nil {
		return err
	}

	return nil
}

var portStatusTypeLinkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portStatusTypeLinkPropEnum = append(portStatusTypeLinkPropEnum, v)
	}
}

const (

	// PortStatusLinkUp captures enum value "up"
	PortStatusLinkUp string = "up"

	// PortStatusLinkDown captures enum value "down"
	PortStatusLinkDown string = "down"

	// PortStatusLinkUnknown captures enum value "unknown"
	PortStatusLinkUnknown string = "unknown"
)

// prop value enum
func (m *PortStatus) validateLinkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, portStatusTypeLinkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PortStatus) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	// value enum
	if err := m.validateLinkEnum("link", "body", *m.Link); err != nil {
		return err
	}

	return nil
}

func (m *PortStatus) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortStatus) UnmarshalBinary(b []byte) error {
	var res PortStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
