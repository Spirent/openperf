// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeKeeperState TimeKeeper internal state information
// swagger:model TimeKeeperState
type TimeKeeperState struct {

	// The time counter frequency as measured by the interval between the
	// two best timestamp exchanges with the time source over the past two
	// hours, in Hz.
	//
	Frequency int64 `json:"frequency,omitempty"`

	// The estimated error of the time counter frequency measurement, in Hz.
	FrequencyError int64 `json:"frequency_error,omitempty"`

	// The time counter frequency as measured by the interval between the
	// two best timestamp exchanges with the time source over the past hour,
	// in Hz. This value is used to help determine time stamp error due to
	// time counter frequency drift.
	//
	LocalFrequency int64 `json:"local_frequency,omitempty"`

	// The estimated error of the local time counter frequency measurement, in Hz.
	LocalFrequencyError int64 `json:"local_frequency_error,omitempty"`

	// The offset applied to time counter derived timestamp values,
	// in seconds.  This value comes from the system host clock.
	//
	// Required: true
	Offset *float64 `json:"offset"`

	// The time keeper is considered to be synced to the time source if a clock
	// offset, theta, has been calculated and applied within the past 20 minutes.
	//
	// Required: true
	Synced *bool `json:"synced"`

	// The calculated correction to apply to the offset, based on the
	// measured time counter frequency and time source timestamps.
	//
	Theta float64 `json:"theta,omitempty"`
}

// Validate validates this time keeper state
func (m *TimeKeeperState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynced(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeKeeperState) validateOffset(formats strfmt.Registry) error {

	if err := validate.Required("offset", "body", m.Offset); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperState) validateSynced(formats strfmt.Registry) error {

	if err := validate.Required("synced", "body", m.Synced); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeKeeperState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeKeeperState) UnmarshalBinary(b []byte) error {
	var res TimeKeeperState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
