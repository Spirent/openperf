// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeKeeperStats TimeKeeper statistics
// swagger:model TimeKeeperStats
type TimeKeeperStats struct {

	// The number of times the frequency calculation has been updated.
	// Required: true
	FrequencyAccept *int64 `json:"frequency_accept"`

	// The number of times the frequency calculation has been rejected due
	// to an excessive delta between old and new values.
	//
	// Required: true
	FrequencyReject *int64 `json:"frequency_reject"`

	// The number of times the local frequency calculation has been updated.
	// Required: true
	LocalFrequencyAccept *int64 `json:"local_frequency_accept"`

	// The number of times the local frequency calculation has been rejected
	// due to an excessive delta between old and new values.
	//
	// Required: true
	LocalFrequencyReject *int64 `json:"local_frequency_reject"`

	// round trip times
	// Required: true
	RoundTripTimes *TimeKeeperStatsRoundTripTimes `json:"round_trip_times"`

	// The number of times the theta calculation has been updated.
	// Required: true
	ThetaAccept *int64 `json:"theta_accept"`

	// Then umber of times the theta calculation has been rejected due to
	// excessive delta between old and new values.
	//
	// Required: true
	ThetaReject *int64 `json:"theta_reject"`

	// The number of timestamps in the current working set of timestamps.
	// Old timestamps are dropped from the history of timestamps as they
	// become irrelevant.
	//
	// Required: true
	Timestamps *int64 `json:"timestamps"`
}

// Validate validates this time keeper stats
func (m *TimeKeeperStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrequencyAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencyReject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalFrequencyAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalFrequencyReject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundTripTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThetaAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThetaReject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeKeeperStats) validateFrequencyAccept(formats strfmt.Registry) error {

	if err := validate.Required("frequency_accept", "body", m.FrequencyAccept); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateFrequencyReject(formats strfmt.Registry) error {

	if err := validate.Required("frequency_reject", "body", m.FrequencyReject); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateLocalFrequencyAccept(formats strfmt.Registry) error {

	if err := validate.Required("local_frequency_accept", "body", m.LocalFrequencyAccept); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateLocalFrequencyReject(formats strfmt.Registry) error {

	if err := validate.Required("local_frequency_reject", "body", m.LocalFrequencyReject); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateRoundTripTimes(formats strfmt.Registry) error {

	if err := validate.Required("round_trip_times", "body", m.RoundTripTimes); err != nil {
		return err
	}

	if m.RoundTripTimes != nil {
		if err := m.RoundTripTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("round_trip_times")
			}
			return err
		}
	}

	return nil
}

func (m *TimeKeeperStats) validateThetaAccept(formats strfmt.Registry) error {

	if err := validate.Required("theta_accept", "body", m.ThetaAccept); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateThetaReject(formats strfmt.Registry) error {

	if err := validate.Required("theta_reject", "body", m.ThetaReject); err != nil {
		return err
	}

	return nil
}

func (m *TimeKeeperStats) validateTimestamps(formats strfmt.Registry) error {

	if err := validate.Required("timestamps", "body", m.Timestamps); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeKeeperStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeKeeperStats) UnmarshalBinary(b []byte) error {
	var res TimeKeeperStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TimeKeeperStatsRoundTripTimes The round trip time measures the total elapsed time to make a timestamp
// exchange with the remote time source.  The TimeKeeper stores RTT data so
// that the least delayed clock exchanges can be given extra weight when
// calculating the current clock offset.
//
// swagger:model TimeKeeperStatsRoundTripTimes
type TimeKeeperStatsRoundTripTimes struct {

	// the average round trip time, in seconds.
	Avg float64 `json:"avg,omitempty"`

	// The maximum round trip time, in seconds.
	Max float64 `json:"max,omitempty"`

	// The minimum round trip time, in seconds.
	Min float64 `json:"min,omitempty"`

	// The number of round trip times in the data set.
	// Required: true
	Size *int64 `json:"size"`
}

// Validate validates this time keeper stats round trip times
func (m *TimeKeeperStatsRoundTripTimes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeKeeperStatsRoundTripTimes) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("round_trip_times"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeKeeperStatsRoundTripTimes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeKeeperStatsRoundTripTimes) UnmarshalBinary(b []byte) error {
	var res TimeKeeperStatsRoundTripTimes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
