// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSource A reference time source
// swagger:model TimeSource
type TimeSource struct {

	// config
	// Required: true
	Config *TimeSourceConfig `json:"config"`

	// Unique time source identifier
	// Required: true
	ID *string `json:"id"`

	// time source kind
	// Required: true
	// Enum: [ntp]
	Kind *string `json:"kind"`

	// stats
	// Required: true
	Stats *TimeSourceStats `json:"stats"`
}

// Validate validates this time source
func (m *TimeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSource) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TimeSource) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var timeSourceTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ntp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeSourceTypeKindPropEnum = append(timeSourceTypeKindPropEnum, v)
	}
}

const (

	// TimeSourceKindNtp captures enum value "ntp"
	TimeSourceKindNtp string = "ntp"
)

// prop value enum
func (m *TimeSource) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, timeSourceTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TimeSource) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *TimeSource) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSource) UnmarshalBinary(b []byte) error {
	var res TimeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
