// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Module A test module that has been statically linked or dynamically loaded into the process
// swagger:model Module
type Module struct {

	// Description of module functionality
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Unique module identifier
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Linkage type
	// Required: true
	// Read Only: true
	// Enum: [static dynamic]
	Linkage string `json:"linkage"`

	// Path to module binary (dynamically-loaded modules only).
	// Read Only: true
	Path string `json:"path,omitempty"`

	// version
	// Required: true
	Version *ModuleVersion `json:"version"`
}

// Validate validates this module
func (m *Module) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Module) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *Module) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

var moduleTypeLinkagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moduleTypeLinkagePropEnum = append(moduleTypeLinkagePropEnum, v)
	}
}

const (

	// ModuleLinkageStatic captures enum value "static"
	ModuleLinkageStatic string = "static"

	// ModuleLinkageDynamic captures enum value "dynamic"
	ModuleLinkageDynamic string = "dynamic"
)

// prop value enum
func (m *Module) validateLinkageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moduleTypeLinkagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Module) validateLinkage(formats strfmt.Registry) error {

	if err := validate.RequiredString("linkage", "body", string(m.Linkage)); err != nil {
		return err
	}

	// value enum
	if err := m.validateLinkageEnum("linkage", "body", m.Linkage); err != nil {
		return err
	}

	return nil
}

func (m *Module) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Module) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Module) UnmarshalBinary(b []byte) error {
	var res Module
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
