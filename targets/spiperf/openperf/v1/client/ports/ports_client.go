// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePort(params *CreatePortParams) (*CreatePortCreated, error)

	DeletePort(params *DeletePortParams) (*DeletePortNoContent, error)

	GetPort(params *GetPortParams) (*GetPortOK, error)

	ListPorts(params *ListPortsParams) (*ListPortsOK, error)

	UpdatePort(params *UpdatePortParams) (*UpdatePortOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePort creates a port

  Create a new port-equivalent, e.g. a bonded port.
*/
func (a *Client) CreatePort(params *CreatePortParams) (*CreatePortCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePort",
		Method:             "POST",
		PathPattern:        "/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePortCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePort deletes a port

  Deletes an existing port equivalent, e.g. a bonded port. Idempotent.
*/
func (a *Client) DeletePort(params *DeletePortParams) (*DeletePortNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePort",
		Method:             "DELETE",
		PathPattern:        "/ports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePortNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPort gets a port

  Returns a port, by id.
*/
func (a *Client) GetPort(params *GetPortParams) (*GetPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPort",
		Method:             "GET",
		PathPattern:        "/ports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPorts lists ports

  The `ports` endpoint returns all physical ports and port-equivalents that are available for network interfaces.

*/
func (a *Client) ListPorts(params *ListPortsParams) (*ListPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPorts",
		Method:             "GET",
		PathPattern:        "/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePort updates a port

  Updates an existing port's configuration. Idempotent.
*/
func (a *Client) UpdatePort(params *UpdatePortParams) (*UpdatePortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePort",
		Method:             "PUT",
		PathPattern:        "/ports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
