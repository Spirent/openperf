// Code generated by go-swagger; DO NOT EDIT.

package time_sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Spirent/openperf/targets/spiperf/openperf/v1/models"
)

// NewCreateTimeSourceParams creates a new CreateTimeSourceParams object
// with the default values initialized.
func NewCreateTimeSourceParams() *CreateTimeSourceParams {
	var ()
	return &CreateTimeSourceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTimeSourceParamsWithTimeout creates a new CreateTimeSourceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateTimeSourceParamsWithTimeout(timeout time.Duration) *CreateTimeSourceParams {
	var ()
	return &CreateTimeSourceParams{

		timeout: timeout,
	}
}

// NewCreateTimeSourceParamsWithContext creates a new CreateTimeSourceParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateTimeSourceParamsWithContext(ctx context.Context) *CreateTimeSourceParams {
	var ()
	return &CreateTimeSourceParams{

		Context: ctx,
	}
}

// NewCreateTimeSourceParamsWithHTTPClient creates a new CreateTimeSourceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateTimeSourceParamsWithHTTPClient(client *http.Client) *CreateTimeSourceParams {
	var ()
	return &CreateTimeSourceParams{
		HTTPClient: client,
	}
}

/*CreateTimeSourceParams contains all the parameters to send to the API endpoint
for the create time source operation typically these are written to a http.Request
*/
type CreateTimeSourceParams struct {

	/*Timesource
	  New time source

	*/
	Timesource *models.TimeSource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create time source params
func (o *CreateTimeSourceParams) WithTimeout(timeout time.Duration) *CreateTimeSourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create time source params
func (o *CreateTimeSourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create time source params
func (o *CreateTimeSourceParams) WithContext(ctx context.Context) *CreateTimeSourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create time source params
func (o *CreateTimeSourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create time source params
func (o *CreateTimeSourceParams) WithHTTPClient(client *http.Client) *CreateTimeSourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create time source params
func (o *CreateTimeSourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTimesource adds the timesource to the create time source params
func (o *CreateTimeSourceParams) WithTimesource(timesource *models.TimeSource) *CreateTimeSourceParams {
	o.SetTimesource(timesource)
	return o
}

// SetTimesource adds the timesource to the create time source params
func (o *CreateTimeSourceParams) SetTimesource(timesource *models.TimeSource) {
	o.Timesource = timesource
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTimeSourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Timesource != nil {
		if err := r.SetBodyParam(o.Timesource); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
