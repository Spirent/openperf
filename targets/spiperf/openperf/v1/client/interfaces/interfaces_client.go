// Code generated by go-swagger; DO NOT EDIT.

package interfaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new interfaces API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for interfaces API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateInterfaces(params *BulkCreateInterfacesParams) (*BulkCreateInterfacesOK, error)

	BulkDeleteInterfaces(params *BulkDeleteInterfacesParams) (*BulkDeleteInterfacesNoContent, error)

	CreateInterface(params *CreateInterfaceParams) (*CreateInterfaceCreated, error)

	DeleteInterface(params *DeleteInterfaceParams) (*DeleteInterfaceNoContent, error)

	GetInterface(params *GetInterfaceParams) (*GetInterfaceOK, error)

	ListInterfaces(params *ListInterfacesParams) (*ListInterfacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateInterfaces bulks create network interfaces

  Create multiple network interfaces. Requests are processed in an all-or-nothing manner, i.e. a single network interface creation failure causes all network interface creations for this request to fail.

*/
func (a *Client) BulkCreateInterfaces(params *BulkCreateInterfacesParams) (*BulkCreateInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BulkCreateInterfaces",
		Method:             "POST",
		PathPattern:        "/interfaces/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreateInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeleteInterfaces bulks delete network interfaces

  Best-effort delete multiple network interfaces. Non-existent interface ids do not cause errors. Idempotent.

*/
func (a *Client) BulkDeleteInterfaces(params *BulkDeleteInterfacesParams) (*BulkDeleteInterfacesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BulkDeleteInterfaces",
		Method:             "POST",
		PathPattern:        "/interfaces/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeleteInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeleteInterfacesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeleteInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInterface creates a network interface

  Create a new network interface.
*/
func (a *Client) CreateInterface(params *CreateInterfaceParams) (*CreateInterfaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateInterface",
		Method:             "POST",
		PathPattern:        "/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInterfaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteInterface deletes a network interface

  Deletes an existing interface. Idempotent.
*/
func (a *Client) DeleteInterface(params *DeleteInterfaceParams) (*DeleteInterfaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInterface",
		Method:             "DELETE",
		PathPattern:        "/interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInterfaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterface gets a network interface

  Returns a network interface, by id.
*/
func (a *Client) GetInterface(params *GetInterfaceParams) (*GetInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInterface",
		Method:             "GET",
		PathPattern:        "/interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListInterfaces lists network interfaces

  The `interfaces` endpoint returns all network interfaces that are available for use as stack entry/exit points.

*/
func (a *Client) ListInterfaces(params *ListInterfacesParams) (*ListInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListInterfaces",
		Method:             "GET",
		PathPattern:        "/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
