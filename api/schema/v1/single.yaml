{
  "swagger": "2.0",
  "info": {
    "title": "OpenPerf API",
    "description": "REST API interface for OpenPerf",
    "termsOfService": "TODO",
    "contact": {
      "name": "Spirent, Inc.",
      "url": "http://spirent.com",
      "email": "support@spirent.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.txt"
    },
    "version": "1"
  },
  "schemes": [
    "http",
    "https"
  ],
  "host": "localhost",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "parameters": {
    "id": {
      "name": "id",
      "in": "path",
      "description": "Unique resource identifier",
      "type": "string",
      "format": "string",
      "required": true
    }
  },
  "tags": [
    {
      "name": "Interfaces"
    },
    {
      "name": "Modules"
    },
    {
      "name": "PacketGenerators"
    },
    {
      "name": "Ports"
    },
    {
      "name": "Stacks"
    },
    {
      "name": "TimeSync"
    },
    {
      "name": "BlockGenerator"
    },
    {
      "name": "MemoryGenerator"
    },
    {
      "name": "CpuGenerator"
    }
  ],
  "basePath": "/",
  "paths": {
    "/modules": {
      "get": {
        "operationId": "ListModules",
        "tags": [
          "Modules"
        ],
        "summary": "List Modules",
        "description": "The `modules` endpoint returns all loaded modules.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Module"
              }
            }
          }
        }
      }
    },
    "/modules/{id}": {
      "get": {
        "operationId": "GetModule",
        "tags": [
          "Modules"
        ],
        "summary": "Get a module",
        "description": "Returns a module, by id.",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          }
        }
      }
    },
    "/interfaces": {
      "get": {
        "operationId": "ListInterfaces",
        "tags": [
          "Interfaces"
        ],
        "summary": "List network interfaces",
        "description": "The `interfaces` endpoint returns all network interfaces that are available for use as stack entry/exit points.\n",
        "parameters": [
          {
            "name": "port_id",
            "in": "query",
            "description": "Filter by port id",
            "required": false,
            "type": "string"
          },
          {
            "name": "eth_mac_address",
            "in": "query",
            "description": "Filter by Ethernet MAC address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ipv4_address",
            "in": "query",
            "description": "Filter by IPv4 address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ipv6_address",
            "in": "query",
            "description": "Filter by IPv6 address",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interface"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateInterface",
        "tags": [
          "Interfaces"
        ],
        "summary": "Create a network interface",
        "description": "Create a new network interface.",
        "parameters": [
          {
            "name": "interface",
            "in": "body",
            "description": "New network interface",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Interface"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Interface"
            }
          }
        }
      }
    },
    "/interfaces/{id}": {
      "get": {
        "operationId": "GetInterface",
        "tags": [
          "Interfaces"
        ],
        "summary": "Get a network interface",
        "description": "Returns a network interface, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1ports~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Interface"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteInterface",
        "tags": [
          "Interfaces"
        ],
        "summary": "Delete a network interface",
        "description": "Deletes an existing interface. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1ports~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/interfaces/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateInterfaces",
        "tags": [
          "Interfaces"
        ],
        "summary": "Bulk create network interfaces",
        "description": "Create multiple network interfaces. Requests are processed in an all-or-nothing manner, i.e. a single network interface creation failure causes all network interface creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateInterfacesRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of network interfaces",
                  "items": {
                    "$ref": "#/definitions/Interface"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateInterfacesResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of network interfaces",
                  "items": {
                    "$ref": "#/definitions/Interface"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/interfaces/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteInterfaces",
        "tags": [
          "Interfaces"
        ],
        "summary": "Bulk delete network interfaces",
        "description": "Best-effort delete multiple network interfaces. Non-existent interface ids do not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteInterfacesRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of interface identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/ports": {
      "get": {
        "operationId": "ListPorts",
        "tags": [
          "Ports"
        ],
        "summary": "List ports",
        "description": "The `ports` endpoint returns all physical ports and port-equivalents that are available for network interfaces.\n",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "description": "Filter by kind",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Port"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreatePort",
        "tags": [
          "Ports"
        ],
        "summary": "Create a port",
        "description": "Create a new port-equivalent, e.g. a bonded port.",
        "parameters": [
          {
            "name": "port",
            "in": "body",
            "description": "New port",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        }
      }
    },
    "/ports/{id}": {
      "get": {
        "operationId": "GetPort",
        "tags": [
          "Ports"
        ],
        "summary": "Get a port",
        "description": "Returns a port, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1ports~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        }
      },
      "put": {
        "operationId": "UpdatePort",
        "tags": [
          "Ports"
        ],
        "summary": "Update a port",
        "description": "Updates an existing port's configuration. Idempotent.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          },
          {
            "name": "port",
            "in": "body",
            "description": "Updated port",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeletePort",
        "tags": [
          "Ports"
        ],
        "summary": "Delete a port",
        "description": "Deletes an existing port equivalent, e.g. a bonded port. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1ports~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/stacks": {
      "get": {
        "operationId": "ListStacks",
        "tags": [
          "Stacks"
        ],
        "summary": "List stacks",
        "description": "The `stacks` endpoint returns all TCP/IP stacks.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stack"
              }
            }
          }
        }
      }
    },
    "/stacks/{id}": {
      "get": {
        "operationId": "GetStack",
        "tags": [
          "Stacks"
        ],
        "summary": "Get a stack",
        "description": "Returns a stack, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1ports~1%7Bid%7D/put/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stack"
            }
          }
        }
      }
    },
    "/packet/analyzers": {
      "get": {
        "operationId": "ListAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "List packet analyzers",
        "description": "The `analyzers` endpoint returns all packet analyzers that are\nconfigured to collect and report port and flow statistics.\n",
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "description": "Filter by source id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Analyzer"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateAnalyzer",
        "tags": [
          "Analyzers"
        ],
        "summary": "Create a packet analyzer",
        "description": "Create a new packet analyzer.",
        "parameters": [
          {
            "name": "analyzer",
            "in": "body",
            "description": "New packet analyzer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Analyzer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created analyzer",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Analyzer"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "Delete all packet analyzers",
        "description": "Delete all inactive packet analyzers and their results. Idempotent.\n",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzers/{id}": {
      "get": {
        "operationId": "GetAnalyzer",
        "tags": [
          "Analyzers"
        ],
        "summary": "Get a packet analyzer",
        "description": "Return a packet analyzer by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Analyzer"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAnalyzer",
        "tags": [
          "Analyzers"
        ],
        "summary": "Delete a packet analyzer",
        "description": "Delete a stopped packet analyzer by id. Also delete all results\ncreated by this analyzer. Idempotent.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzers/{id}/start": {
      "post": {
        "operationId": "StartAnalyzer",
        "tags": [
          "Analyzers"
        ],
        "summary": "Start analyzing and collecting packet statistics.",
        "description": "Used to start a non-running analyzer. Creates a new analyzer\nresult on success.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI to created analyzer result object",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyzerResult"
            }
          }
        }
      }
    },
    "/packet/analyzers/{id}/stop": {
      "post": {
        "operationId": "StopAnalyzer",
        "tags": [
          "Analyzers"
        ],
        "summary": "Stop analyzing and collecting packet statistics",
        "description": "Use to halt a running analyzer. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzers/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "Bulk create packet analyzers",
        "description": "Create multiple packet analyzers. Requests are processed in an\nall-or-nothing manner, i.e. a single analyzer creation failure\ncauses all analyzer creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateAnalyzersRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet analyzers",
                  "items": {
                    "$ref": "#/definitions/Analyzer"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateAnalyzersResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet analyzers",
                  "items": {
                    "$ref": "#/definitions/Analyzer"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/analyzers/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "Bulk delete packet analyzers",
        "description": "Delete multiple packet analyzers in a best-effort manner. Analyzers\ncan only be deleted when inactive. Active or Non-existant analyzer ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteAnalyzersRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of packet analyzers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzers/x/bulk-start": {
      "post": {
        "operationId": "BulkStartAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "Bulk start packet analyzers",
        "description": "Start multiple packet analyzers simultaneously",
        "parameters": [
          {
            "name": "start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartAnalyzersRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of analyzer identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkStartAnalyzersResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of analyzer results",
                  "items": {
                    "$ref": "#/definitions/AnalyzerResult"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/analyzers/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopAnalyzers",
        "tags": [
          "Analyzers"
        ],
        "summary": "Bulk stop packet analyzers",
        "description": "Stop multiple packet analyzers simultaneously",
        "parameters": [
          {
            "name": "stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopAnalyzersRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of analyzer identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzer-results": {
      "get": {
        "operationId": "ListAnalyzerResults",
        "tags": [
          "Analyzers"
        ],
        "summary": "List analyzer results",
        "description": "The `analyzer-results` endpoint returns all analyzer results created\nby analyzer instances.\n",
        "parameters": [
          {
            "name": "analyzer_id",
            "in": "query",
            "description": "Filter by analyzer id",
            "required": false,
            "type": "string"
          },
          {
            "name": "source_id",
            "in": "query",
            "description": "Filter by receive port or interface id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnalyzerResult"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAnalyzerResults",
        "tags": [
          "Analyzers"
        ],
        "summary": "Delete all analyzer results",
        "description": "Delete all inactive packet analyzer results",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/analyzer-results/{id}": {
      "get": {
        "operationId": "GetAnalyzerResult",
        "tags": [
          "Analyzers"
        ],
        "summary": "Get a packet analyzer result",
        "description": "Returns results from a packet analyzer by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AnalyzerResult"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAnalyzerResult",
        "tags": [
          "Analyzers"
        ],
        "summary": "Delete a packet analyzer result",
        "description": "Delete an inactive packet analyzer result. Also deletes all child\nrx-flow objects. Idempotent.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1rx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/rx-flows": {
      "get": {
        "operationId": "ListRxFlows",
        "tags": [
          "Analyzers"
        ],
        "summary": "List received packet flows",
        "description": "The `rx-flows` endpoint returns all packet flows that have been\nreceived by analyzer instances.\n",
        "parameters": [
          {
            "name": "analyzer_id",
            "in": "query",
            "description": "Filter by receive analyzer id",
            "required": false,
            "type": "string"
          },
          {
            "name": "source_id",
            "in": "query",
            "description": "Filter by receive port or interface id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RxFlow"
              }
            }
          }
        }
      }
    },
    "/packet/rx-flows/{id}": {
      "get": {
        "operationId": "GetRxFlow",
        "tags": [
          "Analyzers"
        ],
        "summary": "Get packet flow counters for a single flow",
        "description": "Returns packet flow counters by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RxFlow"
            }
          }
        }
      }
    },
    "/packet/captures": {
      "get": {
        "operationId": "ListCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "List packet capture",
        "description": "The `captures` endpoint returns all configured packet captures.\n",
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "description": "Filter by source id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/paths/~1packet~1captures/post/parameters/0/schema"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateCapture",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Create a packet capture",
        "description": "Create a new packet capture.",
        "parameters": [
          {
            "name": "capture",
            "in": "body",
            "description": "New packet capture",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Packet capture; captures packets.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique capture identifier"
                },
                "source_id": {
                  "type": "string",
                  "description": "Specifies the unique source of packets for this capture. This\nid may refer to either a port or an interface.\n"
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates whether this object is currently capturing packets or not.\n"
                },
                "config": {
                  "type": "object",
                  "description": "Packet capture configuration; the configuration controls the capture\nbehavior.\n",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "description": "Capture mode",
                      "enum": [
                        "buffer",
                        "live"
                      ],
                      "default": "buffer"
                    },
                    "buffer_wrap": {
                      "type": "boolean",
                      "description": "Indicates whether capture wraps when it reaches the end of the\nbuffer.  When buffer wrap is enabled capture will continue until\ncapture is stopped with the stop command or a stop trigger.\n",
                      "default": false
                    },
                    "buffer_size": {
                      "type": "integer",
                      "description": "Capture buffer size in bytes.",
                      "format": "int64",
                      "minimum": 4096,
                      "default": 16777216
                    },
                    "packet_size": {
                      "type": "integer",
                      "description": "Maximum length of packet to capture. If the packet is larger than the packet size, the packet is truncated.",
                      "format": "int32",
                      "minimum": 1
                    },
                    "filter": {
                      "type": "string",
                      "description": "Berkley Packet Filter (BPF) rules that matches packets to\ncapture.  An empty rule, the default, matches all frames.\n"
                    },
                    "start_trigger": {
                      "type": "string",
                      "description": "Berkley Packet Filter (BPF) rules used to trigger the start\nof packet capture.  When a trigger condition is specified,\nthe capture start command puts capture into an armed state\nand capture will only begin when the trigger condition occurs.\n"
                    },
                    "stop_trigger": {
                      "type": "string",
                      "description": "Berkley Packet Filter (BPF) rules used to trigger the stop\nof packet capture.\n"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "Maximum time duration for the capture in msec.\n",
                      "format": "int64",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "mode",
                    "buffer_size"
                  ]
                }
              },
              "required": [
                "id",
                "source_id",
                "active",
                "config"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created capture",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/paths/~1packet~1captures/post/parameters/0/schema"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Delete all packet captures",
        "description": "Delete all inactive packet captures.\nAlso deletes captured packets and results associated with the capture.  Idempotent.\n",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/captures/{id}": {
      "get": {
        "operationId": "GetCapture",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Get a packet capture",
        "description": "Return a packet capture by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/paths/~1packet~1captures/post/parameters/0/schema"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCapture",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Delete a packet capture",
        "description": "Delete a stopped packet capture by id.\nAlso deletes results and captured packets associated with the capture. Idempotent.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/captures/{id}/start": {
      "post": {
        "operationId": "StartCapture",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Start packet capture.",
        "description": "Used to start a non-running capture. Creates a new capture.\nresult on success.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI to created capture result object",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/paths/~1packet~1capture-results~1%7Bid%7D/get/responses/200/schema"
            }
          }
        }
      }
    },
    "/packet/captures/{id}/stop": {
      "post": {
        "operationId": "StopCapture",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Stop packet capture.",
        "description": "Use to halt a running capture. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/captures/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Bulk create packet captures",
        "description": "Create multiple packet captures. Requests are processed in an\nall-or-nothing manner, i.e. a single capture creation failure\ncauses all capture creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateCapturesRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet captures",
                  "items": {
                    "$ref": "#/paths/~1packet~1captures/post/parameters/0/schema"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateCapturesResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet captures",
                  "items": {
                    "$ref": "#/paths/~1packet~1captures/post/parameters/0/schema"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/captures/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Bulk delete packet captures",
        "description": "Delete multiple packet captures in a best-effort manner. Captures\ncan only be deleted when inactive. Active or Non-existant capture ids\ndo not cause errors.  Also deletes results and captured packets\nassociated with the capture. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteCapturesRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of packet captures",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/captures/x/bulk-start": {
      "post": {
        "operationId": "BulkStartCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Bulk start packet captures",
        "description": "Start multiple packet captures simultaneously",
        "parameters": [
          {
            "name": "start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartCapturesRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of capture identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkStartCapturesResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of capture results",
                  "items": {
                    "$ref": "#/paths/~1packet~1capture-results~1%7Bid%7D/get/responses/200/schema"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/captures/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopCaptures",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Bulk stop packet captures",
        "description": "Stop multiple packet captures simultaneously",
        "parameters": [
          {
            "name": "stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopCapturesRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of capture identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/capture-results": {
      "get": {
        "operationId": "ListCaptureResults",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "List capture results",
        "description": "The `capture-results` endpoint returns all capture results created\nby capture instances.\n",
        "parameters": [
          {
            "name": "capture_id",
            "in": "query",
            "description": "Filter by capture id",
            "required": false,
            "type": "string"
          },
          {
            "name": "source_id",
            "in": "query",
            "description": "Filter by receive port or interface id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/paths/~1packet~1capture-results~1%7Bid%7D/get/responses/200/schema"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCaptureResults",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Delete all capture results",
        "description": "Delete all inactive packet capture results. Also deletes captured packets associated with the results.",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/capture-results/{id}": {
      "get": {
        "operationId": "GetCaptureResult",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Get a packet capture result",
        "description": "Returns results from a packet capture by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "description": "Packet capture results",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique capture result identifier"
                },
                "capture_id": {
                  "type": "string",
                  "description": "Unique capture identifier that generated this result"
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates whether this object is currently capturing packets or not.\n"
                },
                "state": {
                  "type": "string",
                  "description": "Capture state",
                  "enum": [
                    "stopped",
                    "armed",
                    "running"
                  ]
                },
                "packets": {
                  "type": "integer",
                  "description": "Number of packets captured",
                  "format": "int64",
                  "minimum": 0
                },
                "bytes": {
                  "type": "integer",
                  "description": "Number of bytes captured",
                  "format": "int64",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "capture_id",
                "state",
                "packets",
                "bytes"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCaptureResult",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Delete a packet capture result",
        "description": "Delete an inactive packet capture result.\nAlso deletes captured packets associated with the results.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/capture-results/{id}/pcap": {
      "get": {
        "operationId": "GetCapturePcap",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Get a packet data as a pcap file",
        "description": "Returns a pcap file of the captured data.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "produces": [
          "application/x-pcapng"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file",
              "format": "binary"
            }
          }
        }
      }
    },
    "/packet/capture-results/{id}/live": {
      "get": {
        "operationId": "GetCaptureLive",
        "tags": [
          "PacketCaptures"
        ],
        "summary": "Get live capture packet data as a pcap file",
        "description": "Returns a pcap file of the captured data.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1captures~1%7Bid%7D/get/parameters/0"
          }
        ],
        "produces": [
          "application/x-pcapng"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file",
              "format": "binary"
            }
          }
        }
      }
    },
    "/packet/generators": {
      "get": {
        "operationId": "ListGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "List packet generators",
        "description": "The `generators` endpoint returns all packet generators that are\nconfigured to transmit test traffic.\n",
        "parameters": [
          {
            "name": "target_id",
            "in": "query",
            "description": "Filter by target id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PacketGenerator"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateGenerator",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Create a new packet generator",
        "parameters": [
          {
            "name": "generator",
            "in": "body",
            "description": "New packet generator",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PacketGenerator"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created generator",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PacketGenerator"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Delete all packet generators",
        "description": "Delete all inactive packet generators and their results. Idempotent.\n",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generators/{id}": {
      "get": {
        "operationId": "GetGenerator",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Get a packet generator",
        "description": "Return a packet generator, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PacketGenerator"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteGenerator",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Delete a packet generator",
        "description": "Delete a stopped packet generator by id. Also delete all results\ncreated by this generator. Idempotent.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generators/{id}/start": {
      "post": {
        "operationId": "StartGenerator",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Start generating packets",
        "description": "Used to start a non-running generator. Creates a new generator result\nupon success.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI to created generator result object",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PacketGeneratorResult"
            }
          }
        }
      }
    },
    "/packet/generators/{id}/stop": {
      "post": {
        "operationId": "StopGenerator",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Stop generating packets.",
        "description": "Use to halt a running generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generators/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Bulk create packet generators",
        "description": "Create multiple packet generators. Requests are processed in an\nall-or-nothing manner, i.e. a single generator creation failure\ncauses all generator creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateGeneratorsRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet generators",
                  "items": {
                    "$ref": "#/definitions/PacketGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateGeneratorsResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet generators",
                  "items": {
                    "$ref": "#/definitions/PacketGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/generators/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Bulk delete packet generators",
        "description": "Delete multiple packet generators in a best-effort manner. Generators\ncan only be deleted when inactive. Active or Non-existant generator ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteGeneratorsRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of packet generators",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generators/x/bulk-start": {
      "post": {
        "operationId": "BulkStartGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Bulk start packet generators",
        "description": "Start multiple packet generators simultaneously",
        "parameters": [
          {
            "name": "start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartGeneratorsRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of packet generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkStartGeneratorsResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of packet generator results",
                  "items": {
                    "$ref": "#/definitions/PacketGeneratorResult"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/packet/generators/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Bulk stop packet generators",
        "description": "Stop multiple packet generators simultaneously",
        "parameters": [
          {
            "name": "stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopGeneratorsRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of packet generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generators/x/toggle": {
      "post": {
        "operationId": "ToggleGenerators",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Replace a running generator with a stopped generator",
        "description": "Atomically swap a running generator with an idle generator.\nUpon success, the idle generator will be in the run state and\nthe previously running generator will be stopped.\n",
        "parameters": [
          {
            "name": "toggle",
            "in": "body",
            "description": "Generator toggle",
            "required": true,
            "schema": {
              "type": "object",
              "title": "ToggleGeneratorsRequest",
              "description": "Parameters for the toggle operation",
              "properties": {
                "replace": {
                  "type": "string",
                  "description": "The unique id of the running generator"
                },
                "with": {
                  "type": "string",
                  "description": "The unique id of the stopped generator"
                }
              },
              "required": [
                "replace",
                "with"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI to created generator result object",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PacketGeneratorResult"
            }
          }
        }
      }
    },
    "/packet/generator-results": {
      "get": {
        "operationId": "ListGeneratorResults",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "List generator results",
        "description": "The `generator-results` endpoint returns all generator results created\nby generator instances.\n",
        "parameters": [
          {
            "name": "generator_id",
            "in": "query",
            "description": "Filter by generator id",
            "required": false,
            "type": "string"
          },
          {
            "name": "target_id",
            "in": "query",
            "description": "Filter by target port or interface id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PacketGeneratorResult"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteGeneratorResults",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Delete all generator results",
        "description": "Delete all inactive generator results",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/generator-results/{id}": {
      "get": {
        "operationId": "GetGeneratorResult",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Get a packet generator result",
        "description": "Returns results from a packet generator by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PacketGeneratorResult"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteGeneratorResult",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Delete a packet generator result",
        "description": "Delete an inactive packet generator result. Also deletes all child\ntx-flow objects. Idempotent.\n",
        "parameters": [
          {
            "$ref": "#/paths/~1packet~1tx-flows~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/packet/tx-flows": {
      "get": {
        "operationId": "ListTxFlows",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "List packet generator transmit flows",
        "description": "The `tx-flows` endpoint returns all packet flows that are generated\nby packet generators.\n",
        "parameters": [
          {
            "name": "generator_id",
            "in": "query",
            "description": "Filter by packet generator id",
            "required": false,
            "type": "string"
          },
          {
            "name": "target_id",
            "in": "query",
            "description": "Filter by target port or interface id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TxFlow"
              }
            }
          }
        }
      }
    },
    "/packet/tx-flows/{id}": {
      "get": {
        "operationId": "GetTxFlow",
        "tags": [
          "PacketGenerators"
        ],
        "summary": "Get a transmit packet flow",
        "description": "Returns a transmit packet flow by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TxFlow"
            }
          }
        }
      }
    },
    "/time-counters": {
      "get": {
        "operationId": "ListTimeCounters",
        "tags": [
          "TimeSync"
        ],
        "summary": "List time counters",
        "description": "The `time-counters` endpoint returns all local time counters\nthat are available for measuring the passage of time.  This\nlist is for informational purposes only.\n",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeCounter"
              }
            }
          }
        }
      }
    },
    "/time-counters/{id}": {
      "get": {
        "operationId": "GetTimeCounter",
        "tags": [
          "TimeSync"
        ],
        "summary": "Get a time counter",
        "description": "Returns a time counter, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1time-sources~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimeCounter"
            }
          }
        }
      }
    },
    "/time-keeper": {
      "get": {
        "operationId": "GetTimeKeeper",
        "tags": [
          "TimeSync"
        ],
        "summary": "Get a time keeper.",
        "description": "Returns the system time keeper, aka clock.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimeKeeper"
            }
          }
        }
      }
    },
    "/time-sources": {
      "get": {
        "operationId": "ListTimeSources",
        "tags": [
          "TimeSync"
        ],
        "summary": "List reference clocks",
        "description": "The `time-sources` endpoint returns all time sources\nthat are used for syncing the local time.\n",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSource"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateTimeSource",
        "tags": [
          "TimeSync"
        ],
        "summary": "Register a time source for time syncing.",
        "description": "Registers a new time source for time syncing. Time sources are\nimmutable.\n",
        "parameters": [
          {
            "name": "timesource",
            "in": "body",
            "description": "New time source",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimeSource"
            }
          }
        }
      }
    },
    "/time-sources/{id}": {
      "get": {
        "operationId": "GetTimeSource",
        "tags": [
          "TimeSync"
        ],
        "summary": "Get a time source",
        "description": "Get a time source, by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimeSource"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteTimeSource",
        "tags": [
          "TimeSync"
        ],
        "summary": "Delete a time source",
        "description": "Deletes an existing time source. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1time-sources~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-devices": {
      "get": {
        "operationId": "ListBlockDevices",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "List block devices",
        "description": "The `block-devices` endpoint returns all block devices that are eligible as load generation targets.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockDevice"
              }
            }
          }
        }
      }
    },
    "/block-devices/{id}": {
      "get": {
        "operationId": "GetBlockDevice",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Get a block device",
        "description": "Returns a block device, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BlockDevice"
            }
          }
        }
      }
    },
    "/block-files": {
      "get": {
        "operationId": "ListBlockFiles",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "List block files",
        "description": "The `block-files` endpoint returns all block files that are eligible as load generation targets.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockFile"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateBlockFile",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Create a block file",
        "description": "Create a new block file.",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "New block file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockFile"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created block file",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BlockFile"
            }
          }
        }
      }
    },
    "/block-files/{id}": {
      "get": {
        "operationId": "GetBlockFile",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Get a block file",
        "description": "Returns a block file, by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BlockFile"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteBlockFile",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Delete a block file",
        "description": "Deletes an existing block file. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-files/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateBlockFiles",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Bulk create block files",
        "description": "Create multiple block files. Requests are processed in an\nall-or-nothing manner, i.e. a single block file creation failure\ncauses all creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateBlockFilesRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of block files",
                  "items": {
                    "$ref": "#/definitions/BlockFile"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateBlockFilesResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of created block files",
                  "items": {
                    "$ref": "#/definitions/BlockFile"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/block-files/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteBlockFiles",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Bulk delete block files",
        "description": "Delete multiple block files in a best-effort manner. Non-existant block file ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteBlockFilesRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of block files",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-generators": {
      "get": {
        "operationId": "ListBlockGenerators",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "List block generators",
        "description": "The `block-generators` endpoint returns all of the configured block generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockGenerator"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateBlockGenerator",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Create a block generator",
        "description": "Create a new block generator",
        "parameters": [
          {
            "name": "generator",
            "in": "body",
            "description": "New block generator",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockGenerator"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created block generator",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BlockGenerator"
            }
          }
        }
      }
    },
    "/block-generators/{id}": {
      "get": {
        "operationId": "GetBlockGenerator",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Get a block generator",
        "description": "Returns a block generator, by id.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BlockGenerator"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteBlockGenerator",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Delete a block generator",
        "description": "Deletes an existing block generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-generators/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateBlockGenerators",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Bulk create block generators",
        "description": "Create multiple block generators. Requests are processed in an\nall-or-nothing manner, i.e. a single block generator creation failure\ncauses all creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateBlockGeneratorsRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of block generators",
                  "items": {
                    "$ref": "#/definitions/BlockGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateBlockGeneratorsResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of created block generators",
                  "items": {
                    "$ref": "#/definitions/BlockGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/block-generators/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteBlockGenerators",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Bulk delete block generators",
        "description": "Delete multiple block generators in a best-effort manner. Non-existant block generators ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteBlockGeneratorsRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of block generators",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-generators/{id}/start": {
      "post": {
        "operationId": "StartBlockGenerator",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Start a block generator",
        "description": "Start an existing block generator.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created block generator result",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BlockGeneratorResult"
            }
          }
        }
      }
    },
    "/block-generators/{id}/stop": {
      "post": {
        "operationId": "StopBlockGenerator",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Stop a block generator",
        "description": "Stop a running block generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-generators/x/bulk-start": {
      "post": {
        "operationId": "BulkStartBlockGenerators",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Tell multiple block generators to start",
        "description": "Start multiple block generators.",
        "parameters": [
          {
            "name": "bulk_start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartBlockGeneratorsRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of block generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "description": "List started block generators results",
              "items": {
                "$ref": "#/definitions/BlockGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/block-generators/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopBlockGenerators",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Bulk stop block generators",
        "description": "Best-effort stop multiple block generators. Non-existent block generator ids do not cause errors. Idempotent.",
        "parameters": [
          {
            "name": "bulk_stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopBlockGeneratorsRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of block generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/block-generator-results": {
      "get": {
        "operationId": "ListBlockGeneratorResults",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "List block generator results",
        "description": "The `block-generator-results` endpoint returns all of the results produced by running block generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/block-generator-results/{id}": {
      "get": {
        "operationId": "GetBlockGeneratorResult",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Get a result from a block generator",
        "description": "Returns results from a block generator by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BlockGeneratorResult"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteBlockGeneratorResult",
        "tags": [
          "BlockGenerator"
        ],
        "summary": "Delete results from a block generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1block-files~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-generators": {
      "get": {
        "operationId": "ListMemoryGenerators",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "List memory generators",
        "description": "The `memory-generators` endpoint returns all of the configured memory generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemoryGenerator"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateMemoryGenerator",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Create a memory generator",
        "description": "Create a new memory generator",
        "parameters": [
          {
            "name": "generator",
            "in": "body",
            "description": "New memory generator",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemoryGenerator"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created memory generator",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/MemoryGenerator"
            }
          }
        }
      }
    },
    "/memory-generators/{id}": {
      "get": {
        "operationId": "GetMemoryGenerator",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Get a memory generator",
        "description": "Returns a memory generator, by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MemoryGenerator"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteMemoryGenerator",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Delete a memory generator",
        "description": "Deletes an existing memory generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1memory-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-generators/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateMemoryGenerators",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Bulk create memory generators",
        "description": "Create multiple memory generators. Requests are processed in an\nall-or-nothing manner, i.e. a single memory generator creation failure\ncauses all creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateMemoryGeneratorsRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of memory generators",
                  "items": {
                    "$ref": "#/definitions/MemoryGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateMemoryGeneratorsResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of created memory generators",
                  "items": {
                    "$ref": "#/definitions/MemoryGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/memory-generators/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteMemoryGenerators",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Bulk delete memory generators",
        "description": "Delete multiple memory generators in a best-effort manner. Non-existant memory generators ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteMemoryGeneratorsRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of memory generators",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-generators/{id}/start": {
      "post": {
        "operationId": "StartMemoryGenerator",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Start a memory generator",
        "description": "Start an existing memory generator.",
        "parameters": [
          {
            "$ref": "#/paths/~1memory-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created memory generator result",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/MemoryGeneratorResult"
            }
          }
        }
      }
    },
    "/memory-generators/{id}/stop": {
      "post": {
        "operationId": "StopMemoryGenerator",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Stop a memory generator",
        "description": "Stop a running memory generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1memory-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-generators/x/bulk-start": {
      "post": {
        "operationId": "BulkStartMemoryGenerators",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Tell multiple memory generators to start",
        "description": "Start multiple memory generators.",
        "parameters": [
          {
            "name": "bulk_start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartMemoryGeneratorsRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of memory generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "description": "List started memory generators results",
              "items": {
                "$ref": "#/definitions/MemoryGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/memory-generators/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopMemoryGenerators",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Bulk stop memory generators",
        "description": "Best-effort stop multiple memory generators. Non-existent memory generator ids do not cause errors. Idempotent.",
        "parameters": [
          {
            "name": "bulk_stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopMemoryGeneratorsRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of memory generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-generator-results": {
      "get": {
        "operationId": "ListMemoryGeneratorResults",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "List memory generator results",
        "description": "The `memory-generator-results` endpoint returns all of the results produced by running memory generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemoryGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/memory-generator-results/{id}": {
      "get": {
        "operationId": "GetMemoryGeneratorResult",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Get a result from a memory generator",
        "description": "Returns results from a memory generator by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1memory-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MemoryGeneratorResult"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteMemoryGeneratorResult",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Delete results from a memory generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1memory-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/memory-info": {
      "get": {
        "operationId": "MemoryInfo",
        "tags": [
          "MemoryGenerator"
        ],
        "summary": "Get a memory info",
        "description": "The `memory-info` endpoint returns memory info values such as total and free memory size",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "MemoryInfoResult",
              "properties": {
                "total_memory": {
                  "type": "integer",
                  "description": "Total amount of RAM (in bytes)",
                  "format": "int64"
                },
                "free_memory": {
                  "type": "integer",
                  "description": "Amount of free memory currently available (in bytes)",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/cpu-generators": {
      "get": {
        "operationId": "ListCpuGenerators",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "List CPU generators",
        "description": "The `cpu-generators` endpoint returns all of the configured CPU generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CpuGenerator"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CreateCpuGenerator",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Create a CPU generator",
        "description": "Create a new CPU generator",
        "parameters": [
          {
            "name": "generator",
            "in": "body",
            "description": "New CPU generator",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CpuGenerator"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created CPU generator",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CpuGenerator"
            }
          }
        }
      }
    },
    "/cpu-generators/{id}": {
      "get": {
        "operationId": "GetCpuGenerator",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Get a CPU generator",
        "description": "Returns a CPU generator, by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique resource identifier",
            "type": "string",
            "format": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CpuGenerator"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCpuGenerator",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Delete a CPU generator",
        "description": "Deletes an existing CPU generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1cpu-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/cpu-generators/x/bulk-create": {
      "post": {
        "operationId": "BulkCreateCpuGenerators",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Bulk create CPU generators",
        "description": "Create multiple CPU generators. Requests are processed in an\nall-or-nothing manner, i.e. a single CPU generator creation failure\ncauses all creations for this request to fail.\n",
        "parameters": [
          {
            "name": "create",
            "in": "body",
            "description": "Bulk creation",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkCreateCpuGeneratorsRequest",
              "description": "Parameters for the bulk create operation",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of CPU generators",
                  "items": {
                    "$ref": "#/definitions/CpuGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "BulkCreateCpuGeneratorsResponse",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of created cpu generators",
                  "items": {
                    "$ref": "#/definitions/CpuGenerator"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      }
    },
    "/cpu-generators/x/bulk-delete": {
      "post": {
        "operationId": "BulkDeleteCpuGenerators",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Bulk delete CPU generators",
        "description": "Delete multiple CPU generators in a best-effort manner. Non-existant CPU generators ids\ndo not cause errors. Idempotent.\n",
        "parameters": [
          {
            "name": "delete",
            "in": "body",
            "description": "Bulk delete",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkDeleteCpuGeneratorsRequest",
              "description": "Parameters for the bulk delete operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of CPU generators",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/cpu-generators/{id}/start": {
      "post": {
        "operationId": "StartCpuGenerator",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Start a CPU generator",
        "description": "Start an existing CPU generator.",
        "parameters": [
          {
            "$ref": "#/paths/~1cpu-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of created CPU generator result",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CpuGeneratorResult"
            }
          }
        }
      }
    },
    "/cpu-generators/{id}/stop": {
      "post": {
        "operationId": "StopCpuGenerator",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Stop a CPU generator",
        "description": "Stop a running CPU generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1cpu-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/cpu-generators/x/bulk-start": {
      "post": {
        "operationId": "BulkStartCpuGenerators",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Tell multiple CPU generators to start",
        "description": "Start multiple CPU generators.",
        "parameters": [
          {
            "name": "bulk_start",
            "in": "body",
            "description": "Bulk start",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStartCpuGeneratorsRequest",
              "description": "Parameters for the bulk start operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of CPU generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "description": "List started CPU generators results",
              "items": {
                "$ref": "#/definitions/CpuGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/cpu-generators/x/bulk-stop": {
      "post": {
        "operationId": "BulkStopCpuGenerators",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Bulk stop CPU generators",
        "description": "Best-effort stop multiple CPU generators. Non-existent CPU generator ids do not cause errors. Idempotent.",
        "parameters": [
          {
            "name": "bulk_stop",
            "in": "body",
            "description": "Bulk stop",
            "required": true,
            "schema": {
              "type": "object",
              "title": "BulkStopCpuGeneratorsRequest",
              "description": "Parameters for the bulk stop operation",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "List of CPU generator identifiers",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/cpu-generator-results": {
      "get": {
        "operationId": "ListCpuGeneratorResults",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "List CPU generator results",
        "description": "The `cpu-generator-results` endpoint returns all of the results produced by running CPU generators.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CpuGeneratorResult"
              }
            }
          }
        }
      }
    },
    "/cpu-generator-results/{id}": {
      "get": {
        "operationId": "GetCpuGeneratorResult",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Get a result from a CPU generator",
        "description": "Returns results from a CPU generator by result id.",
        "parameters": [
          {
            "$ref": "#/paths/~1cpu-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CpuGeneratorResult"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteCpuGeneratorResult",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Delete results from a CPU generator. Idempotent.",
        "parameters": [
          {
            "$ref": "#/paths/~1cpu-generators~1%7Bid%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/cpu-info": {
      "get": {
        "operationId": "CpuInfo",
        "tags": [
          "CpuGenerator"
        ],
        "summary": "Get a CPU info",
        "description": "The `cpu-info` endpoint returns CPU system info",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "cores": {
                  "type": "integer",
                  "description": "Number of cores"
                },
                "cache_line_size": {
                  "type": "integer",
                  "description": "Processor cache line size",
                  "format": "int64"
                },
                "architecture": {
                  "type": "string",
                  "description": "Processor architecture name"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Module": {
      "type": "object",
      "description": "A test module that has been statically linked or dynamically loaded into the process",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique module identifier",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of module functionality",
          "readOnly": true
        },
        "version": {
          "$ref": "#/definitions/ModuleVersion"
        },
        "linkage": {
          "type": "string",
          "description": "Linkage type",
          "readOnly": true,
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "path": {
          "type": "string",
          "description": "Path to module binary (dynamically-loaded modules only).",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "description",
        "version",
        "linkage"
      ]
    },
    "ModuleVersion": {
      "type": "object",
      "description": "Module version information",
      "properties": {
        "version": {
          "type": "integer",
          "description": "Module version number",
          "format": "int32",
          "readOnly": true
        },
        "build_number": {
          "type": "string",
          "description": "Module build number",
          "readOnly": true
        },
        "build_date": {
          "type": "string",
          "description": "Module build date",
          "format": "date-time",
          "readOnly": true
        },
        "source_commit": {
          "type": "string",
          "description": "Module version control revision",
          "readOnly": true
        }
      },
      "required": [
        "version"
      ]
    },
    "Interface": {
      "type": "object",
      "description": "Network interface",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique interface identifier"
        },
        "port_id": {
          "type": "string",
          "description": "Port identifier"
        },
        "config": {
          "type": "object",
          "description": "Interface configuration",
          "properties": {
            "protocols": {
              "type": "array",
              "description": "A stack of protocol configurations, beginning with the outermost protocol (i.e. closest to the physical port)\n",
              "items": {
                "$ref": "#/definitions/InterfaceProtocolConfig"
              },
              "minItems": 1
            }
          },
          "required": [
            "protocols"
          ]
        },
        "stats": {
          "$ref": "#/definitions/InterfaceStats"
        }
      },
      "required": [
        "id",
        "port_id",
        "config",
        "stats"
      ]
    },
    "InterfaceProtocolConfig": {
      "type": "object",
      "description": "Network interface protocol configuration",
      "properties": {
        "eth": {
          "type": "object",
          "description": "Ethernet protocol configuration",
          "properties": {
            "mac_address": {
              "type": "string",
              "description": "MAC address"
            }
          },
          "required": [
            "mac_address"
          ]
        },
        "ipv4": {
          "type": "object",
          "description": "IPv4 protocol configuration",
          "properties": {
            "method": {
              "type": "string",
              "description": "Configuration method",
              "enum": [
                "static",
                "dhcp",
                "auto"
              ]
            },
            "static": {
              "type": "object",
              "description": "Static configuration parameters",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "IP address"
                },
                "prefix_length": {
                  "type": "integer",
                  "description": "Prefix length",
                  "format": "int32"
                },
                "gateway": {
                  "type": "string",
                  "description": "Default gateway"
                }
              },
              "required": [
                "address",
                "prefix_length"
              ]
            },
            "dhcp": {
              "type": "object",
              "description": "DHCP configuration parameters",
              "properties": {
                "hostname": {
                  "type": "string",
                  "description": "Hostname to be requested"
                },
                "client": {
                  "type": "string",
                  "description": "Client identifier"
                }
              }
            }
          },
          "required": [
            "method"
          ]
        },
        "ipv6": {
          "type": "object",
          "description": "IPv6 protocol configuration",
          "properties": {
            "method": {
              "type": "string",
              "description": "Configuration method",
              "enum": [
                "static",
                "dhcp6",
                "auto"
              ]
            },
            "link_local_address": {
              "type": "string",
              "description": "IPv6 link local address"
            },
            "static": {
              "type": "object",
              "description": "Static configuration parameters",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "IPv6 address"
                },
                "prefix_length": {
                  "type": "integer",
                  "description": "Prefix length",
                  "format": "int32"
                },
                "gateway": {
                  "type": "string",
                  "description": "Default gateway"
                }
              },
              "required": [
                "address",
                "prefix_length"
              ]
            },
            "dhcp6": {
              "type": "object",
              "description": "DHCPv6 configuration parameters",
              "properties": {
                "stateless": {
                  "type": "boolean",
                  "description": "Stateless DHCPv6",
                  "default": true
                }
              },
              "required": [
                "stateless"
              ]
            }
          },
          "required": [
            "method"
          ]
        }
      }
    },
    "InterfaceStats": {
      "type": "object",
      "description": "Per-interface statistics",
      "properties": {
        "rx_packets": {
          "type": "integer",
          "description": "Received packets",
          "format": "int64"
        },
        "tx_packets": {
          "type": "integer",
          "description": "Transmitted packets",
          "format": "int64"
        },
        "rx_bytes": {
          "type": "integer",
          "description": "Received bytes",
          "format": "int64"
        },
        "tx_bytes": {
          "type": "integer",
          "description": "Transmitted bytes",
          "format": "int64"
        },
        "rx_errors": {
          "type": "integer",
          "description": "Receive-side errors",
          "format": "int64"
        },
        "tx_errors": {
          "type": "integer",
          "description": "Transmit-side errors",
          "format": "int64"
        }
      },
      "required": [
        "rx_packets",
        "tx_packets",
        "rx_bytes",
        "tx_bytes",
        "rx_errors",
        "tx_errors"
      ]
    },
    "Port": {
      "type": "object",
      "description": "Physical port or port-equivalent (e.g. bonded ports)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique port identifier"
        },
        "kind": {
          "type": "string",
          "description": "Port kind",
          "enum": [
            "dpdk",
            "host",
            "bond"
          ]
        },
        "config": {
          "$ref": "#/definitions/PortConfig"
        },
        "status": {
          "$ref": "#/definitions/PortStatus"
        },
        "stats": {
          "$ref": "#/definitions/PortStats"
        }
      },
      "required": [
        "id",
        "kind",
        "config",
        "status",
        "stats"
      ]
    },
    "PortConfig": {
      "type": "object",
      "description": "Port configuration",
      "properties": {
        "dpdk": {
          "type": "object",
          "description": "DPDK-specific configuration information",
          "properties": {
            "auto_negotiation": {
              "type": "boolean",
              "description": "Enable link auto-negotiation"
            },
            "speed": {
              "type": "integer",
              "description": "Manually-configured port speed (in Mbps)",
              "format": "int64"
            },
            "duplex": {
              "type": "string",
              "description": "Manually-configured port duplex",
              "enum": [
                "full",
                "half"
              ]
            }
          },
          "required": [
            "auto_negotiation"
          ]
        },
        "bond": {
          "type": "object",
          "description": "Bond-specific configuration information",
          "properties": {
            "mode": {
              "type": "string",
              "description": "Port bonding mode",
              "enum": [
                "lag_802_3_ad"
              ]
            },
            "ports": {
              "type": "array",
              "description": "Unique identifiers of bonded ports",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          },
          "required": [
            "mode",
            "ports"
          ]
        }
      }
    },
    "PortStats": {
      "type": "object",
      "description": "Port statistics",
      "properties": {
        "rx_packets": {
          "type": "integer",
          "description": "Received packets",
          "format": "int64"
        },
        "tx_packets": {
          "type": "integer",
          "description": "Transmitted packets",
          "format": "int64"
        },
        "rx_bytes": {
          "type": "integer",
          "description": "Received bytes",
          "format": "int64"
        },
        "tx_bytes": {
          "type": "integer",
          "description": "Transmitted bytes",
          "format": "int64"
        },
        "rx_errors": {
          "type": "integer",
          "description": "Receive-side errors",
          "format": "int64"
        },
        "tx_errors": {
          "type": "integer",
          "description": "Transmit-side errors",
          "format": "int64"
        }
      },
      "required": [
        "rx_packets",
        "tx_packets",
        "rx_bytes",
        "tx_bytes",
        "rx_errors",
        "tx_errors"
      ]
    },
    "PortStatus": {
      "type": "object",
      "description": "Port status",
      "properties": {
        "link": {
          "type": "string",
          "description": "Link status",
          "enum": [
            "up",
            "down",
            "unknown"
          ]
        },
        "speed": {
          "type": "integer",
          "description": "Port speed (in Mbps)",
          "format": "int64"
        },
        "duplex": {
          "type": "string",
          "description": "Port duplex",
          "enum": [
            "full",
            "half",
            "unknown"
          ]
        }
      },
      "required": [
        "link",
        "speed",
        "duplex"
      ]
    },
    "Stack": {
      "type": "object",
      "description": "A TCP/IP stack instance",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique stack identifier"
        },
        "stats": {
          "$ref": "#/definitions/StackStats"
        }
      },
      "required": [
        "id",
        "stats"
      ]
    },
    "StackElementStats": {
      "type": "object",
      "description": "Stack element statistics",
      "properties": {
        "used": {
          "type": "integer",
          "description": "Used (elements)",
          "format": "int32"
        },
        "max": {
          "type": "integer",
          "description": "Maximum (elements)",
          "format": "int32"
        },
        "errors": {
          "type": "integer",
          "description": "Errors (count)",
          "format": "int32"
        }
      },
      "required": [
        "used",
        "max",
        "errors"
      ]
    },
    "StackMemoryStats": {
      "type": "object",
      "description": "Stack memory statistics",
      "properties": {
        "name": {
          "type": "string",
          "description": "Pool name"
        },
        "available": {
          "type": "integer",
          "description": "Available (bytes free)",
          "format": "int64"
        },
        "used": {
          "type": "integer",
          "description": "Used (bytes allocated)",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "description": "Maximum (bytes allocated)",
          "format": "int64"
        },
        "errors": {
          "type": "integer",
          "description": "Errors (count)",
          "format": "int64"
        },
        "illegal": {
          "type": "integer",
          "description": "Illegal operations (count)",
          "format": "int64"
        }
      },
      "required": [
        "name",
        "available",
        "used",
        "max",
        "errors",
        "illegal"
      ]
    },
    "StackProtocolStats": {
      "type": "object",
      "description": "Stack per-protocol statistics",
      "properties": {
        "tx_packets": {
          "type": "integer",
          "description": "Transmitted packets",
          "format": "int64"
        },
        "rx_packets": {
          "type": "integer",
          "description": "Received packets",
          "format": "int64"
        },
        "forwarded_packets": {
          "type": "integer",
          "description": "Forwarded packets",
          "format": "int64"
        },
        "dropped_packets": {
          "type": "integer",
          "description": "Dropped packets",
          "format": "int64"
        },
        "checksum_errors": {
          "type": "integer",
          "description": "Checksum errors",
          "format": "int64"
        },
        "length_errors": {
          "type": "integer",
          "description": "Invalid length errors",
          "format": "int64"
        },
        "memory_errors": {
          "type": "integer",
          "description": "Out of memory errors",
          "format": "int64"
        },
        "routing_errors": {
          "type": "integer",
          "description": "Routing errors",
          "format": "int64"
        },
        "protocol_errors": {
          "type": "integer",
          "description": "Protocol error",
          "format": "int64"
        },
        "option_errors": {
          "type": "integer",
          "description": "Errors in options",
          "format": "int64"
        },
        "misc_errors": {
          "type": "integer",
          "description": "Miscellaneous errors",
          "format": "int64"
        },
        "cache_hits": {
          "type": "integer",
          "description": "Cache hits",
          "format": "int64"
        }
      },
      "required": [
        "tx_packets",
        "rx_packets",
        "forwarded_packets",
        "dropped_packets",
        "checksum_errors",
        "length_errors",
        "memory_errors",
        "routing_errors",
        "protocol_errors",
        "option_errors",
        "misc_errors",
        "cache_hits"
      ]
    },
    "StackStats": {
      "type": "object",
      "description": "Stack statistics",
      "properties": {
        "arp": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "ipv4": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "ipv4_frag": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "icmpv4": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "igmp": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "nd": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "ipv6": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "ipv6_frag": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "icmpv6": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "mld": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "udp": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "tcp": {
          "$ref": "#/definitions/StackProtocolStats"
        },
        "heap": {
          "$ref": "#/definitions/StackMemoryStats"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackMemoryStats"
          }
        },
        "sems": {
          "$ref": "#/definitions/StackElementStats"
        },
        "mutexes": {
          "$ref": "#/definitions/StackElementStats"
        },
        "mboxes": {
          "$ref": "#/definitions/StackElementStats"
        }
      },
      "required": [
        "arp",
        "ipv4",
        "ipv4_frag",
        "icmpv4",
        "igmp",
        "nd",
        "ipv6",
        "ipv6_frag",
        "icmpv6",
        "mld",
        "udp",
        "tcp",
        "heap",
        "pools",
        "sems",
        "mutexes",
        "mboxes"
      ]
    },
    "DurationRemainder": {
      "type": "object",
      "description": "Specifies how much time remains for an object to be active",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Specifies how the duration is measured",
          "enum": [
            "indefinite",
            "frames",
            "seconds"
          ]
        },
        "value": {
          "type": "integer",
          "description": "Specifies the remaining duration for definite durations",
          "format": "int64",
          "minimum": 0
        }
      },
      "required": [
        "unit"
      ]
    },
    "PacketProtocolCustom": {
      "type": "object",
      "description": "Defines an arbitrary sequence of data",
      "properties": {
        "data": {
          "type": "string",
          "description": "A base64 encoded representation of binary data"
        }
      },
      "required": [
        "data"
      ]
    },
    "PacketProtocolEthernet": {
      "description": "Describes an Ethernet header",
      "properties": {
        "destination": {
          "description": "Ethernet MAC destination address",
          "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$",
          "type": "string"
        },
        "ether_type": {
          "description": "Ethernet ether type",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "source": {
          "description": "Ethernet MAC source address",
          "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PacketProtocolIpv4": {
      "description": "Describes an IPv4 header",
      "properties": {
        "checksum": {
          "description": "IPv4 checksum",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "destination": {
          "description": "IPv4 destination address",
          "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$",
          "type": "string"
        },
        "dscp": {
          "description": "IPv4 dscp",
          "format": "int32",
          "maximum": 63,
          "minimum": 0,
          "type": "integer"
        },
        "ecn": {
          "description": "IPv4 ecn",
          "enum": [
            "non_ect",
            "ect_0",
            "ect_1",
            "ce"
          ],
          "type": "string"
        },
        "flags": {
          "description": "IPv4 flags",
          "items": {
            "enum": [
              "evil_bit",
              "dont_fragment",
              "more_fragments"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "fragment_offset": {
          "description": "IPv4 fragment offset",
          "format": "int32",
          "maximum": 65528,
          "minimum": 0,
          "multipleOf": 8,
          "type": "integer"
        },
        "header_length": {
          "default": 20,
          "description": "IPv4 header length",
          "format": "int32",
          "maximum": 60,
          "minimum": 0,
          "multipleOf": 4,
          "type": "integer"
        },
        "identification": {
          "description": "IPv4 identification",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "protocol": {
          "default": 254,
          "description": "IPv4 protocol",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "source": {
          "description": "IPv4 source address",
          "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$",
          "type": "string"
        },
        "time_to_live": {
          "default": 64,
          "description": "IPv4 time to live",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "total_length": {
          "description": "IPv4 total length",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "version": {
          "default": 4,
          "description": "IPv4 version",
          "format": "int32",
          "maximum": 15,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PacketProtocolIpv6": {
      "description": "Describes an IPv6 header",
      "properties": {
        "destination": {
          "description": "IPv6 destination address",
          "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$",
          "type": "string"
        },
        "flow_label": {
          "description": "IPv6 flow label",
          "format": "int32",
          "maximum": 1048575,
          "minimum": 0,
          "type": "integer"
        },
        "hop_limit": {
          "default": 64,
          "description": "IPv6 hop limit",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "next_header": {
          "default": 59,
          "description": "IPv6 next header",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "payload_length": {
          "description": "IPv6 payload length",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "source": {
          "description": "IPv6 source address",
          "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$",
          "type": "string"
        },
        "traffic_class": {
          "description": "IPv6 traffic class",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "version": {
          "default": 6,
          "description": "IPv6 version",
          "format": "int32",
          "maximum": 15,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PacketProtocolMpls": {
      "description": "Describes a MPLS header",
      "properties": {
        "bottom_of_stack": {
          "description": "MPLS bottom of stack",
          "type": "boolean"
        },
        "label": {
          "description": "MPLS label",
          "format": "int32",
          "maximum": 1048575,
          "minimum": 0,
          "type": "integer"
        },
        "traffic_class": {
          "description": "MPLS traffic class",
          "format": "int32",
          "maximum": 7,
          "minimum": 0,
          "type": "integer"
        },
        "ttl": {
          "default": 64,
          "description": "MPLS ttl",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PacketProtocolTcp": {
      "description": "Describes a tcp header",
      "properties": {
        "ack": {
          "description": "tcp ack",
          "format": "int64",
          "maximum": 4294967295,
          "minimum": 0,
          "type": "integer"
        },
        "checksum": {
          "description": "tcp checksum",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "data_offset": {
          "description": "tcp data offset",
          "format": "int32",
          "maximum": 60,
          "minimum": 0,
          "multipleOf": 4,
          "type": "integer"
        },
        "destination": {
          "default": 3357,
          "description": "tcp destination",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "flags": {
          "description": "tcp flags",
          "items": {
            "enum": [
              "ns",
              "cwr",
              "ece",
              "urg",
              "ack",
              "psh",
              "rst",
              "syn",
              "fin"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "reserved": {
          "description": "tcp reserved",
          "format": "int32",
          "maximum": 7,
          "minimum": 0,
          "type": "integer"
        },
        "sequence": {
          "description": "tcp sequence",
          "format": "int64",
          "maximum": 4294967295,
          "minimum": 0,
          "type": "integer"
        },
        "source": {
          "default": 3357,
          "description": "tcp source",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "urgent_pointer": {
          "description": "tcp urgent pointer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "window": {
          "description": "tcp window",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PacketProtocolUdp": {
      "description": "Describes a udp header",
      "properties": {
        "checksum": {
          "description": "udp checksum",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "destination": {
          "default": 3357,
          "description": "udp destination",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "length": {
          "description": "udp length",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "source": {
          "default": 3357,
          "description": "udp source",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PacketProtocolVlan": {
      "description": "Describes a vlan header",
      "properties": {
        "drop_eligible": {
          "description": "vlan drop eligible",
          "type": "boolean"
        },
        "ether_type": {
          "description": "vlan ether type",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "description": "vlan id",
          "format": "int32",
          "maximum": 4095,
          "minimum": 0,
          "type": "integer"
        },
        "priority": {
          "description": "vlan priority",
          "enum": [
            "network_control",
            "internetwork_control",
            "voice",
            "video",
            "critical_app",
            "excellent_effort",
            "background",
            "best_effort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Analyzer": {
      "type": "object",
      "description": "Packet analyzer; analyzers count received traffic and generate statistics\nusing various analysis methods.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique analyzer identifier"
        },
        "source_id": {
          "type": "string",
          "description": "Specifies the unique source of packets for this analyzer. This\nid may refer to either a port or an interface.\n"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether this object is currently analyzing packets or not.\n"
        },
        "config": {
          "$ref": "#/definitions/AnalyzerConfig"
        }
      },
      "required": [
        "id",
        "source_id",
        "active",
        "config"
      ]
    },
    "AnalyzerConfig": {
      "type": "object",
      "description": "Packet analyzer configuration; the configuration specifies what packets\nare analyzed and what results are calculated.\n",
      "properties": {
        "filter": {
          "type": "string",
          "description": "Berkley Packet Filter (BPF) rules that matches input packets for this\nanalyzer to count. An empty rule, the default, matches all frames.\n"
        },
        "protocol_counters": {
          "type": "array",
          "description": "List of protocol counters to update per analyzer for received packets.\n",
          "items": {
            "type": "string",
            "enum": [
              "ethernet",
              "ip",
              "protocol",
              "tunnel",
              "tunnel_ethernet",
              "tunnel_ip",
              "tunnel_protocol"
            ],
            "uniqueItems": true
          }
        },
        "flow_counters": {
          "type": "array",
          "description": "List of results to generate per flow for received packets.\nSequencing, latency, and jitter results require Spirent signatures\nin the received packets.\n",
          "items": {
            "type": "string",
            "enum": [
              "frame_count",
              "frame_length",
              "advanced_sequencing",
              "interarrival_time",
              "latency",
              "jitter_ipdv",
              "jitter_rfc",
              "prbs"
            ],
            "default": [
              "frame_count"
            ],
            "uniqueItems": true
          }
        }
      },
      "required": [
        "protocol_counters",
        "flow_counters"
      ]
    },
    "AnalyzerResult": {
      "type": "object",
      "description": "Results collected by a running packet analyzer",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique analyzer result identifier"
        },
        "analyzer_id": {
          "type": "string",
          "description": "Unique analyzer identifier that generated this result"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether the result is currently receiving updates"
        },
        "protocol_counters": {
          "$ref": "#/definitions/AnalyzerProtocolCounters"
        },
        "flow_counters": {
          "$ref": "#/definitions/AnalyzerFlowCounters"
        },
        "flows": {
          "type": "array",
          "description": "List of unique flow ids included in stats. Individual flow\nstatistics may be queried via the `rx-flows` endpoint.\n",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "active",
        "protocol_counters",
        "flow_counters",
        "flows"
      ]
    },
    "AnalyzerProtocolCounters": {
      "type": "object",
      "description": "Result counters for protocols",
      "properties": {
        "ethernet": {
          "type": "object",
          "description": "Layer 2 protocol counters",
          "properties": {
            "ip": {
              "type": "integer",
              "description": "Number of IPv4/IPv6 frames",
              "format": "int64",
              "minimum": 0
            },
            "timesync": {
              "type": "integer",
              "description": "Number of Precision Time Protocol frames",
              "format": "int64",
              "minimum": 0
            },
            "arp": {
              "type": "integer",
              "description": "Number of Address Resolution Protocol frames",
              "format": "int64",
              "minimum": 0
            },
            "lldp": {
              "type": "integer",
              "description": "Number of Link Layer Discover Protocol frames",
              "format": "int64",
              "minimum": 0
            },
            "nsh": {
              "type": "integer",
              "description": "Number of Network Service Header frames",
              "format": "int64",
              "minimum": 0
            },
            "vlan": {
              "type": "integer",
              "description": "Number of Virtual LAN frames",
              "format": "int64",
              "minimum": 0
            },
            "qinq": {
              "type": "integer",
              "description": "Number of Queue-in-Queue frames",
              "format": "int64",
              "minimum": 0
            },
            "pppoe": {
              "type": "integer",
              "description": "Number of PPP over Ethernet frames",
              "format": "int64",
              "minimum": 0
            },
            "fcoe": {
              "type": "integer",
              "description": "Number of Fiber Channel over Ethernet frames",
              "format": "int64",
              "minimum": 0
            },
            "mpls": {
              "type": "integer",
              "description": "Number of Multi Protocol Label Switched frames",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "ip",
            "timesync",
            "arp",
            "lldp",
            "nsh",
            "vlan",
            "qinq",
            "pppoe",
            "fcoe",
            "mpls"
          ]
        },
        "ip": {
          "type": "object",
          "description": "Layer 3 protocol counters",
          "properties": {
            "ipv4": {
              "type": "integer",
              "description": "Number of IPv4 packets without extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv4_ext": {
              "type": "integer",
              "description": "Number of IPv4 packets with well-known extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv4_ext_unknown": {
              "type": "integer",
              "description": "Number of IPv4 packets with unknown extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6": {
              "type": "integer",
              "description": "Number of IPv6 packets without extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6_ext": {
              "type": "integer",
              "description": "Number of IPv6 packets with well-known extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6_ext_unknown": {
              "type": "integer",
              "description": "Number of IPv6 packets with unknown extensions",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "ipv4",
            "ipv4_ext",
            "ipv4_ext_unknown",
            "ipv6",
            "ipv6_ext",
            "ipv6_ext_unknown"
          ]
        },
        "protocol": {
          "type": "object",
          "description": "Layer 4 protocol counters",
          "properties": {
            "tcp": {
              "type": "integer",
              "description": "Number of Transmission Control Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "udp": {
              "type": "integer",
              "description": "Number of User Data Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "fragmented": {
              "type": "integer",
              "description": "Number of fragmented packets",
              "format": "int64",
              "minimum": 0
            },
            "sctp": {
              "type": "integer",
              "description": "Number of Stream Control Transmission Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "icmp": {
              "type": "integer",
              "description": "Number of Internet Control Message Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "non_fragmented": {
              "type": "integer",
              "description": "Number of non-fragmented packets",
              "format": "int64",
              "minimum": 0
            },
            "igmp": {
              "type": "integer",
              "description": "Number of Internet Group Management Protocol packets",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "tcp",
            "udp",
            "fragmented",
            "sctp",
            "icmp",
            "non_fragmented",
            "igmp"
          ]
        },
        "tunnel": {
          "type": "object",
          "description": "Tunnel protocol counters",
          "properties": {
            "ip": {
              "type": "integer",
              "description": "Number of IP in IP packets",
              "format": "int64",
              "minimum": 0
            },
            "gre": {
              "type": "integer",
              "description": "Number of Generic Routing Encapsulation packets",
              "format": "int64",
              "minimum": 0
            },
            "vxlan": {
              "type": "integer",
              "description": "Number of Virtual eXtensible LAN packets",
              "format": "int64",
              "minimum": 0
            },
            "nvgre": {
              "type": "integer",
              "description": "Number of Network Virtualization using GRE packets",
              "format": "int64",
              "minimum": 0
            },
            "geneve": {
              "type": "integer",
              "description": "Number of Generic Network Virtualization Encapsulation packets",
              "format": "int64",
              "minimum": 0
            },
            "grenat": {
              "type": "integer",
              "description": "Number of Teredo, VXLAN, or GRE packets on limited hardware",
              "format": "int64",
              "minimum": 0
            },
            "gtpc": {
              "type": "integer",
              "description": "Number of GPRS Tunneling Protocol control packets",
              "format": "int64",
              "minimum": 0
            },
            "gtpu": {
              "type": "integer",
              "description": "Number of GPRS Tunneling Protocol user packets",
              "format": "int64",
              "minimum": 0
            },
            "esp": {
              "type": "integer",
              "description": "Number of IP Encapsulating Security Payload packets",
              "format": "int64",
              "minimum": 0
            },
            "l2tp": {
              "type": "integer",
              "description": "Number of Layer 2 Tunneling Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "vxlan_gpe": {
              "type": "integer",
              "description": "Number of VXLAN Generic Protocol Extension packets",
              "format": "int64",
              "minimum": 0
            },
            "mpls_in_gre": {
              "type": "integer",
              "description": "Number of MPLS-in-GRE packets (RFC 4023)",
              "format": "int64",
              "minimum": 0
            },
            "mpls_in_udp": {
              "type": "integer",
              "description": "Number of MPLS-in-UDP packets (RFC 7510)",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "ip",
            "gre",
            "vxlan",
            "nvgre",
            "geneve",
            "grenat",
            "gtpc",
            "gtpu",
            "esp",
            "l2tp",
            "vxlan_gpe",
            "mpls_in_gre",
            "mpls_in_udp"
          ]
        },
        "inner_ethernet": {
          "type": "object",
          "description": "Inner layer 2 protocol counters",
          "properties": {
            "ip": {
              "type": "integer",
              "description": "Number of IPv6/IPv6 frames",
              "format": "int64",
              "minimum": 0
            },
            "vlan": {
              "type": "integer",
              "description": "Number of Virtual LAN frames",
              "format": "int64",
              "minimum": 0
            },
            "qinq": {
              "type": "integer",
              "description": "Number of Queue-in-Queue frames",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "ip",
            "vlan",
            "qinq"
          ]
        },
        "inner_ip": {
          "type": "object",
          "description": "Inner layer 3 protocol counters",
          "properties": {
            "ipv4": {
              "type": "integer",
              "description": "Number of IPv4 packets without extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv4_ext": {
              "type": "integer",
              "description": "Number of IPv4 packets with well-known extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv4_ext_unknown": {
              "type": "integer",
              "description": "Number of IPv4 packets with unknown extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6": {
              "type": "integer",
              "description": "Number of IPv6 packets without extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6_ext": {
              "type": "integer",
              "description": "Number of IPv6 packets with well-known extensions",
              "format": "int64",
              "minimum": 0
            },
            "ipv6_ext_unknown": {
              "type": "integer",
              "description": "Number of IPv6 packets with unknown extensions",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "ipv4",
            "ipv4_ext",
            "ipv4_ext_unknown",
            "ipv6",
            "ipv6_ext",
            "ipv6_ext_unknown"
          ]
        },
        "inner_protocol": {
          "type": "object",
          "description": "Inner layer 4 protocol counters",
          "properties": {
            "tcp": {
              "type": "integer",
              "description": "Number of Transmission Control Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "udp": {
              "type": "integer",
              "description": "Number of User Data Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "fragmented": {
              "type": "integer",
              "description": "Number of fragmented packets",
              "format": "int64",
              "minimum": 0
            },
            "sctp": {
              "type": "integer",
              "description": "Number of Stream Control Transmission Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "icmp": {
              "type": "integer",
              "description": "Number of Internet Control Message Protocol packets",
              "format": "int64",
              "minimum": 0
            },
            "non_fragmented": {
              "type": "integer",
              "description": "Number of non-fragmented packets",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "tcp",
            "udp",
            "fragmented",
            "sctp",
            "icmp",
            "non_fragmented"
          ]
        }
      }
    },
    "AnalyzerFlowSummaryCounters": {
      "type": "object",
      "description": "Summary results for per-packet statistics",
      "properties": {
        "min": {
          "type": "integer",
          "description": "Minimum value",
          "format": "int64",
          "minimum": 0
        },
        "max": {
          "type": "integer",
          "description": "Maximum value",
          "format": "int64",
          "minimum": 0
        },
        "total": {
          "type": "integer",
          "description": "Sum of all received values",
          "format": "int64",
          "minimum": 0
        },
        "std_dev": {
          "type": "integer",
          "description": "Standard deviation of received values",
          "format": "int64",
          "minimum": 0
        }
      },
      "required": [
        "total"
      ]
    },
    "AnalyzerFlowCounters": {
      "type": "object",
      "description": "Result counters for flows",
      "properties": {
        "frame_length": {
          "type": "object",
          "description": "Frame length result counters",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AnalyzerFlowSummaryCounters"
            },
            "units": {
              "type": "string",
              "description": "Frame length result units",
              "enum": [
                "octets"
              ]
            }
          },
          "required": [
            "summary",
            "units"
          ]
        },
        "interarrival": {
          "type": "object",
          "description": "Inter-arrival time result counters",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AnalyzerFlowSummaryCounters"
            },
            "units": {
              "type": "string",
              "description": "Inter-arrival time measurement units",
              "enum": [
                "nanoseconds"
              ]
            }
          },
          "required": [
            "summary",
            "units"
          ]
        },
        "jitter_ipdv": {
          "type": "object",
          "description": "Jitter (RFC 3393) result counters",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AnalyzerFlowSummaryCounters"
            },
            "units": {
              "type": "string",
              "description": "Jitter time measurement units",
              "enum": [
                "nanoseconds"
              ]
            }
          },
          "required": [
            "summary",
            "units"
          ]
        },
        "jitter_rfc": {
          "type": "object",
          "description": "Jitter (RFC 4737) result counters",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AnalyzerFlowSummaryCounters"
            },
            "units": {
              "type": "string",
              "description": "Jitter time measurement units",
              "enum": [
                "nanoseconds"
              ]
            }
          },
          "required": [
            "summary",
            "units"
          ]
        },
        "latency": {
          "type": "object",
          "description": "Latency result counters",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AnalyzerFlowSummaryCounters"
            },
            "units": {
              "type": "string",
              "description": "Latency measurement units",
              "enum": [
                "nanoseconds"
              ]
            }
          },
          "required": [
            "summary",
            "units"
          ]
        },
        "sequence": {
          "type": "object",
          "description": "Advanced Sequencing result counters",
          "properties": {
            "dropped": {
              "type": "integer",
              "description": "Number of packets expected but not yet received",
              "format": "int64",
              "minimum": 0
            },
            "duplicate": {
              "type": "integer",
              "description": "Number of duplicate packets received",
              "format": "int64",
              "minimum": 0
            },
            "late": {
              "type": "integer",
              "description": "Number of late packets received",
              "format": "int64",
              "minimum": 0
            },
            "reordered": {
              "type": "integer",
              "description": "Number of reordered packets received",
              "format": "int64",
              "minimum": 0
            },
            "in_order": {
              "type": "integer",
              "description": "Number of packets received in the expected sequence",
              "format": "int64",
              "minimum": 0
            },
            "run_length": {
              "type": "integer",
              "description": "Number of packets received in sequence",
              "format": "int64",
              "minimum": 0
            }
          },
          "required": [
            "dropped",
            "duplicate",
            "late",
            "reordered",
            "in_order",
            "run_length"
          ]
        },
        "frame_count": {
          "type": "integer",
          "description": "Number of received packets",
          "format": "int64",
          "minimum": 0
        },
        "timestamp_first": {
          "type": "string",
          "description": "Timestamp of first received packet",
          "format": "date-time"
        },
        "timestamp_last": {
          "type": "string",
          "description": "Timestamp of last received packed",
          "format": "date-time"
        }
      },
      "required": [
        "frame_count"
      ]
    },
    "RxFlow": {
      "type": "object",
      "description": "Counters for a flow of packets",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique received flow identifier"
        },
        "analyzer_result_id": {
          "type": "string",
          "description": "Unique analyzer result identifier that observed this flow"
        },
        "counters": {
          "$ref": "#/definitions/AnalyzerFlowCounters"
        }
      },
      "required": [
        "id",
        "analyzer_result_id",
        "counters"
      ]
    },
    "PacketGenerator": {
      "type": "object",
      "description": "Packet generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique generator identifier"
        },
        "target_id": {
          "type": "string",
          "description": "Specifies the unique target for packets from this generator. This\nid may refer to either a port or an interface id.\n"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether this object is currently generating packets or not.\n"
        },
        "config": {
          "$ref": "#/definitions/PacketGeneratorConfig"
        }
      },
      "required": [
        "id",
        "target_id",
        "active",
        "config"
      ]
    },
    "PacketGeneratorConfig": {
      "type": "object",
      "description": "Packet generator configuration",
      "properties": {
        "duration": {
          "type": "object",
          "description": "Describes how long a packet generator should transmit traffic once\nstarted. Only one property may be set.\n",
          "properties": {
            "continuous": {
              "type": "boolean",
              "description": "Indicates there is no duration limit when set."
            },
            "frames": {
              "type": "integer",
              "description": "Specifies the duration as number of transmitted frames.",
              "format": "int32",
              "minimum": 1
            },
            "time": {
              "type": "object",
              "description": "Describes the transmit time",
              "properties": {
                "value": {
                  "type": "integer",
                  "description": "Specifies the value for time based transmission",
                  "format": "int32",
                  "minimum": 1
                },
                "units": {
                  "type": "string",
                  "description": "Specifies the units for value",
                  "enum": [
                    "hours",
                    "minutes",
                    "seconds",
                    "milliseconds"
                  ]
                }
              },
              "required": [
                "value",
                "units"
              ]
            }
          }
        },
        "flow_count": {
          "type": "integer",
          "description": "Specifies the total number of flows in all traffic definitions",
          "format": "int64",
          "minimum": 1
        },
        "load": {
          "$ref": "#/definitions/TrafficLoad"
        },
        "order": {
          "type": "string",
          "description": "Tells the generator how to sequence multiple traffic definitions. Only\nneeded if more than one traffic definition is present.\n",
          "enum": [
            "round-robin",
            "sequential"
          ]
        },
        "traffic": {
          "type": "array",
          "description": "List of traffic definitions",
          "items": {
            "$ref": "#/definitions/TrafficDefinition"
          },
          "minItems": 1
        }
      },
      "required": [
        "duration",
        "load",
        "traffic"
      ]
    },
    "PacketGeneratorFlowCounters": {
      "type": "object",
      "description": "Packet generator statistics",
      "properties": {
        "errors": {
          "type": "integer",
          "description": "The number of packets not transmitted due to errors",
          "format": "int64",
          "minimum": 0
        },
        "octets_actual": {
          "type": "integer",
          "description": "The total number of octets that have been transmitted",
          "format": "int64",
          "minimum": 0
        },
        "octets_intended": {
          "type": "integer",
          "description": "The total number of octets that should have been transmitted",
          "format": "int64",
          "minimum": 0
        },
        "packets_actual": {
          "type": "integer",
          "description": "The total number of packets that have been transmitted",
          "format": "int64",
          "minimum": 0
        },
        "packets_intended": {
          "type": "integer",
          "description": "The total number of packets that should have been transmitted",
          "format": "int64",
          "minimum": 0
        },
        "timestamp_first": {
          "type": "string",
          "description": "The timestamp of the first transmitted packet",
          "format": "date-time"
        },
        "timestamp_last": {
          "type": "string",
          "description": "The timestamp of the most recently transmitted packet",
          "format": "date-time"
        }
      },
      "required": [
        "errors",
        "octets_actual",
        "octets_intended",
        "packets_actual",
        "packets_intended"
      ]
    },
    "PacketGeneratorResult": {
      "type": "object",
      "description": "Results produced by a packet generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique generator result identifier"
        },
        "generator_id": {
          "type": "string",
          "description": "Unique generator identifier that produced this result"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether this result is currently being updated"
        },
        "flow_counters": {
          "$ref": "#/definitions/PacketGeneratorFlowCounters"
        },
        "flows": {
          "type": "array",
          "description": "List of unique flow ids included in stats. Individual flow\nstatistics may be queried via the `tx-flows` endpoint.\n",
          "items": {
            "type": "string"
          }
        },
        "remaining": {
          "$ref": "#/definitions/DurationRemainder"
        }
      },
      "required": [
        "id",
        "active",
        "flow_counters",
        "flows"
      ]
    },
    "SpirentSignature": {
      "type": "object",
      "description": "Configures Spirent test signature",
      "properties": {
        "stream_id": {
          "type": "integer",
          "description": "Stream IDs are created for each flow of the definition. This\nproperty specifies the ID to use for the first flow. Subsequent\nflows will use incremented IDs. For example, if a traffic\ndefinitions contains 20 flows with a first_stream_id value of\n1, then the definition will use 1-20 for stream ids.\n",
          "format": "int32"
        },
        "fill": {
          "type": "object",
          "description": "Specifies optional packet payload fill",
          "properties": {
            "constant": {
              "type": "integer",
              "description": "Constant, repeating fill value for payload",
              "format": "int32",
              "minimum": 0,
              "maximum": 65535
            },
            "decrement": {
              "type": "integer",
              "description": "Decrement octet values for payload",
              "format": "int32",
              "minimum": 0,
              "maximum": 255
            },
            "increment": {
              "type": "integer",
              "description": "Increment octet values for payload",
              "format": "int32",
              "minimum": 0,
              "maximum": 255
            },
            "prbs": {
              "type": "boolean",
              "description": "Use pseudo random bit sequence for payload"
            }
          }
        },
        "latency": {
          "type": "string",
          "description": "Indicates timestamp offset",
          "enum": [
            "start_of_frame",
            "end_of_frame"
          ]
        }
      },
      "required": [
        "stream_id",
        "latency"
      ]
    },
    "TrafficDefinition": {
      "type": "object",
      "description": "Describes a sequence of traffic for a packet generator to transmit",
      "properties": {
        "packet": {
          "$ref": "#/definitions/TrafficPacketTemplate"
        },
        "length": {
          "$ref": "#/definitions/TrafficLength"
        },
        "signature": {
          "$ref": "#/definitions/SpirentSignature"
        },
        "weight": {
          "type": "integer",
          "description": "Relative weight of this packet definition",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "required": [
        "packet",
        "length"
      ]
    },
    "TrafficLength": {
      "type": "object",
      "description": "Specifies length of generated packets. At least one property must be set.\n",
      "properties": {
        "fixed": {
          "type": "integer",
          "description": "Fixed packet length",
          "format": "int32",
          "minimum": 64
        },
        "list": {
          "type": "array",
          "description": "List of packet lengths",
          "items": {
            "type": "integer",
            "format": "int32",
            "minimum": 64,
            "minItems": 1
          }
        },
        "sequence": {
          "type": "object",
          "description": "Specifies a sequence of packet lengths",
          "properties": {
            "count": {
              "type": "integer",
              "description": "The number of different packet lengths",
              "format": "int32",
              "minimum": 1
            },
            "start": {
              "type": "integer",
              "description": "The first length in the sequence",
              "format": "int32",
              "minimum": 64
            },
            "stop": {
              "type": "integer",
              "description": "The last length in the sequence",
              "format": "int32",
              "minimum": 64
            },
            "skip": {
              "type": "array",
              "description": "List of lengths in the sequence to skip",
              "items": {
                "type": "integer",
                "format": "int32",
                "minimum": 64
              }
            }
          },
          "required": [
            "count",
            "start"
          ]
        }
      }
    },
    "TrafficLoad": {
      "type": "object",
      "description": "Describes the transmit load of a packet generator",
      "properties": {
        "burst_size": {
          "type": "integer",
          "description": "Tells the generator how many packets to transmit as part of an\natomic transmit operation. Larger burst sizes are more efficient.\n",
          "format": "int32",
          "default": 1,
          "minimum": 1,
          "maximum": 65535
        },
        "rate": {
          "type": "object",
          "description": "The transmit packet rate",
          "properties": {
            "period": {
              "type": "string",
              "description": "unit of time for the rate",
              "enum": [
                "second",
                "minute",
                "hour"
              ]
            },
            "value": {
              "type": "integer",
              "description": "number of packets per period",
              "format": "int64",
              "minimum": 1
            }
          },
          "required": [
            "period",
            "value"
          ]
        },
        "units": {
          "type": "string",
          "description": "The transmit units for the packet generator",
          "enum": [
            "frames",
            "octets"
          ]
        }
      },
      "required": [
        "rate",
        "units"
      ]
    },
    "TrafficPacketTemplate": {
      "type": "object",
      "description": "Defines a set of packets for the packet generator",
      "properties": {
        "protocols": {
          "type": "array",
          "description": "Ordered list of packet protocols. Packets are constructed\nby iterating over the sequence of protocols.\n",
          "items": {
            "$ref": "#/definitions/TrafficProtocol"
          },
          "minItems": 1
        },
        "modifier_tie": {
          "type": "string",
          "description": "Specifies how modifiers from different protocols are combined in the\npacket template\n",
          "default": "zip",
          "enum": [
            "cartesian",
            "zip"
          ]
        }
      },
      "required": [
        "protocols"
      ]
    },
    "TrafficProtocol": {
      "type": "object",
      "description": "A traffic protocol definition for a traffic generator. At least one\npacket protocol must be set.\n",
      "properties": {
        "modifiers": {
          "type": "object",
          "description": "Specifies how to modify fields of the template",
          "properties": {
            "items": {
              "type": "array",
              "description": "List of traffic protocol modifiers",
              "items": {
                "$ref": "#/definitions/TrafficProtocolModifier"
              },
              "minItems": 1
            },
            "tie": {
              "type": "string",
              "description": "Specifies how modifier tuples are generated when multiple\nmodifiers are listed.\n",
              "default": "zip",
              "enum": [
                "cartesian",
                "zip"
              ]
            }
          },
          "required": [
            "items"
          ]
        },
        "custom": {
          "$ref": "#/definitions/PacketProtocolCustom"
        },
        "ethernet": {
          "$ref": "#/definitions/PacketProtocolEthernet"
        },
        "ipv4": {
          "$ref": "#/definitions/PacketProtocolIpv4"
        },
        "ipv6": {
          "$ref": "#/definitions/PacketProtocolIpv6"
        },
        "mpls": {
          "$ref": "#/definitions/PacketProtocolMpls"
        },
        "tcp": {
          "$ref": "#/definitions/PacketProtocolTcp"
        },
        "udp": {
          "$ref": "#/definitions/PacketProtocolUdp"
        },
        "vlan": {
          "$ref": "#/definitions/PacketProtocolVlan"
        }
      }
    },
    "TrafficProtocolModifier": {
      "type": "object",
      "description": "Specifies how to modify protocol data",
      "properties": {
        "name": {
          "type": "string",
          "description": "Packet protocol field to modify. Context determines what field\nnames are valid and what data is expected in the modifier.\n"
        },
        "permute": {
          "type": "boolean",
          "description": "Specifies whether to pseudo-randomly order the modifier values\n"
        },
        "field": {
          "type": "object",
          "description": "Specifies how to modify a protocol data field. Maximum values are\ndetermined by the field to modify.\n",
          "properties": {
            "list": {
              "type": "array",
              "description": "List of modifier values. Context determines what values are valid.\n",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "minItems": 1
            },
            "sequence": {
              "type": "object",
              "description": "Specifies a sequence of values. Context determines what values are\nvalid.\n",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of values in the sequence",
                  "minimum": 1
                },
                "start": {
                  "type": "integer",
                  "description": "The first value in the sequence",
                  "minimum": 0
                },
                "stop": {
                  "type": "integer",
                  "description": "The last value in the sequence",
                  "minimum": 0
                },
                "skip": {
                  "type": "array",
                  "description": "List of values in the sequence to skip",
                  "items": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              },
              "required": [
                "count",
                "start"
              ]
            }
          }
        },
        "ipv4": {
          "type": "object",
          "description": "Specifies how to modify an IPv4 address",
          "properties": {
            "list": {
              "type": "array",
              "description": "List of IPv4 addresses",
              "items": {
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$"
              },
              "minItems": 1
            },
            "sequence": {
              "type": "object",
              "description": "Specifies a sequence of IPv4 addresses",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of addresses in the sequence",
                  "format": "int32",
                  "minimum": 1
                },
                "start": {
                  "type": "string",
                  "description": "First IPv4 address in the sequence",
                  "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$"
                },
                "stop": {
                  "type": "string",
                  "description": "Last IPv4 address in the sequence",
                  "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$"
                },
                "skip": {
                  "type": "array",
                  "description": "List of addresses in the sequence to skip",
                  "items": {
                    "type": "string",
                    "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[1-9]?[0-9])$"
                  }
                }
              },
              "required": [
                "count",
                "start"
              ]
            }
          }
        },
        "ipv6": {
          "type": "object",
          "description": "Specifies how to modify an IPv6 address",
          "properties": {
            "list": {
              "type": "array",
              "description": "List of IPv6 addresses",
              "items": {
                "type": "string",
                "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$"
              },
              "minItems": 1
            },
            "sequence": {
              "type": "object",
              "description": "Specifies a sequence of IPv6 addresses",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of addresses in the sequence",
                  "format": "int32",
                  "minimum": 1
                },
                "start": {
                  "type": "string",
                  "description": "First IPv6 address in the sequence",
                  "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$"
                },
                "stop": {
                  "type": "string",
                  "description": "Last IPv6 address in the sequence",
                  "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$"
                },
                "skip": {
                  "type": "array",
                  "description": "List of addresses in the sequence to skip",
                  "items": {
                    "type": "string",
                    "pattern": "^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$"
                  }
                }
              },
              "required": [
                "count",
                "start"
              ]
            }
          }
        },
        "mac": {
          "type": "object",
          "description": "Specifies how to modify an Ethernet MAC address",
          "properties": {
            "list": {
              "type": "array",
              "description": "List of MAC addresses",
              "items": {
                "type": "string",
                "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$"
              },
              "minItems": 1
            },
            "sequence": {
              "type": "object",
              "description": "Specifies a sequence of MAC addresses",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of addresses in the sequence",
                  "format": "int32",
                  "minimum": 1
                },
                "start": {
                  "type": "string",
                  "description": "The first MAC address in the sequence",
                  "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$"
                },
                "stop": {
                  "type": "string",
                  "description": "The last MAC address in the sequence",
                  "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$"
                },
                "skip": {
                  "type": "array",
                  "description": "List of addresses in the sequence to skip",
                  "items": {
                    "type": "string",
                    "pattern": "^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$"
                  }
                }
              },
              "required": [
                "count",
                "start"
              ]
            }
          }
        }
      },
      "required": [
        "name",
        "permute"
      ]
    },
    "TxFlow": {
      "type": "object",
      "description": "A transmitted packet flow",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique transmit flow identifier"
        },
        "generator_result_id": {
          "type": "string",
          "description": "Unique generator result identifier that recorded this flow"
        },
        "stream_id": {
          "type": "integer",
          "description": "Spirent signature stream id",
          "format": "int64"
        },
        "counters": {
          "$ref": "#/definitions/PacketGeneratorFlowCounters"
        }
      },
      "required": [
        "id",
        "generator_result_id",
        "counters"
      ]
    },
    "TimeCounter": {
      "type": "object",
      "description": "A source of clock ticks",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique time counter identifier"
        },
        "name": {
          "type": "string",
          "description": "Time counter name"
        },
        "frequency": {
          "type": "integer",
          "description": "Tick rate of the counter, in Hz.",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "description": "Priority determines which counter to use in situations where\nthere are multiple counters available (higher number = higher priority).\nPriority is always positive.\n",
          "format": "int32"
        }
      },
      "required": [
        "id",
        "name",
        "frequency",
        "priority"
      ]
    },
    "TimeKeeperState": {
      "type": "object",
      "description": "TimeKeeper internal state information",
      "properties": {
        "frequency": {
          "type": "number",
          "description": "The time counter frequency as measured by the interval between the\ntwo best timestamp exchanges with the time source over the past two\nhours, in Hz.\n",
          "format": "int64"
        },
        "frequency_error": {
          "type": "number",
          "description": "The estimated error of the time counter frequency measurement, in Hz.",
          "format": "int64"
        },
        "local_frequency": {
          "type": "number",
          "description": "The time counter frequency as measured by the interval between the\ntwo best timestamp exchanges with the time source over the past hour,\nin Hz. This value is used to help determine time stamp error due to\ntime counter frequency drift.\n",
          "format": "int64"
        },
        "local_frequency_error": {
          "type": "number",
          "description": "The estimated error of the local time counter frequency measurement, in Hz.",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "description": "The offset applied to time counter derived timestamp values,\nin seconds.  This value comes from the system host clock.\n",
          "format": "double"
        },
        "synced": {
          "type": "boolean",
          "description": "The time keeper is considered to be synced to the time source if a clock\noffset, theta, has been calculated and applied within the past 20 minutes.\n"
        },
        "theta": {
          "type": "number",
          "description": "The calculated correction to apply to the offset, based on the\nmeasured time counter frequency and time source timestamps.\n",
          "format": "double"
        }
      },
      "required": [
        "offset",
        "synced"
      ]
    },
    "TimeKeeperStats": {
      "type": "object",
      "description": "TimeKeeper statistics",
      "properties": {
        "frequency_accept": {
          "type": "number",
          "description": "The number of times the frequency calculation has been updated.",
          "format": "int64"
        },
        "frequency_reject": {
          "type": "number",
          "description": "The number of times the frequency calculation has been rejected due\nto an excessive delta between old and new values.\n",
          "format": "int64"
        },
        "local_frequency_accept": {
          "type": "number",
          "description": "The number of times the local frequency calculation has been updated.",
          "format": "int64"
        },
        "local_frequency_reject": {
          "type": "number",
          "description": "The number of times the local frequency calculation has been rejected\ndue to an excessive delta between old and new values.\n",
          "format": "int64"
        },
        "round_trip_times": {
          "type": "object",
          "description": "The round trip time measures the total elapsed time to make a timestamp\nexchange with the remote time source.  The TimeKeeper stores RTT data so\nthat the least delayed clock exchanges can be given extra weight when\ncalculating the current clock offset.\n",
          "properties": {
            "avg": {
              "type": "number",
              "description": "the average round trip time, in seconds.",
              "format": "double"
            },
            "max": {
              "type": "number",
              "description": "The maximum round trip time, in seconds.",
              "format": "double"
            },
            "min": {
              "type": "number",
              "description": "The minimum round trip time, in seconds.",
              "format": "double"
            },
            "size": {
              "type": "number",
              "description": "The number of round trip times in the data set.",
              "format": "int64"
            }
          },
          "required": [
            "size"
          ]
        },
        "theta_accept": {
          "type": "number",
          "description": "The number of times the theta calculation has been updated.",
          "format": "int64"
        },
        "theta_reject": {
          "type": "number",
          "description": "Then umber of times the theta calculation has been rejected due to\nexcessive delta between old and new values.\n",
          "format": "int64"
        },
        "timestamps": {
          "type": "number",
          "description": "The number of timestamps in the current working set of timestamps.\nOld timestamps are dropped from the history of timestamps as they\nbecome irrelevant.\n",
          "format": "int64"
        }
      },
      "required": [
        "frequency_accept",
        "frequency_reject",
        "local_frequency_accept",
        "local_frequency_reject",
        "round_trip_times",
        "theta_accept",
        "theta_reject",
        "timestamps"
      ]
    },
    "TimeKeeper": {
      "type": "object",
      "description": "A combination of a time source and a time counter used to measure\nthe passage of time, aka a clock\n",
      "properties": {
        "state": {
          "$ref": "#/definitions/TimeKeeperState"
        },
        "stats": {
          "$ref": "#/definitions/TimeKeeperStats"
        },
        "time": {
          "type": "string",
          "description": "The current time and date in ISO8601 format",
          "format": "date-time"
        },
        "time_counter_id": {
          "type": "string",
          "description": "time counter used for measuring time intervals"
        },
        "time_source_id": {
          "type": "string",
          "description": "time source used for wall-clock synchronization"
        }
      },
      "required": [
        "state",
        "stats",
        "time",
        "time_counter_id",
        "time_source_id"
      ]
    },
    "TimeSourceConfig": {
      "type": "object",
      "description": "time source configuration",
      "properties": {
        "ntp": {
          "type": "object",
          "description": "Network Time Protocol Server",
          "properties": {
            "hostname": {
              "type": "string",
              "description": "network hostname or address for server"
            },
            "port": {
              "type": "string",
              "default": "ntp",
              "description": "service name or port for server"
            }
          },
          "required": [
            "hostname"
          ]
        }
      }
    },
    "TimeSourceStats": {
      "type": "object",
      "description": "time source statistics",
      "properties": {
        "ntp": {
          "type": "object",
          "description": "NTP statistics",
          "properties": {
            "rx_packets": {
              "type": "integer",
              "description": "Received packets",
              "format": "int64"
            },
            "tx_packets": {
              "type": "integer",
              "description": "Transmitted packets",
              "format": "int64"
            },
            "stratum": {
              "type": "integer",
              "description": "Time source distance from a NTP reference clock, in network hops.\n",
              "format": "int32"
            }
          },
          "required": [
            "rx_packets",
            "tx_packets"
          ]
        }
      }
    },
    "TimeSource": {
      "type": "object",
      "description": "A reference time source",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique time source identifier"
        },
        "kind": {
          "type": "string",
          "description": "time source kind",
          "enum": [
            "ntp"
          ]
        },
        "config": {
          "$ref": "#/definitions/TimeSourceConfig"
        },
        "stats": {
          "$ref": "#/definitions/TimeSourceStats"
        }
      },
      "required": [
        "id",
        "kind",
        "config",
        "stats"
      ]
    },
    "BlockDevice": {
      "type": "object",
      "description": "Block device",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique device identifier"
        },
        "path": {
          "type": "string",
          "description": "Resource pathname"
        },
        "size": {
          "type": "integer",
          "description": "Resource size (in bytes)",
          "format": "int64"
        },
        "info": {
          "type": "string",
          "description": "Any info related to the current block device"
        },
        "usable": {
          "type": "boolean",
          "description": "Indicates whether it is safe to use this device for block I/O load generation"
        }
      },
      "required": [
        "id",
        "path",
        "size",
        "info",
        "usable"
      ]
    },
    "BlockFile": {
      "type": "object",
      "description": "Block file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique file identifier"
        },
        "file_size": {
          "type": "integer",
          "description": "Size of test file (in bytes)",
          "format": "int64",
          "minimum": 64
        },
        "init_percent_complete": {
          "type": "integer",
          "description": "Percentage of initialization completed so far",
          "format": "int32"
        },
        "path": {
          "type": "string",
          "description": "Resource pathname"
        },
        "state": {
          "type": "string",
          "description": "State of resource",
          "enum": [
            "none",
            "init",
            "ready"
          ]
        }
      },
      "required": [
        "id",
        "file_size",
        "init_percent_complete",
        "path",
        "state"
      ]
    },
    "BlockGenerator": {
      "type": "object",
      "description": "Block generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Block generator identifier"
        },
        "config": {
          "$ref": "#/definitions/BlockGeneratorConfig"
        },
        "resource_id": {
          "type": "string",
          "description": "Unique device or file identifier"
        },
        "running": {
          "type": "boolean",
          "description": "Indicates whether this generator is currently running."
        }
      },
      "required": [
        "id",
        "config",
        "resource_id",
        "running"
      ]
    },
    "BlockGeneratorConfig": {
      "type": "object",
      "description": "Block generator configuration",
      "properties": {
        "queue_depth": {
          "type": "integer",
          "description": "Number of simultaneous (asynchronous) operations",
          "minimum": 1
        },
        "reads_per_sec": {
          "type": "integer",
          "description": "Number of read operations to perform per second",
          "minimum": 0
        },
        "read_size": {
          "type": "integer",
          "description": "Number of bytes to use for each read operation",
          "minimum": 1
        },
        "writes_per_sec": {
          "type": "integer",
          "description": "Number of write operations to perform per second",
          "minimum": 0
        },
        "write_size": {
          "type": "integer",
          "description": "Number of bytes to use for each write operation",
          "minimum": 1
        },
        "pattern": {
          "type": "string",
          "description": "IO access pattern",
          "enum": [
            "random",
            "sequential",
            "reverse"
          ]
        }
      },
      "required": [
        "queue_depth",
        "reads_per_sec",
        "read_size",
        "writes_per_sec",
        "write_size",
        "pattern"
      ]
    },
    "BlockGeneratorResult": {
      "type": "object",
      "description": "Results collected by a running generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique generator result identifier"
        },
        "generator_id": {
          "type": "string",
          "description": "Block generator identifier that generated this result"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether the result is currently being updated"
        },
        "timestamp": {
          "type": "string",
          "description": "The ISO8601-formatted date of the last result update",
          "format": "date-time"
        },
        "read": {
          "$ref": "#/definitions/BlockGeneratorStats"
        },
        "write": {
          "$ref": "#/definitions/BlockGeneratorStats"
        }
      },
      "required": [
        "id",
        "active",
        "timestamp",
        "read",
        "write"
      ]
    },
    "BlockGeneratorStats": {
      "type": "object",
      "description": "Block generator statistics",
      "properties": {
        "ops_target": {
          "type": "integer",
          "description": "The intended number of operations performed",
          "format": "int64"
        },
        "ops_actual": {
          "type": "integer",
          "description": "The actual number of operations performed",
          "format": "int64"
        },
        "bytes_target": {
          "type": "integer",
          "description": "The intended number of bytes read or written",
          "format": "int64"
        },
        "bytes_actual": {
          "type": "integer",
          "description": "The actual number of bytes read or written",
          "format": "int64"
        },
        "io_errors": {
          "type": "integer",
          "description": "The number of io_errors observed during reading or writing",
          "format": "int64"
        },
        "latency": {
          "type": "integer",
          "description": "The total amount of time required to perform all operations (in nanoseconds)",
          "format": "int64"
        },
        "latency_min": {
          "type": "integer",
          "description": "The minimum observed latency value (in nanoseconds)",
          "format": "int64"
        },
        "latency_max": {
          "type": "integer",
          "description": "The maximum observed latency value (in nanoseconds)",
          "format": "int64"
        }
      },
      "required": [
        "ops_target",
        "ops_actual",
        "bytes_target",
        "bytes_actual",
        "io_errors",
        "latency",
        "latency_min",
        "latency_max"
      ]
    },
    "MemoryGenerator": {
      "type": "object",
      "description": "Memory generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique memory generator identifier"
        },
        "config": {
          "$ref": "#/definitions/MemoryGeneratorConfig"
        },
        "running": {
          "type": "boolean",
          "description": "Indicates whether this generator is currently running."
        }
      },
      "required": [
        "id",
        "config",
        "running"
      ]
    },
    "MemoryGeneratorConfig": {
      "type": "object",
      "description": "Memory generator configuration",
      "properties": {
        "buffer_size": {
          "type": "integer",
          "description": "Memory size constraint. The buffer can never be larger than the value specified (in bytes)",
          "minimum": 64
        },
        "reads_per_sec": {
          "type": "integer",
          "description": "Number of read operations to perform per second",
          "minimum": 0
        },
        "read_size": {
          "type": "integer",
          "description": "Number of bytes to use for each read operation",
          "minimum": 0
        },
        "read_threads": {
          "type": "integer",
          "description": "Number of read worker threads",
          "minimum": 0
        },
        "writes_per_sec": {
          "type": "integer",
          "description": "Number of write operations to perform per second",
          "minimum": 0
        },
        "write_size": {
          "type": "integer",
          "description": "Number of bytes to use for each write operation",
          "minimum": 0
        },
        "write_threads": {
          "type": "integer",
          "description": "Number of write worker threads",
          "minimum": 0
        },
        "pattern": {
          "type": "string",
          "description": "IO access pattern",
          "enum": [
            "random",
            "sequential",
            "reverse"
          ]
        }
      },
      "required": [
        "buffer_size",
        "reads_per_sec",
        "read_size",
        "read_threads",
        "writes_per_sec",
        "write_size",
        "write_threads",
        "pattern"
      ]
    },
    "MemoryGeneratorResult": {
      "type": "object",
      "description": "Results collected by a running generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique generator result identifier"
        },
        "generator_id": {
          "type": "string",
          "description": "Memory generator identifier that generated this result"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether the result is currently being updated"
        },
        "timestamp": {
          "type": "string",
          "description": "The ISO8601-formatted date of the last result update",
          "format": "date-time"
        },
        "read": {
          "$ref": "#/definitions/MemoryGeneratorStats"
        },
        "write": {
          "$ref": "#/definitions/MemoryGeneratorStats"
        }
      },
      "required": [
        "id",
        "active",
        "timestamp",
        "read",
        "write"
      ]
    },
    "MemoryGeneratorStats": {
      "type": "object",
      "description": "Memory generator statistics",
      "properties": {
        "ops_target": {
          "type": "integer",
          "description": "The intended number of operations performed",
          "format": "int64"
        },
        "ops_actual": {
          "type": "integer",
          "description": "The actual number of operations performed",
          "format": "int64"
        },
        "bytes_target": {
          "type": "integer",
          "description": "The intended number of bytes read or written",
          "format": "int64"
        },
        "bytes_actual": {
          "type": "integer",
          "description": "The actual number of bytes read or written",
          "format": "int64"
        },
        "io_errors": {
          "type": "integer",
          "description": "The number of io_errors observed during reading or writing",
          "format": "int64"
        },
        "latency": {
          "type": "integer",
          "description": "The total amount of time required to perform all operations (in nanoseconds)",
          "format": "int64"
        },
        "latency_min": {
          "type": "integer",
          "description": "The minimum observed latency value (in nanoseconds)",
          "format": "int64"
        },
        "latency_max": {
          "type": "integer",
          "description": "The maximum observed latency value (in nanoseconds)",
          "format": "int64"
        }
      },
      "required": [
        "ops_target",
        "ops_actual",
        "bytes_target",
        "bytes_actual",
        "io_errors",
        "latency"
      ]
    },
    "CpuGenerator": {
      "type": "object",
      "description": "CPU generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique CPU generator identifier"
        },
        "config": {
          "$ref": "#/definitions/CpuGeneratorConfig"
        },
        "running": {
          "type": "boolean",
          "description": "Indicates whether this generator is currently running."
        }
      },
      "required": [
        "id",
        "config",
        "running"
      ]
    },
    "CpuGeneratorConfig": {
      "title": "CpuGeneratorConfig",
      "type": "object",
      "description": "CPU Generator Configuration",
      "properties": {
        "cores": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/CpuGeneratorCoreConfig"
          }
        }
      }
    },
    "CpuGeneratorCoreConfig": {
      "title": "CpuGeneratorCoreConfig",
      "type": "object",
      "description": "Configuration for a single core",
      "properties": {
        "utilization": {
          "type": "number",
          "description": "CPU load generation setpoint",
          "format": "double",
          "minimum": 0,
          "maximum": 100
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "instruction_set": {
                "type": "string",
                "description": "CPU load instruction set",
                "enum": [
                  "scalar"
                ]
              },
              "data_size": {
                "type": "integer",
                "description": "Number of bits to use for data type in chosen instruction set",
                "enum": [
                  32,
                  64
                ]
              },
              "operation": {
                "type": "string",
                "description": "CPU load target operation, actual for chosen instruction set",
                "enum": [
                  "float",
                  "int"
                ]
              },
              "weight": {
                "type": "integer",
                "description": "Targeted load ratio",
                "minimum": 1
              }
            },
            "required": [
              "instruction_set",
              "data_size",
              "operation",
              "weight"
            ]
          },
          "description": "Instruction set targets (operations)",
          "minItems": 1
        }
      },
      "required": [
        "utilization",
        "targets"
      ]
    },
    "CpuGeneratorResult": {
      "type": "object",
      "description": "Results collected by a running generator",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique generator result identifier"
        },
        "generator_id": {
          "type": "string",
          "description": "CPU generator identifier that generated this result"
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether the result is currently being updated"
        },
        "timestamp": {
          "type": "string",
          "description": "The ISO8601-formatted date of the last result update",
          "format": "date-time"
        },
        "stats": {
          "$ref": "#/definitions/CpuGeneratorStats"
        }
      },
      "required": [
        "id",
        "active",
        "timestamp",
        "stats"
      ]
    },
    "CpuGeneratorStats": {
      "title": "CpuGeneratorStats",
      "type": "object",
      "description": "CPU generator statistics",
      "properties": {
        "cores": {
          "type": "array",
          "description": "Statistics of the CPU cores (in the order they were specified in generator configuration)",
          "items": {
            "$ref": "#/definitions/CpuGeneratorCoreStats"
          }
        }
      },
      "required": [
        "cores"
      ]
    },
    "CpuGeneratorCoreStats": {
      "title": "CpuGeneratorCoreStats",
      "type": "object",
      "description": "Core statistics",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The total amount of CPU time available",
          "format": "int64"
        },
        "utilization": {
          "type": "integer",
          "description": "The amount of CPU time used",
          "format": "int64"
        },
        "system": {
          "type": "integer",
          "description": "The amount of system time used, e.g. kernel or system calls",
          "format": "int64"
        },
        "user": {
          "type": "integer",
          "description": "The amount of user time used, e.g. openperf code",
          "format": "int64"
        },
        "steal": {
          "type": "integer",
          "description": "The amount of time the hypervisor reported our virtual cores were blocked",
          "format": "int64"
        },
        "error": {
          "type": "integer",
          "description": "The difference between intended and actual CPU utilization",
          "format": "int64"
        },
        "targets": {
          "type": "array",
          "description": "Statistics of the instruction sets (in the order they were specified in core configuration)",
          "items": {
            "$ref": "#/definitions/CpuGeneratorTargetStats"
          }
        }
      },
      "required": [
        "available",
        "utilization",
        "system",
        "user",
        "error",
        "targets"
      ]
    },
    "CpuGeneratorTargetStats": {
      "title": "CpuGeneratorTargetStats",
      "type": "object",
      "description": "Instruction set statistics",
      "properties": {
        "cycles": {
          "type": "integer",
          "description": "The total amount of finished instruction set cycles",
          "format": "int64"
        }
      },
      "required": [
        "cycles"
      ]
    }
  }
}
