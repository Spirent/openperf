// Code generated by go-swagger; DO NOT EDIT.

package memory_generator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new memory generator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for memory generator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateMemoryGenerators(params *BulkCreateMemoryGeneratorsParams, opts ...ClientOption) (*BulkCreateMemoryGeneratorsOK, error)

	BulkDeleteMemoryGenerators(params *BulkDeleteMemoryGeneratorsParams, opts ...ClientOption) (*BulkDeleteMemoryGeneratorsNoContent, error)

	BulkStartMemoryGenerators(params *BulkStartMemoryGeneratorsParams, opts ...ClientOption) (*BulkStartMemoryGeneratorsOK, error)

	BulkStopMemoryGenerators(params *BulkStopMemoryGeneratorsParams, opts ...ClientOption) (*BulkStopMemoryGeneratorsNoContent, error)

	CreateMemoryGenerator(params *CreateMemoryGeneratorParams, opts ...ClientOption) (*CreateMemoryGeneratorCreated, error)

	DeleteMemoryGenerator(params *DeleteMemoryGeneratorParams, opts ...ClientOption) (*DeleteMemoryGeneratorNoContent, error)

	DeleteMemoryGeneratorResult(params *DeleteMemoryGeneratorResultParams, opts ...ClientOption) (*DeleteMemoryGeneratorResultNoContent, error)

	GetMemoryGenerator(params *GetMemoryGeneratorParams, opts ...ClientOption) (*GetMemoryGeneratorOK, error)

	GetMemoryGeneratorResult(params *GetMemoryGeneratorResultParams, opts ...ClientOption) (*GetMemoryGeneratorResultOK, error)

	ListMemoryGeneratorResults(params *ListMemoryGeneratorResultsParams, opts ...ClientOption) (*ListMemoryGeneratorResultsOK, error)

	ListMemoryGenerators(params *ListMemoryGeneratorsParams, opts ...ClientOption) (*ListMemoryGeneratorsOK, error)

	MemoryInfo(params *MemoryInfoParams, opts ...ClientOption) (*MemoryInfoOK, error)

	StartMemoryGenerator(params *StartMemoryGeneratorParams, opts ...ClientOption) (*StartMemoryGeneratorCreated, error)

	StopMemoryGenerator(params *StopMemoryGeneratorParams, opts ...ClientOption) (*StopMemoryGeneratorNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateMemoryGenerators bulks create memory generators

  Create multiple memory generators. Requests are processed in an
all-or-nothing manner, i.e. a single memory generator creation failure
causes all creations for this request to fail.

*/
func (a *Client) BulkCreateMemoryGenerators(params *BulkCreateMemoryGeneratorsParams, opts ...ClientOption) (*BulkCreateMemoryGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateMemoryGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreateMemoryGenerators",
		Method:             "POST",
		PathPattern:        "/memory-generators/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreateMemoryGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateMemoryGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateMemoryGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeleteMemoryGenerators bulks delete memory generators

  Delete multiple memory generators in a best-effort manner. Non-existant memory generators ids
do not cause errors. Idempotent.

*/
func (a *Client) BulkDeleteMemoryGenerators(params *BulkDeleteMemoryGeneratorsParams, opts ...ClientOption) (*BulkDeleteMemoryGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteMemoryGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDeleteMemoryGenerators",
		Method:             "POST",
		PathPattern:        "/memory-generators/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeleteMemoryGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeleteMemoryGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeleteMemoryGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStartMemoryGenerators tells multiple memory generators to start

  Start multiple memory generators.
*/
func (a *Client) BulkStartMemoryGenerators(params *BulkStartMemoryGeneratorsParams, opts ...ClientOption) (*BulkStartMemoryGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStartMemoryGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStartMemoryGenerators",
		Method:             "POST",
		PathPattern:        "/memory-generators/x/bulk-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStartMemoryGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStartMemoryGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStartMemoryGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStopMemoryGenerators bulks stop memory generators

  Best-effort stop multiple memory generators. Non-existent memory generator ids do not cause errors. Idempotent.
*/
func (a *Client) BulkStopMemoryGenerators(params *BulkStopMemoryGeneratorsParams, opts ...ClientOption) (*BulkStopMemoryGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStopMemoryGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStopMemoryGenerators",
		Method:             "POST",
		PathPattern:        "/memory-generators/x/bulk-stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStopMemoryGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStopMemoryGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStopMemoryGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMemoryGenerator creates a memory generator

  Create a new memory generator
*/
func (a *Client) CreateMemoryGenerator(params *CreateMemoryGeneratorParams, opts ...ClientOption) (*CreateMemoryGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMemoryGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMemoryGenerator",
		Method:             "POST",
		PathPattern:        "/memory-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMemoryGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMemoryGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMemoryGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMemoryGenerator deletes a memory generator

  Deletes an existing memory generator. Idempotent.
*/
func (a *Client) DeleteMemoryGenerator(params *DeleteMemoryGeneratorParams, opts ...ClientOption) (*DeleteMemoryGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMemoryGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMemoryGenerator",
		Method:             "DELETE",
		PathPattern:        "/memory-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMemoryGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMemoryGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMemoryGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMemoryGeneratorResult deletes results from a memory generator idempotent
*/
func (a *Client) DeleteMemoryGeneratorResult(params *DeleteMemoryGeneratorResultParams, opts ...ClientOption) (*DeleteMemoryGeneratorResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMemoryGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMemoryGeneratorResult",
		Method:             "DELETE",
		PathPattern:        "/memory-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMemoryGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMemoryGeneratorResultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMemoryGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMemoryGenerator gets a memory generator

  Returns a memory generator, by id.
*/
func (a *Client) GetMemoryGenerator(params *GetMemoryGeneratorParams, opts ...ClientOption) (*GetMemoryGeneratorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemoryGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMemoryGenerator",
		Method:             "GET",
		PathPattern:        "/memory-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMemoryGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemoryGeneratorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMemoryGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMemoryGeneratorResult gets a result from a memory generator

  Returns results from a memory generator by result id.
*/
func (a *Client) GetMemoryGeneratorResult(params *GetMemoryGeneratorResultParams, opts ...ClientOption) (*GetMemoryGeneratorResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemoryGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMemoryGeneratorResult",
		Method:             "GET",
		PathPattern:        "/memory-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMemoryGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemoryGeneratorResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMemoryGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMemoryGeneratorResults lists memory generator results

  The `memory-generator-results` endpoint returns all of the results produced by running memory generators.
*/
func (a *Client) ListMemoryGeneratorResults(params *ListMemoryGeneratorResultsParams, opts ...ClientOption) (*ListMemoryGeneratorResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMemoryGeneratorResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMemoryGeneratorResults",
		Method:             "GET",
		PathPattern:        "/memory-generator-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMemoryGeneratorResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMemoryGeneratorResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListMemoryGeneratorResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMemoryGenerators lists memory generators

  The `memory-generators` endpoint returns all of the configured memory generators.
*/
func (a *Client) ListMemoryGenerators(params *ListMemoryGeneratorsParams, opts ...ClientOption) (*ListMemoryGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMemoryGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMemoryGenerators",
		Method:             "GET",
		PathPattern:        "/memory-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMemoryGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMemoryGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListMemoryGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MemoryInfo gets a memory info

  The `memory-info` endpoint returns memory info values such as total and free memory size
*/
func (a *Client) MemoryInfo(params *MemoryInfoParams, opts ...ClientOption) (*MemoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemoryInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MemoryInfo",
		Method:             "GET",
		PathPattern:        "/memory-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MemoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MemoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MemoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartMemoryGenerator starts a memory generator

  Start an existing memory generator.
*/
func (a *Client) StartMemoryGenerator(params *StartMemoryGeneratorParams, opts ...ClientOption) (*StartMemoryGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartMemoryGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartMemoryGenerator",
		Method:             "POST",
		PathPattern:        "/memory-generators/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartMemoryGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartMemoryGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartMemoryGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopMemoryGenerator stops a memory generator

  Stop a running memory generator. Idempotent.
*/
func (a *Client) StopMemoryGenerator(params *StopMemoryGeneratorParams, opts ...ClientOption) (*StopMemoryGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopMemoryGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopMemoryGenerator",
		Method:             "POST",
		PathPattern:        "/memory-generators/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopMemoryGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopMemoryGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopMemoryGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
