// Code generated by go-swagger; DO NOT EDIT.

package block_generator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new block generator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for block generator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateBlockFiles(params *BulkCreateBlockFilesParams, opts ...ClientOption) (*BulkCreateBlockFilesOK, error)

	BulkCreateBlockGenerators(params *BulkCreateBlockGeneratorsParams, opts ...ClientOption) (*BulkCreateBlockGeneratorsOK, error)

	BulkDeleteBlockFiles(params *BulkDeleteBlockFilesParams, opts ...ClientOption) (*BulkDeleteBlockFilesNoContent, error)

	BulkDeleteBlockGenerators(params *BulkDeleteBlockGeneratorsParams, opts ...ClientOption) (*BulkDeleteBlockGeneratorsNoContent, error)

	BulkStartBlockGenerators(params *BulkStartBlockGeneratorsParams, opts ...ClientOption) (*BulkStartBlockGeneratorsOK, error)

	BulkStopBlockGenerators(params *BulkStopBlockGeneratorsParams, opts ...ClientOption) (*BulkStopBlockGeneratorsNoContent, error)

	CreateBlockFile(params *CreateBlockFileParams, opts ...ClientOption) (*CreateBlockFileCreated, error)

	CreateBlockGenerator(params *CreateBlockGeneratorParams, opts ...ClientOption) (*CreateBlockGeneratorCreated, error)

	DeleteBlockFile(params *DeleteBlockFileParams, opts ...ClientOption) (*DeleteBlockFileNoContent, error)

	DeleteBlockGenerator(params *DeleteBlockGeneratorParams, opts ...ClientOption) (*DeleteBlockGeneratorNoContent, error)

	DeleteBlockGeneratorResult(params *DeleteBlockGeneratorResultParams, opts ...ClientOption) (*DeleteBlockGeneratorResultNoContent, error)

	GetBlockDevice(params *GetBlockDeviceParams, opts ...ClientOption) (*GetBlockDeviceOK, error)

	GetBlockFile(params *GetBlockFileParams, opts ...ClientOption) (*GetBlockFileOK, error)

	GetBlockGenerator(params *GetBlockGeneratorParams, opts ...ClientOption) (*GetBlockGeneratorOK, error)

	GetBlockGeneratorResult(params *GetBlockGeneratorResultParams, opts ...ClientOption) (*GetBlockGeneratorResultOK, error)

	ListBlockDevices(params *ListBlockDevicesParams, opts ...ClientOption) (*ListBlockDevicesOK, error)

	ListBlockFiles(params *ListBlockFilesParams, opts ...ClientOption) (*ListBlockFilesOK, error)

	ListBlockGeneratorResults(params *ListBlockGeneratorResultsParams, opts ...ClientOption) (*ListBlockGeneratorResultsOK, error)

	ListBlockGenerators(params *ListBlockGeneratorsParams, opts ...ClientOption) (*ListBlockGeneratorsOK, error)

	StartBlockGenerator(params *StartBlockGeneratorParams, opts ...ClientOption) (*StartBlockGeneratorCreated, error)

	StopBlockGenerator(params *StopBlockGeneratorParams, opts ...ClientOption) (*StopBlockGeneratorNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateBlockFiles bulks create block files

  Create multiple block files. Requests are processed in an
all-or-nothing manner, i.e. a single block file creation failure
causes all creations for this request to fail.

*/
func (a *Client) BulkCreateBlockFiles(params *BulkCreateBlockFilesParams, opts ...ClientOption) (*BulkCreateBlockFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateBlockFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreateBlockFiles",
		Method:             "POST",
		PathPattern:        "/block-files/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreateBlockFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateBlockFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateBlockFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkCreateBlockGenerators bulks create block generators

  Create multiple block generators. Requests are processed in an
all-or-nothing manner, i.e. a single block generator creation failure
causes all creations for this request to fail.

*/
func (a *Client) BulkCreateBlockGenerators(params *BulkCreateBlockGeneratorsParams, opts ...ClientOption) (*BulkCreateBlockGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateBlockGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreateBlockGenerators",
		Method:             "POST",
		PathPattern:        "/block-generators/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreateBlockGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateBlockGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateBlockGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeleteBlockFiles bulks delete block files

  Delete multiple block files in a best-effort manner. Non-existant block file ids
do not cause errors. If the file is used by generator it cannot be deleted. Idempotent.

*/
func (a *Client) BulkDeleteBlockFiles(params *BulkDeleteBlockFilesParams, opts ...ClientOption) (*BulkDeleteBlockFilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteBlockFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDeleteBlockFiles",
		Method:             "POST",
		PathPattern:        "/block-files/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeleteBlockFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeleteBlockFilesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeleteBlockFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeleteBlockGenerators bulks delete block generators

  Delete multiple block generators in a best-effort manner. Non-existant block generators ids
do not cause errors. Idempotent.

*/
func (a *Client) BulkDeleteBlockGenerators(params *BulkDeleteBlockGeneratorsParams, opts ...ClientOption) (*BulkDeleteBlockGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteBlockGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDeleteBlockGenerators",
		Method:             "POST",
		PathPattern:        "/block-generators/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeleteBlockGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeleteBlockGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeleteBlockGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStartBlockGenerators tells multiple block generators to start

  Start multiple block generators.
*/
func (a *Client) BulkStartBlockGenerators(params *BulkStartBlockGeneratorsParams, opts ...ClientOption) (*BulkStartBlockGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStartBlockGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStartBlockGenerators",
		Method:             "POST",
		PathPattern:        "/block-generators/x/bulk-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStartBlockGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStartBlockGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStartBlockGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStopBlockGenerators bulks stop block generators

  Best-effort stop multiple block generators. Non-existent block generator ids do not cause errors. Idempotent.
*/
func (a *Client) BulkStopBlockGenerators(params *BulkStopBlockGeneratorsParams, opts ...ClientOption) (*BulkStopBlockGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStopBlockGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStopBlockGenerators",
		Method:             "POST",
		PathPattern:        "/block-generators/x/bulk-stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStopBlockGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStopBlockGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStopBlockGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlockFile creates a block file

  Create a new block file.
*/
func (a *Client) CreateBlockFile(params *CreateBlockFileParams, opts ...ClientOption) (*CreateBlockFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlockFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBlockFile",
		Method:             "POST",
		PathPattern:        "/block-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBlockFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlockFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBlockFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlockGenerator creates a block generator

  Create a new block generator
*/
func (a *Client) CreateBlockGenerator(params *CreateBlockGeneratorParams, opts ...ClientOption) (*CreateBlockGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlockGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBlockGenerator",
		Method:             "POST",
		PathPattern:        "/block-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBlockGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlockGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBlockGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlockFile deletes a block file

  Deletes an existing block file. If the file is used by generator it cannot be deleted. Idempotent.
*/
func (a *Client) DeleteBlockFile(params *DeleteBlockFileParams, opts ...ClientOption) (*DeleteBlockFileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBlockFile",
		Method:             "DELETE",
		PathPattern:        "/block-files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBlockFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBlockFileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBlockFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlockGenerator deletes a block generator

  Deletes an existing block generator. Idempotent.
*/
func (a *Client) DeleteBlockGenerator(params *DeleteBlockGeneratorParams, opts ...ClientOption) (*DeleteBlockGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBlockGenerator",
		Method:             "DELETE",
		PathPattern:        "/block-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBlockGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBlockGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBlockGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlockGeneratorResult deletes results from a block generator idempotent
*/
func (a *Client) DeleteBlockGeneratorResult(params *DeleteBlockGeneratorResultParams, opts ...ClientOption) (*DeleteBlockGeneratorResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBlockGeneratorResult",
		Method:             "DELETE",
		PathPattern:        "/block-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBlockGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBlockGeneratorResultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBlockGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockDevice gets a block device

  Returns a block device, by id.
*/
func (a *Client) GetBlockDevice(params *GetBlockDeviceParams, opts ...ClientOption) (*GetBlockDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlockDevice",
		Method:             "GET",
		PathPattern:        "/block-devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlockDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockFile gets a block file

  Returns a block file, by id.
*/
func (a *Client) GetBlockFile(params *GetBlockFileParams, opts ...ClientOption) (*GetBlockFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlockFile",
		Method:             "GET",
		PathPattern:        "/block-files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlockFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlockFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockGenerator gets a block generator

  Returns a block generator, by id.
*/
func (a *Client) GetBlockGenerator(params *GetBlockGeneratorParams, opts ...ClientOption) (*GetBlockGeneratorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlockGenerator",
		Method:             "GET",
		PathPattern:        "/block-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlockGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockGeneratorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlockGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockGeneratorResult gets a result from a block generator

  Returns results from a block generator by result id.
*/
func (a *Client) GetBlockGeneratorResult(params *GetBlockGeneratorResultParams, opts ...ClientOption) (*GetBlockGeneratorResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlockGeneratorResult",
		Method:             "GET",
		PathPattern:        "/block-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlockGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockGeneratorResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlockGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBlockDevices lists block devices

  The `block-devices` endpoint returns all block devices that are eligible as load generation targets.
*/
func (a *Client) ListBlockDevices(params *ListBlockDevicesParams, opts ...ClientOption) (*ListBlockDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlockDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBlockDevices",
		Method:             "GET",
		PathPattern:        "/block-devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBlockDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlockDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBlockDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBlockFiles lists block files

  The `block-files` endpoint returns all block files that are eligible as load generation targets.
*/
func (a *Client) ListBlockFiles(params *ListBlockFilesParams, opts ...ClientOption) (*ListBlockFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlockFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBlockFiles",
		Method:             "GET",
		PathPattern:        "/block-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBlockFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlockFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBlockFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBlockGeneratorResults lists block generator results

  The `block-generator-results` endpoint returns all of the results produced by running block generators.
*/
func (a *Client) ListBlockGeneratorResults(params *ListBlockGeneratorResultsParams, opts ...ClientOption) (*ListBlockGeneratorResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlockGeneratorResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBlockGeneratorResults",
		Method:             "GET",
		PathPattern:        "/block-generator-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBlockGeneratorResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlockGeneratorResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBlockGeneratorResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBlockGenerators lists block generators

  The `block-generators` endpoint returns all of the configured block generators.
*/
func (a *Client) ListBlockGenerators(params *ListBlockGeneratorsParams, opts ...ClientOption) (*ListBlockGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlockGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBlockGenerators",
		Method:             "GET",
		PathPattern:        "/block-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBlockGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlockGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBlockGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartBlockGenerator starts a block generator

  Start an existing block generator.
*/
func (a *Client) StartBlockGenerator(params *StartBlockGeneratorParams, opts ...ClientOption) (*StartBlockGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartBlockGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartBlockGenerator",
		Method:             "POST",
		PathPattern:        "/block-generators/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartBlockGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartBlockGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartBlockGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopBlockGenerator stops a block generator

  Stop a running block generator. Idempotent.
*/
func (a *Client) StopBlockGenerator(params *StopBlockGeneratorParams, opts ...ClientOption) (*StopBlockGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopBlockGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopBlockGenerator",
		Method:             "POST",
		PathPattern:        "/block-generators/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopBlockGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopBlockGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopBlockGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
