// Code generated by go-swagger; DO NOT EDIT.

package packet_analyzers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/spirent/openperf/api/client/golang/models"
)

// StartPacketAnalyzerReader is a Reader for the StartPacketAnalyzer structure.
type StartPacketAnalyzerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartPacketAnalyzerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewStartPacketAnalyzerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStartPacketAnalyzerCreated creates a StartPacketAnalyzerCreated with default headers values
func NewStartPacketAnalyzerCreated() *StartPacketAnalyzerCreated {
	return &StartPacketAnalyzerCreated{}
}

/* StartPacketAnalyzerCreated describes a response with status code 201, with default header values.

Created
*/
type StartPacketAnalyzerCreated struct {

	/* URI to created analyzer result object
	 */
	Location string

	Payload *models.PacketAnalyzerResult
}

func (o *StartPacketAnalyzerCreated) Error() string {
	return fmt.Sprintf("[POST /packet/analyzers/{id}/start][%d] startPacketAnalyzerCreated  %+v", 201, o.Payload)
}
func (o *StartPacketAnalyzerCreated) GetPayload() *models.PacketAnalyzerResult {
	return o.Payload
}

func (o *StartPacketAnalyzerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	o.Payload = new(models.PacketAnalyzerResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
