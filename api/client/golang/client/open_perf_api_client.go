// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/spirent/openperf/api/client/golang/client/block_generator"
	"github.com/spirent/openperf/api/client/golang/client/cpu_generator"
	"github.com/spirent/openperf/api/client/golang/client/interfaces"
	"github.com/spirent/openperf/api/client/golang/client/learning"
	"github.com/spirent/openperf/api/client/golang/client/memory_generator"
	"github.com/spirent/openperf/api/client/golang/client/modules"
	"github.com/spirent/openperf/api/client/golang/client/network_generator"
	"github.com/spirent/openperf/api/client/golang/client/packet_analyzers"
	"github.com/spirent/openperf/api/client/golang/client/packet_captures"
	"github.com/spirent/openperf/api/client/golang/client/packet_generators"
	"github.com/spirent/openperf/api/client/golang/client/ports"
	"github.com/spirent/openperf/api/client/golang/client/sockets"
	"github.com/spirent/openperf/api/client/golang/client/stacks"
	"github.com/spirent/openperf/api/client/golang/client/t_v_l_p"
	"github.com/spirent/openperf/api/client/golang/client/time_sync"
)

// Default open perf API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new open perf API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *OpenPerfAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new open perf API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *OpenPerfAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new open perf API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *OpenPerfAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(OpenPerfAPI)
	cli.Transport = transport
	cli.BlockGenerator = block_generator.New(transport, formats)
	cli.CPUGenerator = cpu_generator.New(transport, formats)
	cli.Interfaces = interfaces.New(transport, formats)
	cli.Learning = learning.New(transport, formats)
	cli.MemoryGenerator = memory_generator.New(transport, formats)
	cli.Modules = modules.New(transport, formats)
	cli.NetworkGenerator = network_generator.New(transport, formats)
	cli.PacketAnalyzers = packet_analyzers.New(transport, formats)
	cli.PacketCaptures = packet_captures.New(transport, formats)
	cli.PacketGenerators = packet_generators.New(transport, formats)
	cli.Ports = ports.New(transport, formats)
	cli.Sockets = sockets.New(transport, formats)
	cli.Stacks = stacks.New(transport, formats)
	cli.Tvlp = t_v_l_p.New(transport, formats)
	cli.TimeSync = time_sync.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// OpenPerfAPI is a client for open perf API
type OpenPerfAPI struct {
	BlockGenerator block_generator.ClientService

	CPUGenerator cpu_generator.ClientService

	Interfaces interfaces.ClientService

	Learning learning.ClientService

	MemoryGenerator memory_generator.ClientService

	Modules modules.ClientService

	NetworkGenerator network_generator.ClientService

	PacketAnalyzers packet_analyzers.ClientService

	PacketCaptures packet_captures.ClientService

	PacketGenerators packet_generators.ClientService

	Ports ports.ClientService

	Sockets sockets.ClientService

	Stacks stacks.ClientService

	Tvlp t_v_l_p.ClientService

	TimeSync time_sync.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *OpenPerfAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.BlockGenerator.SetTransport(transport)
	c.CPUGenerator.SetTransport(transport)
	c.Interfaces.SetTransport(transport)
	c.Learning.SetTransport(transport)
	c.MemoryGenerator.SetTransport(transport)
	c.Modules.SetTransport(transport)
	c.NetworkGenerator.SetTransport(transport)
	c.PacketAnalyzers.SetTransport(transport)
	c.PacketCaptures.SetTransport(transport)
	c.PacketGenerators.SetTransport(transport)
	c.Ports.SetTransport(transport)
	c.Sockets.SetTransport(transport)
	c.Stacks.SetTransport(transport)
	c.Tvlp.SetTransport(transport)
	c.TimeSync.SetTransport(transport)
}
