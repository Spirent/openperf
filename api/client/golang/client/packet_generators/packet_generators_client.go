// Code generated by go-swagger; DO NOT EDIT.

package packet_generators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new packet generators API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packet generators API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreatePacketGenerators(params *BulkCreatePacketGeneratorsParams, opts ...ClientOption) (*BulkCreatePacketGeneratorsOK, error)

	BulkDeletePacketGenerators(params *BulkDeletePacketGeneratorsParams, opts ...ClientOption) (*BulkDeletePacketGeneratorsNoContent, error)

	BulkStartPacketGenerators(params *BulkStartPacketGeneratorsParams, opts ...ClientOption) (*BulkStartPacketGeneratorsOK, error)

	BulkStopPacketGenerators(params *BulkStopPacketGeneratorsParams, opts ...ClientOption) (*BulkStopPacketGeneratorsNoContent, error)

	CreatePacketGenerator(params *CreatePacketGeneratorParams, opts ...ClientOption) (*CreatePacketGeneratorCreated, error)

	DeletePacketGenerator(params *DeletePacketGeneratorParams, opts ...ClientOption) (*DeletePacketGeneratorNoContent, error)

	DeletePacketGeneratorResult(params *DeletePacketGeneratorResultParams, opts ...ClientOption) (*DeletePacketGeneratorResultNoContent, error)

	DeletePacketGeneratorResults(params *DeletePacketGeneratorResultsParams, opts ...ClientOption) (*DeletePacketGeneratorResultsNoContent, error)

	DeletePacketGenerators(params *DeletePacketGeneratorsParams, opts ...ClientOption) (*DeletePacketGeneratorsNoContent, error)

	GetPacketGenerator(params *GetPacketGeneratorParams, opts ...ClientOption) (*GetPacketGeneratorOK, error)

	GetPacketGeneratorResult(params *GetPacketGeneratorResultParams, opts ...ClientOption) (*GetPacketGeneratorResultOK, error)

	GetTxFlow(params *GetTxFlowParams, opts ...ClientOption) (*GetTxFlowOK, error)

	ListPacketGeneratorResults(params *ListPacketGeneratorResultsParams, opts ...ClientOption) (*ListPacketGeneratorResultsOK, error)

	ListPacketGenerators(params *ListPacketGeneratorsParams, opts ...ClientOption) (*ListPacketGeneratorsOK, error)

	ListTxFlows(params *ListTxFlowsParams, opts ...ClientOption) (*ListTxFlowsOK, error)

	StartPacketGenerator(params *StartPacketGeneratorParams, opts ...ClientOption) (*StartPacketGeneratorCreated, error)

	StopPacketGenerator(params *StopPacketGeneratorParams, opts ...ClientOption) (*StopPacketGeneratorNoContent, error)

	TogglePacketGenerators(params *TogglePacketGeneratorsParams, opts ...ClientOption) (*TogglePacketGeneratorsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreatePacketGenerators bulks create packet generators

  Create multiple packet generators. Requests are processed in an
all-or-nothing manner, i.e. a single generator creation failure
causes all generator creations for this request to fail.

*/
func (a *Client) BulkCreatePacketGenerators(params *BulkCreatePacketGeneratorsParams, opts ...ClientOption) (*BulkCreatePacketGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreatePacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreatePacketGenerators",
		Method:             "POST",
		PathPattern:        "/packet/generators/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreatePacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreatePacketGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreatePacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeletePacketGenerators bulks delete packet generators

  Delete multiple packet generators in a best-effort manner. Generators
can only be deleted when inactive. Active or Non-existant generator ids
do not cause errors. Idempotent.

*/
func (a *Client) BulkDeletePacketGenerators(params *BulkDeletePacketGeneratorsParams, opts ...ClientOption) (*BulkDeletePacketGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeletePacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDeletePacketGenerators",
		Method:             "POST",
		PathPattern:        "/packet/generators/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeletePacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeletePacketGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeletePacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStartPacketGenerators bulks start packet generators

  Start multiple packet generators simultaneously
*/
func (a *Client) BulkStartPacketGenerators(params *BulkStartPacketGeneratorsParams, opts ...ClientOption) (*BulkStartPacketGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStartPacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStartPacketGenerators",
		Method:             "POST",
		PathPattern:        "/packet/generators/x/bulk-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStartPacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStartPacketGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStartPacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStopPacketGenerators bulks stop packet generators

  Stop multiple packet generators simultaneously
*/
func (a *Client) BulkStopPacketGenerators(params *BulkStopPacketGeneratorsParams, opts ...ClientOption) (*BulkStopPacketGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStopPacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStopPacketGenerators",
		Method:             "POST",
		PathPattern:        "/packet/generators/x/bulk-stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStopPacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStopPacketGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStopPacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePacketGenerator creates a new packet generator
*/
func (a *Client) CreatePacketGenerator(params *CreatePacketGeneratorParams, opts ...ClientOption) (*CreatePacketGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePacketGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePacketGenerator",
		Method:             "POST",
		PathPattern:        "/packet/generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePacketGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePacketGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePacketGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePacketGenerator deletes a packet generator

  Delete a stopped packet generator by id. Also delete all results
created by this generator. Idempotent.

*/
func (a *Client) DeletePacketGenerator(params *DeletePacketGeneratorParams, opts ...ClientOption) (*DeletePacketGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePacketGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePacketGenerator",
		Method:             "DELETE",
		PathPattern:        "/packet/generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePacketGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePacketGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePacketGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePacketGeneratorResult deletes a packet generator result

  Delete an inactive packet generator result. Also deletes all child
tx-flow objects. Idempotent.

*/
func (a *Client) DeletePacketGeneratorResult(params *DeletePacketGeneratorResultParams, opts ...ClientOption) (*DeletePacketGeneratorResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePacketGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePacketGeneratorResult",
		Method:             "DELETE",
		PathPattern:        "/packet/generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePacketGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePacketGeneratorResultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePacketGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePacketGeneratorResults deletes all generator results

  Delete all inactive generator results
*/
func (a *Client) DeletePacketGeneratorResults(params *DeletePacketGeneratorResultsParams, opts ...ClientOption) (*DeletePacketGeneratorResultsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePacketGeneratorResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePacketGeneratorResults",
		Method:             "DELETE",
		PathPattern:        "/packet/generator-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePacketGeneratorResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePacketGeneratorResultsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePacketGeneratorResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePacketGenerators deletes all packet generators

  Delete all inactive packet generators and their results. Idempotent.

*/
func (a *Client) DeletePacketGenerators(params *DeletePacketGeneratorsParams, opts ...ClientOption) (*DeletePacketGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePacketGenerators",
		Method:             "DELETE",
		PathPattern:        "/packet/generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePacketGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPacketGenerator gets a packet generator

  Return a packet generator, by id.
*/
func (a *Client) GetPacketGenerator(params *GetPacketGeneratorParams, opts ...ClientOption) (*GetPacketGeneratorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPacketGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPacketGenerator",
		Method:             "GET",
		PathPattern:        "/packet/generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPacketGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPacketGeneratorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPacketGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPacketGeneratorResult gets a packet generator result

  Returns results from a packet generator by result id.
*/
func (a *Client) GetPacketGeneratorResult(params *GetPacketGeneratorResultParams, opts ...ClientOption) (*GetPacketGeneratorResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPacketGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPacketGeneratorResult",
		Method:             "GET",
		PathPattern:        "/packet/generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPacketGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPacketGeneratorResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPacketGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTxFlow gets a transmit packet flow

  Returns a transmit packet flow by id.
*/
func (a *Client) GetTxFlow(params *GetTxFlowParams, opts ...ClientOption) (*GetTxFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTxFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTxFlow",
		Method:             "GET",
		PathPattern:        "/packet/tx-flows/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTxFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTxFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTxFlow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPacketGeneratorResults lists generator results

  The `generator-results` endpoint returns all generator results created
by generator instances.

*/
func (a *Client) ListPacketGeneratorResults(params *ListPacketGeneratorResultsParams, opts ...ClientOption) (*ListPacketGeneratorResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPacketGeneratorResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPacketGeneratorResults",
		Method:             "GET",
		PathPattern:        "/packet/generator-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPacketGeneratorResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPacketGeneratorResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPacketGeneratorResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPacketGenerators lists packet generators

  The `generators` endpoint returns all packet generators that are
configured to transmit test traffic.

*/
func (a *Client) ListPacketGenerators(params *ListPacketGeneratorsParams, opts ...ClientOption) (*ListPacketGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPacketGenerators",
		Method:             "GET",
		PathPattern:        "/packet/generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPacketGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTxFlows lists packet generator transmit flows

  The `tx-flows` endpoint returns all packet flows that are generated
by packet generators.

*/
func (a *Client) ListTxFlows(params *ListTxFlowsParams, opts ...ClientOption) (*ListTxFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTxFlowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTxFlows",
		Method:             "GET",
		PathPattern:        "/packet/tx-flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTxFlowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTxFlowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTxFlows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartPacketGenerator starts generating packets

  Used to start a non-running generator. Creates a new generator result
upon success. Sequence numbers for signature traffic start at 0.

*/
func (a *Client) StartPacketGenerator(params *StartPacketGeneratorParams, opts ...ClientOption) (*StartPacketGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartPacketGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartPacketGenerator",
		Method:             "POST",
		PathPattern:        "/packet/generators/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartPacketGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartPacketGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartPacketGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopPacketGenerator stops generating packets

  Use to halt a running generator. Idempotent.
*/
func (a *Client) StopPacketGenerator(params *StopPacketGeneratorParams, opts ...ClientOption) (*StopPacketGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPacketGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopPacketGenerator",
		Method:             "POST",
		PathPattern:        "/packet/generators/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopPacketGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPacketGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPacketGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TogglePacketGenerators replaces a running generator with a stopped generator

  Atomically swap a running generator with an idle
generator. Additionally, any sequence numbers for matching
signature traffic will be copied from the running generator to
the idle one.  Upon success, the idle generator will be in the
run state, all matching signature traffic sequence numbers
will continue uninterrupted, and the previously running
generator will be stopped.

*/
func (a *Client) TogglePacketGenerators(params *TogglePacketGeneratorsParams, opts ...ClientOption) (*TogglePacketGeneratorsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTogglePacketGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TogglePacketGenerators",
		Method:             "POST",
		PathPattern:        "/packet/generators/x/toggle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TogglePacketGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TogglePacketGeneratorsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TogglePacketGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
