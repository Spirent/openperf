// Code generated by go-swagger; DO NOT EDIT.

package packet_generators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/spirent/openperf/api/client/golang/models"
)

// TogglePacketGeneratorsReader is a Reader for the TogglePacketGenerators structure.
type TogglePacketGeneratorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TogglePacketGeneratorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewTogglePacketGeneratorsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTogglePacketGeneratorsCreated creates a TogglePacketGeneratorsCreated with default headers values
func NewTogglePacketGeneratorsCreated() *TogglePacketGeneratorsCreated {
	return &TogglePacketGeneratorsCreated{}
}

/* TogglePacketGeneratorsCreated describes a response with status code 201, with default header values.

Created
*/
type TogglePacketGeneratorsCreated struct {

	/* URI to created generator result object
	 */
	Location string

	Payload *models.PacketGeneratorResult
}

func (o *TogglePacketGeneratorsCreated) Error() string {
	return fmt.Sprintf("[POST /packet/generators/x/toggle][%d] togglePacketGeneratorsCreated  %+v", 201, o.Payload)
}
func (o *TogglePacketGeneratorsCreated) GetPayload() *models.PacketGeneratorResult {
	return o.Payload
}

func (o *TogglePacketGeneratorsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	o.Payload = new(models.PacketGeneratorResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TogglePacketGeneratorsBody TogglePacketGeneratorsRequest
//
// Parameters for the toggle operation
swagger:model TogglePacketGeneratorsBody
*/
type TogglePacketGeneratorsBody struct {

	// The unique id of the running generator
	// Required: true
	Replace *string `json:"replace"`

	// The unique id of the stopped generator
	// Required: true
	With *string `json:"with"`
}

// Validate validates this toggle packet generators body
func (o *TogglePacketGeneratorsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReplace(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TogglePacketGeneratorsBody) validateReplace(formats strfmt.Registry) error {

	if err := validate.Required("toggle"+"."+"replace", "body", o.Replace); err != nil {
		return err
	}

	return nil
}

func (o *TogglePacketGeneratorsBody) validateWith(formats strfmt.Registry) error {

	if err := validate.Required("toggle"+"."+"with", "body", o.With); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this toggle packet generators body based on context it is used
func (o *TogglePacketGeneratorsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TogglePacketGeneratorsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TogglePacketGeneratorsBody) UnmarshalBinary(b []byte) error {
	var res TogglePacketGeneratorsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
