// Code generated by go-swagger; DO NOT EDIT.

package t_v_l_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new t v l p API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for t v l p API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTvlpConfiguration(params *CreateTvlpConfigurationParams, opts ...ClientOption) (*CreateTvlpConfigurationCreated, error)

	DeleteTvlpConfiguration(params *DeleteTvlpConfigurationParams, opts ...ClientOption) (*DeleteTvlpConfigurationNoContent, error)

	DeleteTvlpResult(params *DeleteTvlpResultParams, opts ...ClientOption) (*DeleteTvlpResultNoContent, error)

	GetTvlpConfiguration(params *GetTvlpConfigurationParams, opts ...ClientOption) (*GetTvlpConfigurationOK, error)

	GetTvlpResult(params *GetTvlpResultParams, opts ...ClientOption) (*GetTvlpResultOK, error)

	ListTvlpConfigurations(params *ListTvlpConfigurationsParams, opts ...ClientOption) (*ListTvlpConfigurationsOK, error)

	ListTvlpResults(params *ListTvlpResultsParams, opts ...ClientOption) (*ListTvlpResultsOK, error)

	StartTvlpConfiguration(params *StartTvlpConfigurationParams, opts ...ClientOption) (*StartTvlpConfigurationCreated, error)

	StopTvlpConfiguration(params *StopTvlpConfigurationParams, opts ...ClientOption) (*StopTvlpConfigurationNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTvlpConfiguration creates a t v l p configuration

  Create a new TVLP configuration
*/
func (a *Client) CreateTvlpConfiguration(params *CreateTvlpConfigurationParams, opts ...ClientOption) (*CreateTvlpConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTvlpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTvlpConfiguration",
		Method:             "POST",
		PathPattern:        "/tvlp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTvlpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTvlpConfigurationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTvlpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTvlpConfiguration deletes a t v l p configuration

  Deletes an existing TVLP configuration. Idempotent.
*/
func (a *Client) DeleteTvlpConfiguration(params *DeleteTvlpConfigurationParams, opts ...ClientOption) (*DeleteTvlpConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTvlpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTvlpConfiguration",
		Method:             "DELETE",
		PathPattern:        "/tvlp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTvlpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTvlpConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTvlpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTvlpResult deletes a t v l p result idempotent
*/
func (a *Client) DeleteTvlpResult(params *DeleteTvlpResultParams, opts ...ClientOption) (*DeleteTvlpResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTvlpResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTvlpResult",
		Method:             "DELETE",
		PathPattern:        "/tvlp-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTvlpResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTvlpResultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTvlpResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTvlpConfiguration gets a t v l p configuration

  Returns a TVLP configuration, by id.
*/
func (a *Client) GetTvlpConfiguration(params *GetTvlpConfigurationParams, opts ...ClientOption) (*GetTvlpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTvlpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTvlpConfiguration",
		Method:             "GET",
		PathPattern:        "/tvlp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTvlpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTvlpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTvlpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTvlpResult gets a result from a t l v p configuration

  Returns results from a TVLP configuration by result id.
*/
func (a *Client) GetTvlpResult(params *GetTvlpResultParams, opts ...ClientOption) (*GetTvlpResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTvlpResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTvlpResult",
		Method:             "GET",
		PathPattern:        "/tvlp-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTvlpResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTvlpResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTvlpResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTvlpConfigurations lists t v l p configurations

  The `tvlp` endpoint returns all of the TVLP configurations.
*/
func (a *Client) ListTvlpConfigurations(params *ListTvlpConfigurationsParams, opts ...ClientOption) (*ListTvlpConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTvlpConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTvlpConfigurations",
		Method:             "GET",
		PathPattern:        "/tvlp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTvlpConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTvlpConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTvlpConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTvlpResults lists t v l p results

  The `tvlp-results` endpoint returns all of the results produced by running TVLP configurations.
*/
func (a *Client) ListTvlpResults(params *ListTvlpResultsParams, opts ...ClientOption) (*ListTvlpResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTvlpResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTvlpResults",
		Method:             "GET",
		PathPattern:        "/tvlp-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTvlpResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTvlpResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTvlpResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartTvlpConfiguration starts a t v l p configuration

  Start an existing TVLP configuration.
*/
func (a *Client) StartTvlpConfiguration(params *StartTvlpConfigurationParams, opts ...ClientOption) (*StartTvlpConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartTvlpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartTvlpConfiguration",
		Method:             "POST",
		PathPattern:        "/tvlp/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartTvlpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartTvlpConfigurationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartTvlpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopTvlpConfiguration stops a t v l p configuration

  Stop a running TVLP configuration. Idempotent.
*/
func (a *Client) StopTvlpConfiguration(params *StopTvlpConfigurationParams, opts ...ClientOption) (*StopTvlpConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopTvlpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopTvlpConfiguration",
		Method:             "POST",
		PathPattern:        "/tvlp/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopTvlpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopTvlpConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopTvlpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
