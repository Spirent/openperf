// Code generated by go-swagger; DO NOT EDIT.

package cpu_generator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cpu generator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cpu generator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateCPUGenerators(params *BulkCreateCPUGeneratorsParams, opts ...ClientOption) (*BulkCreateCPUGeneratorsOK, error)

	BulkDeleteCPUGenerators(params *BulkDeleteCPUGeneratorsParams, opts ...ClientOption) (*BulkDeleteCPUGeneratorsNoContent, error)

	BulkStartCPUGenerators(params *BulkStartCPUGeneratorsParams, opts ...ClientOption) (*BulkStartCPUGeneratorsOK, error)

	BulkStopCPUGenerators(params *BulkStopCPUGeneratorsParams, opts ...ClientOption) (*BulkStopCPUGeneratorsNoContent, error)

	CreateCPUGenerator(params *CreateCPUGeneratorParams, opts ...ClientOption) (*CreateCPUGeneratorCreated, error)

	DeleteCPUGenerator(params *DeleteCPUGeneratorParams, opts ...ClientOption) (*DeleteCPUGeneratorNoContent, error)

	DeleteCPUGeneratorResult(params *DeleteCPUGeneratorResultParams, opts ...ClientOption) (*DeleteCPUGeneratorResultNoContent, error)

	GetCPUGenerator(params *GetCPUGeneratorParams, opts ...ClientOption) (*GetCPUGeneratorOK, error)

	GetCPUGeneratorResult(params *GetCPUGeneratorResultParams, opts ...ClientOption) (*GetCPUGeneratorResultOK, error)

	GetCPUInfo(params *GetCPUInfoParams, opts ...ClientOption) (*GetCPUInfoOK, error)

	ListCPUGeneratorResults(params *ListCPUGeneratorResultsParams, opts ...ClientOption) (*ListCPUGeneratorResultsOK, error)

	ListCPUGenerators(params *ListCPUGeneratorsParams, opts ...ClientOption) (*ListCPUGeneratorsOK, error)

	StartCPUGenerator(params *StartCPUGeneratorParams, opts ...ClientOption) (*StartCPUGeneratorCreated, error)

	StopCPUGenerator(params *StopCPUGeneratorParams, opts ...ClientOption) (*StopCPUGeneratorNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateCPUGenerators bulks create CPU generators

  Create multiple CPU generators. Requests are processed in an
all-or-nothing manner, i.e. a single CPU generator creation failure
causes all creations for this request to fail.

*/
func (a *Client) BulkCreateCPUGenerators(params *BulkCreateCPUGeneratorsParams, opts ...ClientOption) (*BulkCreateCPUGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateCPUGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreateCpuGenerators",
		Method:             "POST",
		PathPattern:        "/cpu-generators/x/bulk-create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkCreateCPUGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateCPUGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateCpuGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkDeleteCPUGenerators bulks delete CPU generators

  Delete multiple CPU generators in a best-effort manner. Non-existant CPU generators ids
do not cause errors. Idempotent.

*/
func (a *Client) BulkDeleteCPUGenerators(params *BulkDeleteCPUGeneratorsParams, opts ...ClientOption) (*BulkDeleteCPUGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteCPUGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkDeleteCpuGenerators",
		Method:             "POST",
		PathPattern:        "/cpu-generators/x/bulk-delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkDeleteCPUGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkDeleteCPUGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkDeleteCpuGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStartCPUGenerators tells multiple CPU generators to start

  Start multiple CPU generators.
*/
func (a *Client) BulkStartCPUGenerators(params *BulkStartCPUGeneratorsParams, opts ...ClientOption) (*BulkStartCPUGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStartCPUGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStartCpuGenerators",
		Method:             "POST",
		PathPattern:        "/cpu-generators/x/bulk-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStartCPUGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStartCPUGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStartCpuGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkStopCPUGenerators bulks stop CPU generators

  Best-effort stop multiple CPU generators. Non-existent CPU generator ids do not cause errors. Idempotent.
*/
func (a *Client) BulkStopCPUGenerators(params *BulkStopCPUGeneratorsParams, opts ...ClientOption) (*BulkStopCPUGeneratorsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStopCPUGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStopCpuGenerators",
		Method:             "POST",
		PathPattern:        "/cpu-generators/x/bulk-stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkStopCPUGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStopCPUGeneratorsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStopCpuGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCPUGenerator creates a CPU generator

  Create a new CPU generator
*/
func (a *Client) CreateCPUGenerator(params *CreateCPUGeneratorParams, opts ...ClientOption) (*CreateCPUGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCPUGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCpuGenerator",
		Method:             "POST",
		PathPattern:        "/cpu-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCPUGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCPUGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCpuGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCPUGenerator deletes a CPU generator

  Deletes an existing CPU generator. Idempotent.
*/
func (a *Client) DeleteCPUGenerator(params *DeleteCPUGeneratorParams, opts ...ClientOption) (*DeleteCPUGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCPUGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCpuGenerator",
		Method:             "DELETE",
		PathPattern:        "/cpu-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCPUGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCPUGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCpuGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCPUGeneratorResult deletes results from a CPU generator idempotent
*/
func (a *Client) DeleteCPUGeneratorResult(params *DeleteCPUGeneratorResultParams, opts ...ClientOption) (*DeleteCPUGeneratorResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCPUGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCpuGeneratorResult",
		Method:             "DELETE",
		PathPattern:        "/cpu-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCPUGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCPUGeneratorResultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCpuGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCPUGenerator gets a CPU generator

  Returns a CPU generator, by id.
*/
func (a *Client) GetCPUGenerator(params *GetCPUGeneratorParams, opts ...ClientOption) (*GetCPUGeneratorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCpuGenerator",
		Method:             "GET",
		PathPattern:        "/cpu-generators/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCPUGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUGeneratorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCpuGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCPUGeneratorResult gets a result from a CPU generator

  Returns results from a CPU generator by result id.
*/
func (a *Client) GetCPUGeneratorResult(params *GetCPUGeneratorResultParams, opts ...ClientOption) (*GetCPUGeneratorResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUGeneratorResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCpuGeneratorResult",
		Method:             "GET",
		PathPattern:        "/cpu-generator-results/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCPUGeneratorResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUGeneratorResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCpuGeneratorResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCPUInfo gets a CPU info

  The `cpu-info` endpoint returns CPU system info
*/
func (a *Client) GetCPUInfo(params *GetCPUInfoParams, opts ...ClientOption) (*GetCPUInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCpuInfo",
		Method:             "GET",
		PathPattern:        "/cpu-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCPUInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCpuInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCPUGeneratorResults lists CPU generator results

  The `cpu-generator-results` endpoint returns all of the results produced by running CPU generators.
*/
func (a *Client) ListCPUGeneratorResults(params *ListCPUGeneratorResultsParams, opts ...ClientOption) (*ListCPUGeneratorResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCPUGeneratorResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCpuGeneratorResults",
		Method:             "GET",
		PathPattern:        "/cpu-generator-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCPUGeneratorResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCPUGeneratorResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCpuGeneratorResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCPUGenerators lists CPU generators

  The `cpu-generators` endpoint returns all of the configured CPU generators.
*/
func (a *Client) ListCPUGenerators(params *ListCPUGeneratorsParams, opts ...ClientOption) (*ListCPUGeneratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCPUGeneratorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCpuGenerators",
		Method:             "GET",
		PathPattern:        "/cpu-generators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCPUGeneratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCPUGeneratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCpuGenerators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartCPUGenerator starts a CPU generator

  Start an existing CPU generator.
*/
func (a *Client) StartCPUGenerator(params *StartCPUGeneratorParams, opts ...ClientOption) (*StartCPUGeneratorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartCPUGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartCpuGenerator",
		Method:             "POST",
		PathPattern:        "/cpu-generators/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartCPUGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartCPUGeneratorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartCpuGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopCPUGenerator stops a CPU generator

  Stop a running CPU generator. Idempotent.
*/
func (a *Client) StopCPUGenerator(params *StopCPUGeneratorParams, opts ...ClientOption) (*StopCPUGeneratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopCPUGeneratorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopCpuGenerator",
		Method:             "POST",
		PathPattern:        "/cpu-generators/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopCPUGeneratorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopCPUGeneratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopCpuGenerator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
