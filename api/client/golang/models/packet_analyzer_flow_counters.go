// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketAnalyzerFlowCounters Result counters for flows
//
// swagger:model PacketAnalyzerFlowCounters
type PacketAnalyzerFlowCounters struct {

	// errors
	// Required: true
	Errors *PacketAnalyzerFlowCountersErrors `json:"errors"`

	// Number of received packets
	// Required: true
	// Minimum: 0
	FrameCount *int64 `json:"frame_count"`

	// frame length
	FrameLength *PacketAnalyzerFlowCountersFrameLength `json:"frame_length,omitempty"`

	// List of protocol headers
	// Min Items: 1
	Headers []*PacketAnalyzerFlowHeader `json:"headers"`

	// interarrival
	Interarrival *PacketAnalyzerFlowCountersInterarrival `json:"interarrival,omitempty"`

	// jitter ipdv
	JitterIpdv *PacketAnalyzerFlowCountersJitterIpdv `json:"jitter_ipdv,omitempty"`

	// jitter rfc
	JitterRfc *PacketAnalyzerFlowCountersJitterRfc `json:"jitter_rfc,omitempty"`

	// latency
	Latency *PacketAnalyzerFlowCountersLatency `json:"latency,omitempty"`

	// prbs
	Prbs *PacketAnalyzerFlowCountersPrbs `json:"prbs,omitempty"`

	// sequence
	Sequence *PacketAnalyzerFlowCountersSequence `json:"sequence,omitempty"`

	// Timestamp of first received packet
	// Format: date-time
	TimestampFirst strfmt.DateTime `json:"timestamp_first,omitempty"`

	// Timestamp of last received packet
	// Format: date-time
	TimestampLast strfmt.DateTime `json:"timestamp_last,omitempty"`
}

// Validate validates this packet analyzer flow counters
func (m *PacketAnalyzerFlowCounters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterarrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJitterIpdv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJitterRfc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrbs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampFirst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampLast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCounters) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	if m.Errors != nil {
		if err := m.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errors")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateFrameCount(formats strfmt.Registry) error {

	if err := validate.Required("frame_count", "body", m.FrameCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("frame_count", "body", *m.FrameCount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateFrameLength(formats strfmt.Registry) error {
	if swag.IsZero(m.FrameLength) { // not required
		return nil
	}

	if m.FrameLength != nil {
		if err := m.FrameLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frame_length")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	iHeadersSize := int64(len(m.Headers))

	if err := validate.MinItems("headers", "body", iHeadersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateInterarrival(formats strfmt.Registry) error {
	if swag.IsZero(m.Interarrival) { // not required
		return nil
	}

	if m.Interarrival != nil {
		if err := m.Interarrival.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interarrival")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateJitterIpdv(formats strfmt.Registry) error {
	if swag.IsZero(m.JitterIpdv) { // not required
		return nil
	}

	if m.JitterIpdv != nil {
		if err := m.JitterIpdv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_ipdv")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateJitterRfc(formats strfmt.Registry) error {
	if swag.IsZero(m.JitterRfc) { // not required
		return nil
	}

	if m.JitterRfc != nil {
		if err := m.JitterRfc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_rfc")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validatePrbs(formats strfmt.Registry) error {
	if swag.IsZero(m.Prbs) { // not required
		return nil
	}

	if m.Prbs != nil {
		if err := m.Prbs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prbs")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if m.Sequence != nil {
		if err := m.Sequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateTimestampFirst(formats strfmt.Registry) error {
	if swag.IsZero(m.TimestampFirst) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp_first", "body", "date-time", m.TimestampFirst.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) validateTimestampLast(formats strfmt.Registry) error {
	if swag.IsZero(m.TimestampLast) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp_last", "body", "date-time", m.TimestampLast.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters based on the context it is used
func (m *PacketAnalyzerFlowCounters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrameLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterarrival(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJitterIpdv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJitterRfc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrbs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if m.Errors != nil {
		if err := m.Errors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errors")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateFrameLength(ctx context.Context, formats strfmt.Registry) error {

	if m.FrameLength != nil {
		if err := m.FrameLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frame_length")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Headers); i++ {

		if m.Headers[i] != nil {
			if err := m.Headers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateInterarrival(ctx context.Context, formats strfmt.Registry) error {

	if m.Interarrival != nil {
		if err := m.Interarrival.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interarrival")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateJitterIpdv(ctx context.Context, formats strfmt.Registry) error {

	if m.JitterIpdv != nil {
		if err := m.JitterIpdv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_ipdv")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateJitterRfc(ctx context.Context, formats strfmt.Registry) error {

	if m.JitterRfc != nil {
		if err := m.JitterRfc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_rfc")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidatePrbs(ctx context.Context, formats strfmt.Registry) error {

	if m.Prbs != nil {
		if err := m.Prbs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prbs")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowCounters) contextValidateSequence(ctx context.Context, formats strfmt.Registry) error {

	if m.Sequence != nil {
		if err := m.Sequence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCounters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCounters) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCounters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersErrors Error counters
//
// swagger:model PacketAnalyzerFlowCountersErrors
type PacketAnalyzerFlowCountersErrors struct {

	// Number of Frame Check Sequence errors
	// Required: true
	Fcs *int64 `json:"fcs"`

	// Number of IPv4 checksum errors
	// Required: true
	IPV4Checksum *int64 `json:"ipv4_checksum"`

	// Number of TCP checksum errors
	// Required: true
	TCPChecksum *int64 `json:"tcp_checksum"`

	// Number of UDP checksum errors
	// Required: true
	UDPChecksum *int64 `json:"udp_checksum"`
}

// Validate validates this packet analyzer flow counters errors
func (m *PacketAnalyzerFlowCountersErrors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4Checksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDPChecksum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersErrors) validateFcs(formats strfmt.Registry) error {

	if err := validate.Required("errors"+"."+"fcs", "body", m.Fcs); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersErrors) validateIPV4Checksum(formats strfmt.Registry) error {

	if err := validate.Required("errors"+"."+"ipv4_checksum", "body", m.IPV4Checksum); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersErrors) validateTCPChecksum(formats strfmt.Registry) error {

	if err := validate.Required("errors"+"."+"tcp_checksum", "body", m.TCPChecksum); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersErrors) validateUDPChecksum(formats strfmt.Registry) error {

	if err := validate.Required("errors"+"."+"udp_checksum", "body", m.UDPChecksum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet analyzer flow counters errors based on context it is used
func (m *PacketAnalyzerFlowCountersErrors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersErrors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersErrors) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersErrors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersFrameLength Frame length result counters
//
// swagger:model PacketAnalyzerFlowCountersFrameLength
type PacketAnalyzerFlowCountersFrameLength struct {

	// summary
	// Required: true
	Summary *PacketAnalyzerFlowSummaryCounters `json:"summary"`

	// Frame length result units
	// Required: true
	// Enum: [octets]
	Units *string `json:"units"`
}

// Validate validates this packet analyzer flow counters frame length
func (m *PacketAnalyzerFlowCountersFrameLength) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersFrameLength) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("frame_length"+"."+"summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frame_length" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

var packetAnalyzerFlowCountersFrameLengthTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["octets"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetAnalyzerFlowCountersFrameLengthTypeUnitsPropEnum = append(packetAnalyzerFlowCountersFrameLengthTypeUnitsPropEnum, v)
	}
}

const (

	// PacketAnalyzerFlowCountersFrameLengthUnitsOctets captures enum value "octets"
	PacketAnalyzerFlowCountersFrameLengthUnitsOctets string = "octets"
)

// prop value enum
func (m *PacketAnalyzerFlowCountersFrameLength) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetAnalyzerFlowCountersFrameLengthTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersFrameLength) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("frame_length"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("frame_length"+"."+"units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters frame length based on the context it is used
func (m *PacketAnalyzerFlowCountersFrameLength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersFrameLength) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frame_length" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersFrameLength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersFrameLength) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersFrameLength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersInterarrival Inter-arrival time result counters
//
// swagger:model PacketAnalyzerFlowCountersInterarrival
type PacketAnalyzerFlowCountersInterarrival struct {

	// summary
	// Required: true
	Summary *PacketAnalyzerFlowSummaryCounters `json:"summary"`

	// Inter-arrival time measurement units
	// Required: true
	// Enum: [nanoseconds]
	Units *string `json:"units"`
}

// Validate validates this packet analyzer flow counters interarrival
func (m *PacketAnalyzerFlowCountersInterarrival) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersInterarrival) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("interarrival"+"."+"summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interarrival" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

var packetAnalyzerFlowCountersInterarrivalTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nanoseconds"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetAnalyzerFlowCountersInterarrivalTypeUnitsPropEnum = append(packetAnalyzerFlowCountersInterarrivalTypeUnitsPropEnum, v)
	}
}

const (

	// PacketAnalyzerFlowCountersInterarrivalUnitsNanoseconds captures enum value "nanoseconds"
	PacketAnalyzerFlowCountersInterarrivalUnitsNanoseconds string = "nanoseconds"
)

// prop value enum
func (m *PacketAnalyzerFlowCountersInterarrival) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetAnalyzerFlowCountersInterarrivalTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersInterarrival) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("interarrival"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("interarrival"+"."+"units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters interarrival based on the context it is used
func (m *PacketAnalyzerFlowCountersInterarrival) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersInterarrival) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interarrival" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersInterarrival) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersInterarrival) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersInterarrival
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersJitterIpdv Jitter (RFC 3393) result counters
//
// swagger:model PacketAnalyzerFlowCountersJitterIpdv
type PacketAnalyzerFlowCountersJitterIpdv struct {

	// summary
	// Required: true
	Summary *PacketAnalyzerFlowSummaryCounters `json:"summary"`

	// Jitter time measurement units
	// Required: true
	// Enum: [nanoseconds]
	Units *string `json:"units"`
}

// Validate validates this packet analyzer flow counters jitter ipdv
func (m *PacketAnalyzerFlowCountersJitterIpdv) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterIpdv) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("jitter_ipdv"+"."+"summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_ipdv" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

var packetAnalyzerFlowCountersJitterIpdvTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nanoseconds"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetAnalyzerFlowCountersJitterIpdvTypeUnitsPropEnum = append(packetAnalyzerFlowCountersJitterIpdvTypeUnitsPropEnum, v)
	}
}

const (

	// PacketAnalyzerFlowCountersJitterIpdvUnitsNanoseconds captures enum value "nanoseconds"
	PacketAnalyzerFlowCountersJitterIpdvUnitsNanoseconds string = "nanoseconds"
)

// prop value enum
func (m *PacketAnalyzerFlowCountersJitterIpdv) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetAnalyzerFlowCountersJitterIpdvTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterIpdv) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("jitter_ipdv"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("jitter_ipdv"+"."+"units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters jitter ipdv based on the context it is used
func (m *PacketAnalyzerFlowCountersJitterIpdv) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterIpdv) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_ipdv" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersJitterIpdv) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersJitterIpdv) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersJitterIpdv
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersJitterRfc Jitter (RFC 4737) result counters
//
// swagger:model PacketAnalyzerFlowCountersJitterRfc
type PacketAnalyzerFlowCountersJitterRfc struct {

	// summary
	// Required: true
	Summary *PacketAnalyzerFlowSummaryCounters `json:"summary"`

	// Jitter time measurement units
	// Required: true
	// Enum: [nanoseconds]
	Units *string `json:"units"`
}

// Validate validates this packet analyzer flow counters jitter rfc
func (m *PacketAnalyzerFlowCountersJitterRfc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterRfc) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("jitter_rfc"+"."+"summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_rfc" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

var packetAnalyzerFlowCountersJitterRfcTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nanoseconds"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetAnalyzerFlowCountersJitterRfcTypeUnitsPropEnum = append(packetAnalyzerFlowCountersJitterRfcTypeUnitsPropEnum, v)
	}
}

const (

	// PacketAnalyzerFlowCountersJitterRfcUnitsNanoseconds captures enum value "nanoseconds"
	PacketAnalyzerFlowCountersJitterRfcUnitsNanoseconds string = "nanoseconds"
)

// prop value enum
func (m *PacketAnalyzerFlowCountersJitterRfc) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetAnalyzerFlowCountersJitterRfcTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterRfc) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("jitter_rfc"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("jitter_rfc"+"."+"units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters jitter rfc based on the context it is used
func (m *PacketAnalyzerFlowCountersJitterRfc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersJitterRfc) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jitter_rfc" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersJitterRfc) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersJitterRfc) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersJitterRfc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersLatency Latency result counters
//
// swagger:model PacketAnalyzerFlowCountersLatency
type PacketAnalyzerFlowCountersLatency struct {

	// summary
	// Required: true
	Summary *PacketAnalyzerFlowSummaryCounters `json:"summary"`

	// Latency measurement units
	// Required: true
	// Enum: [nanoseconds]
	Units *string `json:"units"`
}

// Validate validates this packet analyzer flow counters latency
func (m *PacketAnalyzerFlowCountersLatency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersLatency) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("latency"+"."+"summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

var packetAnalyzerFlowCountersLatencyTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nanoseconds"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetAnalyzerFlowCountersLatencyTypeUnitsPropEnum = append(packetAnalyzerFlowCountersLatencyTypeUnitsPropEnum, v)
	}
}

const (

	// PacketAnalyzerFlowCountersLatencyUnitsNanoseconds captures enum value "nanoseconds"
	PacketAnalyzerFlowCountersLatencyUnitsNanoseconds string = "nanoseconds"
)

// prop value enum
func (m *PacketAnalyzerFlowCountersLatency) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetAnalyzerFlowCountersLatencyTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersLatency) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("latency"+"."+"units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("latency"+"."+"units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet analyzer flow counters latency based on the context it is used
func (m *PacketAnalyzerFlowCountersLatency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersLatency) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency" + "." + "summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersLatency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersLatency) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersLatency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersPrbs PRBS bit error results
//
// swagger:model PacketAnalyzerFlowCountersPrbs
type PacketAnalyzerFlowCountersPrbs struct {

	// Number of PRBS bit errors detected
	// Required: true
	// Minimum: 0
	BitErrors *int64 `json:"bit_errors"`

	// Number of packets with PRBS bit errors detected
	// Minimum: 0
	FrameErrors *int64 `json:"frame_errors,omitempty"`

	// Number of PRBS octets checked
	// Required: true
	// Minimum: 0
	Octets *int64 `json:"octets"`
}

// Validate validates this packet analyzer flow counters prbs
func (m *PacketAnalyzerFlowCountersPrbs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBitErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOctets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersPrbs) validateBitErrors(formats strfmt.Registry) error {

	if err := validate.Required("prbs"+"."+"bit_errors", "body", m.BitErrors); err != nil {
		return err
	}

	if err := validate.MinimumInt("prbs"+"."+"bit_errors", "body", *m.BitErrors, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersPrbs) validateFrameErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.FrameErrors) { // not required
		return nil
	}

	if err := validate.MinimumInt("prbs"+"."+"frame_errors", "body", *m.FrameErrors, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersPrbs) validateOctets(formats strfmt.Registry) error {

	if err := validate.Required("prbs"+"."+"octets", "body", m.Octets); err != nil {
		return err
	}

	if err := validate.MinimumInt("prbs"+"."+"octets", "body", *m.Octets, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet analyzer flow counters prbs based on context it is used
func (m *PacketAnalyzerFlowCountersPrbs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersPrbs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersPrbs) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersPrbs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PacketAnalyzerFlowCountersSequence Advanced Sequencing result counters
//
// swagger:model PacketAnalyzerFlowCountersSequence
type PacketAnalyzerFlowCountersSequence struct {

	// Number of packets expected but not yet received
	// Required: true
	// Minimum: 0
	Dropped *int64 `json:"dropped"`

	// Number of duplicate packets received
	// Required: true
	// Minimum: 0
	Duplicate *int64 `json:"duplicate"`

	// Number of packets received in the expected sequence
	// Required: true
	// Minimum: 0
	InOrder *int64 `json:"in_order"`

	// Number of late packets received
	// Required: true
	// Minimum: 0
	Late *int64 `json:"late"`

	// Number of reordered packets received
	// Required: true
	// Minimum: 0
	Reordered *int64 `json:"reordered"`

	// Number of packets received in sequence
	// Required: true
	// Minimum: 0
	RunLength *int64 `json:"run_length"`
}

// Validate validates this packet analyzer flow counters sequence
func (m *PacketAnalyzerFlowCountersSequence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDropped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuplicate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReordered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateDropped(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"dropped", "body", m.Dropped); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"dropped", "body", *m.Dropped, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateDuplicate(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"duplicate", "body", m.Duplicate); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"duplicate", "body", *m.Duplicate, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateInOrder(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"in_order", "body", m.InOrder); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"in_order", "body", *m.InOrder, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateLate(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"late", "body", m.Late); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"late", "body", *m.Late, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateReordered(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"reordered", "body", m.Reordered); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"reordered", "body", *m.Reordered, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerFlowCountersSequence) validateRunLength(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"run_length", "body", m.RunLength); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"run_length", "body", *m.RunLength, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet analyzer flow counters sequence based on context it is used
func (m *PacketAnalyzerFlowCountersSequence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersSequence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowCountersSequence) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowCountersSequence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
