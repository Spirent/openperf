// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockDevice Block device
//
// swagger:model BlockDevice
type BlockDevice struct {

	// Unique device identifier
	// Required: true
	ID *string `json:"id"`

	// Any info related to the current block device
	// Required: true
	Info *string `json:"info"`

	// Percentage of initialization completed so far
	// Required: true
	InitPercentComplete *int32 `json:"init_percent_complete"`

	// Resource pathname
	// Required: true
	Path *string `json:"path"`

	// Resource size (in bytes)
	// Required: true
	Size *int64 `json:"size"`

	// State of resource initialization
	// Required: true
	// Enum: [uninitialized initializing ready]
	State *string `json:"state"`

	// Indicates whether it is safe to use this device for block I/O load generation
	// Required: true
	Usable *bool `json:"usable"`
}

// Validate validates this block device
func (m *BlockDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitPercentComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockDevice) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BlockDevice) validateInfo(formats strfmt.Registry) error {

	if err := validate.Required("info", "body", m.Info); err != nil {
		return err
	}

	return nil
}

func (m *BlockDevice) validateInitPercentComplete(formats strfmt.Registry) error {

	if err := validate.Required("init_percent_complete", "body", m.InitPercentComplete); err != nil {
		return err
	}

	return nil
}

func (m *BlockDevice) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *BlockDevice) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

var blockDeviceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["uninitialized","initializing","ready"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blockDeviceTypeStatePropEnum = append(blockDeviceTypeStatePropEnum, v)
	}
}

const (

	// BlockDeviceStateUninitialized captures enum value "uninitialized"
	BlockDeviceStateUninitialized string = "uninitialized"

	// BlockDeviceStateInitializing captures enum value "initializing"
	BlockDeviceStateInitializing string = "initializing"

	// BlockDeviceStateReady captures enum value "ready"
	BlockDeviceStateReady string = "ready"
)

// prop value enum
func (m *BlockDevice) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blockDeviceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlockDevice) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *BlockDevice) validateUsable(formats strfmt.Registry) error {

	if err := validate.Required("usable", "body", m.Usable); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this block device based on context it is used
func (m *BlockDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockDevice) UnmarshalBinary(b []byte) error {
	var res BlockDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
