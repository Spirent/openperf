// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkServerStats Network server statistics
//
// swagger:model networkServerStats
type NetworkServerStats struct {

	// The number of bytes read
	// Required: true
	// Minimum: 0
	BytesReceived *int64 `json:"bytes_received"`

	// The number of bytes written
	// Required: true
	// Minimum: 0
	BytesSent *int64 `json:"bytes_sent"`

	// The number of closed client connections
	// Required: true
	// Minimum: 0
	Closed *int64 `json:"closed"`

	// The number of accepted client connections (the number of operations for UDP socket)
	// Required: true
	// Minimum: 0
	Connections *int64 `json:"connections"`

	// The number of errors observed during connection
	// Required: true
	// Minimum: 0
	Errors *int64 `json:"errors"`
}

// Validate validates this network server stats
func (m *NetworkServerStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytesReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkServerStats) validateBytesReceived(formats strfmt.Registry) error {

	if err := validate.Required("bytes_received", "body", m.BytesReceived); err != nil {
		return err
	}

	if err := validate.MinimumInt("bytes_received", "body", *m.BytesReceived, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServerStats) validateBytesSent(formats strfmt.Registry) error {

	if err := validate.Required("bytes_sent", "body", m.BytesSent); err != nil {
		return err
	}

	if err := validate.MinimumInt("bytes_sent", "body", *m.BytesSent, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServerStats) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("closed", "body", m.Closed); err != nil {
		return err
	}

	if err := validate.MinimumInt("closed", "body", *m.Closed, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServerStats) validateConnections(formats strfmt.Registry) error {

	if err := validate.Required("connections", "body", m.Connections); err != nil {
		return err
	}

	if err := validate.MinimumInt("connections", "body", *m.Connections, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServerStats) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	if err := validate.MinimumInt("errors", "body", *m.Errors, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network server stats based on context it is used
func (m *NetworkServerStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkServerStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkServerStats) UnmarshalBinary(b []byte) error {
	var res NetworkServerStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
