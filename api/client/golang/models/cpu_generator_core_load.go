// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CPUGeneratorCoreLoad Describes the type of CPU load
//
// swagger:model cpuGeneratorCoreLoad
type CPUGeneratorCoreLoad struct {

	// CPU load target operation data type, actual for chosen instruction set
	// Required: true
	// Enum: [int32 int64 float32 float64]
	DataType *string `json:"data_type"`

	// CPU load instruction set
	// Required: true
	// Enum: [scalar sse2 sse4 avx avx2 avx512 neon]
	InstructionSet *string `json:"instruction_set"`
}

// Validate validates this cpu generator core load
func (m *CPUGeneratorCoreLoad) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstructionSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cpuGeneratorCoreLoadTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["int32","int64","float32","float64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cpuGeneratorCoreLoadTypeDataTypePropEnum = append(cpuGeneratorCoreLoadTypeDataTypePropEnum, v)
	}
}

const (

	// CPUGeneratorCoreLoadDataTypeInt32 captures enum value "int32"
	CPUGeneratorCoreLoadDataTypeInt32 string = "int32"

	// CPUGeneratorCoreLoadDataTypeInt64 captures enum value "int64"
	CPUGeneratorCoreLoadDataTypeInt64 string = "int64"

	// CPUGeneratorCoreLoadDataTypeFloat32 captures enum value "float32"
	CPUGeneratorCoreLoadDataTypeFloat32 string = "float32"

	// CPUGeneratorCoreLoadDataTypeFloat64 captures enum value "float64"
	CPUGeneratorCoreLoadDataTypeFloat64 string = "float64"
)

// prop value enum
func (m *CPUGeneratorCoreLoad) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cpuGeneratorCoreLoadTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CPUGeneratorCoreLoad) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("data_type", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("data_type", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

var cpuGeneratorCoreLoadTypeInstructionSetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scalar","sse2","sse4","avx","avx2","avx512","neon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cpuGeneratorCoreLoadTypeInstructionSetPropEnum = append(cpuGeneratorCoreLoadTypeInstructionSetPropEnum, v)
	}
}

const (

	// CPUGeneratorCoreLoadInstructionSetScalar captures enum value "scalar"
	CPUGeneratorCoreLoadInstructionSetScalar string = "scalar"

	// CPUGeneratorCoreLoadInstructionSetSse2 captures enum value "sse2"
	CPUGeneratorCoreLoadInstructionSetSse2 string = "sse2"

	// CPUGeneratorCoreLoadInstructionSetSse4 captures enum value "sse4"
	CPUGeneratorCoreLoadInstructionSetSse4 string = "sse4"

	// CPUGeneratorCoreLoadInstructionSetAvx captures enum value "avx"
	CPUGeneratorCoreLoadInstructionSetAvx string = "avx"

	// CPUGeneratorCoreLoadInstructionSetAvx2 captures enum value "avx2"
	CPUGeneratorCoreLoadInstructionSetAvx2 string = "avx2"

	// CPUGeneratorCoreLoadInstructionSetAvx512 captures enum value "avx512"
	CPUGeneratorCoreLoadInstructionSetAvx512 string = "avx512"

	// CPUGeneratorCoreLoadInstructionSetNeon captures enum value "neon"
	CPUGeneratorCoreLoadInstructionSetNeon string = "neon"
)

// prop value enum
func (m *CPUGeneratorCoreLoad) validateInstructionSetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cpuGeneratorCoreLoadTypeInstructionSetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CPUGeneratorCoreLoad) validateInstructionSet(formats strfmt.Registry) error {

	if err := validate.Required("instruction_set", "body", m.InstructionSet); err != nil {
		return err
	}

	// value enum
	if err := m.validateInstructionSetEnum("instruction_set", "body", *m.InstructionSet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cpu generator core load based on context it is used
func (m *CPUGeneratorCoreLoad) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CPUGeneratorCoreLoad) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPUGeneratorCoreLoad) UnmarshalBinary(b []byte) error {
	var res CPUGeneratorCoreLoad
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
