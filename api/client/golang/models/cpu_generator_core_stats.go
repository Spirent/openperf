// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CPUGeneratorCoreStats CpuGeneratorCoreStats
//
// Core statistics
//
// swagger:model CpuGeneratorCoreStats
type CPUGeneratorCoreStats struct {

	// The total amount of CPU time available
	// Required: true
	Available *int64 `json:"available"`

	// The difference between intended and actual CPU utilization
	// Required: true
	Error *int64 `json:"error"`

	// The amount of system time used, e.g. kernel or system calls
	// Required: true
	System *int64 `json:"system"`

	// The amount of target CPU time
	// Required: true
	Target *int64 `json:"target"`

	// Statistics of the instruction sets (in the order they were specified in core configuration)
	// Required: true
	Targets []*CPUGeneratorTargetStats `json:"targets"`

	// The amount of user time used, e.g. openperf code
	// Required: true
	User *int64 `json:"user"`

	// The amount of CPU time used
	// Required: true
	Utilization *int64 `json:"utilization"`
}

// Validate validates this Cpu generator core stats
func (m *CPUGeneratorCoreStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUGeneratorCoreStats) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateTargets(formats strfmt.Registry) error {

	if err := validate.Required("targets", "body", m.Targets); err != nil {
		return err
	}

	for i := 0; i < len(m.Targets); i++ {
		if swag.IsZero(m.Targets[i]) { // not required
			continue
		}

		if m.Targets[i] != nil {
			if err := m.Targets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorCoreStats) validateUtilization(formats strfmt.Registry) error {

	if err := validate.Required("utilization", "body", m.Utilization); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Cpu generator core stats based on the context it is used
func (m *CPUGeneratorCoreStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUGeneratorCoreStats) contextValidateTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Targets); i++ {

		if m.Targets[i] != nil {
			if err := m.Targets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CPUGeneratorCoreStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPUGeneratorCoreStats) UnmarshalBinary(b []byte) error {
	var res CPUGeneratorCoreStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
