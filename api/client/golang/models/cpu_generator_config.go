// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CPUGeneratorConfig CpuGeneratorConfig
//
// CPU Generator Configuration
//
// swagger:model CpuGeneratorConfig
type CPUGeneratorConfig struct {

	// Per CPU core load configuration
	// Min Items: 1
	Cores []*CPUGeneratorCoreConfig `json:"cores"`

	// Configuration method
	// Required: true
	// Enum: [system cores]
	Method *string `json:"method"`

	// system
	System *CPUGeneratorConfigSystem `json:"system,omitempty"`
}

// Validate validates this Cpu generator config
func (m *CPUGeneratorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUGeneratorConfig) validateCores(formats strfmt.Registry) error {
	if swag.IsZero(m.Cores) { // not required
		return nil
	}

	iCoresSize := int64(len(m.Cores))

	if err := validate.MinItems("cores", "body", iCoresSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Cores); i++ {
		if swag.IsZero(m.Cores[i]) { // not required
			continue
		}

		if m.Cores[i] != nil {
			if err := m.Cores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var cpuGeneratorConfigTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["system","cores"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cpuGeneratorConfigTypeMethodPropEnum = append(cpuGeneratorConfigTypeMethodPropEnum, v)
	}
}

const (

	// CPUGeneratorConfigMethodSystem captures enum value "system"
	CPUGeneratorConfigMethodSystem string = "system"

	// CPUGeneratorConfigMethodCores captures enum value "cores"
	CPUGeneratorConfigMethodCores string = "cores"
)

// prop value enum
func (m *CPUGeneratorConfig) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cpuGeneratorConfigTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CPUGeneratorConfig) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *CPUGeneratorConfig) validateSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Cpu generator config based on the context it is used
func (m *CPUGeneratorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUGeneratorConfig) contextValidateCores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cores); i++ {

		if m.Cores[i] != nil {
			if err := m.Cores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CPUGeneratorConfig) contextValidateSystem(ctx context.Context, formats strfmt.Registry) error {

	if m.System != nil {
		if err := m.System.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CPUGeneratorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPUGeneratorConfig) UnmarshalBinary(b []byte) error {
	var res CPUGeneratorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CPUGeneratorConfigSystem CpuGeneratorSystemConfig
//
// System CPU load
//
// swagger:model CPUGeneratorConfigSystem
type CPUGeneratorConfigSystem struct {

	// CPU utilization value. The maximum value is (100 * core_count).
	//
	// Required: true
	// Minimum: > 0
	Utilization *float64 `json:"utilization"`
}

// Validate validates this CPU generator config system
func (m *CPUGeneratorConfigSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CPUGeneratorConfigSystem) validateUtilization(formats strfmt.Registry) error {

	if err := validate.Required("system"+"."+"utilization", "body", m.Utilization); err != nil {
		return err
	}

	if err := validate.Minimum("system"+"."+"utilization", "body", *m.Utilization, 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this CPU generator config system based on context it is used
func (m *CPUGeneratorConfigSystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CPUGeneratorConfigSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPUGeneratorConfigSystem) UnmarshalBinary(b []byte) error {
	var res CPUGeneratorConfigSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
