// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketEthernetProtocolCounters Layer 2 protocol counters
//
// swagger:model PacketEthernetProtocolCounters
type PacketEthernetProtocolCounters struct {

	// Number of Address Resolution Protocol frames
	// Required: true
	// Minimum: 0
	Arp *int64 `json:"arp"`

	// Number of Fiber Channel over Ethernet frames
	// Required: true
	// Minimum: 0
	Fcoe *int64 `json:"fcoe"`

	// Number of IPv4/IPv6 frames
	// Required: true
	// Minimum: 0
	IP *int64 `json:"ip"`

	// Number of Link Layer Discover Protocol frames
	// Required: true
	// Minimum: 0
	Lldp *int64 `json:"lldp"`

	// Number of Multi Protocol Label Switched frames
	// Required: true
	// Minimum: 0
	Mpls *int64 `json:"mpls"`

	// Number of Network Service Header frames
	// Required: true
	// Minimum: 0
	Nsh *int64 `json:"nsh"`

	// Number of PPP over Ethernet frames
	// Required: true
	// Minimum: 0
	Pppoe *int64 `json:"pppoe"`

	// Number of Queue-in-Queue frames
	// Required: true
	// Minimum: 0
	Qinq *int64 `json:"qinq"`

	// Number of Precision Time Protocol frames
	// Required: true
	// Minimum: 0
	Timesync *int64 `json:"timesync"`

	// Number of Virtual LAN frames
	// Required: true
	// Minimum: 0
	Vlan *int64 `json:"vlan"`
}

// Validate validates this packet ethernet protocol counters
func (m *PacketEthernetProtocolCounters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcoe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLldp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePppoe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQinq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimesync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketEthernetProtocolCounters) validateArp(formats strfmt.Registry) error {

	if err := validate.Required("arp", "body", m.Arp); err != nil {
		return err
	}

	if err := validate.MinimumInt("arp", "body", *m.Arp, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateFcoe(formats strfmt.Registry) error {

	if err := validate.Required("fcoe", "body", m.Fcoe); err != nil {
		return err
	}

	if err := validate.MinimumInt("fcoe", "body", *m.Fcoe, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	if err := validate.MinimumInt("ip", "body", *m.IP, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateLldp(formats strfmt.Registry) error {

	if err := validate.Required("lldp", "body", m.Lldp); err != nil {
		return err
	}

	if err := validate.MinimumInt("lldp", "body", *m.Lldp, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateMpls(formats strfmt.Registry) error {

	if err := validate.Required("mpls", "body", m.Mpls); err != nil {
		return err
	}

	if err := validate.MinimumInt("mpls", "body", *m.Mpls, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateNsh(formats strfmt.Registry) error {

	if err := validate.Required("nsh", "body", m.Nsh); err != nil {
		return err
	}

	if err := validate.MinimumInt("nsh", "body", *m.Nsh, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validatePppoe(formats strfmt.Registry) error {

	if err := validate.Required("pppoe", "body", m.Pppoe); err != nil {
		return err
	}

	if err := validate.MinimumInt("pppoe", "body", *m.Pppoe, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateQinq(formats strfmt.Registry) error {

	if err := validate.Required("qinq", "body", m.Qinq); err != nil {
		return err
	}

	if err := validate.MinimumInt("qinq", "body", *m.Qinq, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateTimesync(formats strfmt.Registry) error {

	if err := validate.Required("timesync", "body", m.Timesync); err != nil {
		return err
	}

	if err := validate.MinimumInt("timesync", "body", *m.Timesync, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketEthernetProtocolCounters) validateVlan(formats strfmt.Registry) error {

	if err := validate.Required("vlan", "body", m.Vlan); err != nil {
		return err
	}

	if err := validate.MinimumInt("vlan", "body", *m.Vlan, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet ethernet protocol counters based on context it is used
func (m *PacketEthernetProtocolCounters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketEthernetProtocolCounters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketEthernetProtocolCounters) UnmarshalBinary(b []byte) error {
	var res PacketEthernetProtocolCounters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
