// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolIPV6 Describes an IPv6 header
//
// swagger:model PacketProtocolIpv6
type PacketProtocolIPV6 struct {

	// IPv6 destination address
	// Pattern: ^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$
	Destination string `json:"destination,omitempty"`

	// IPv6 flow label
	// Maximum: 1.048575e+06
	// Minimum: 0
	FlowLabel *int32 `json:"flow_label,omitempty"`

	// IPv6 hop limit
	// Maximum: 255
	// Minimum: 0
	HopLimit *int32 `json:"hop_limit,omitempty"`

	// IPv6 next header
	// Maximum: 255
	// Minimum: 0
	NextHeader *int32 `json:"next_header,omitempty"`

	// IPv6 payload length
	// Maximum: 65535
	// Minimum: 0
	PayloadLength *int32 `json:"payload_length,omitempty"`

	// IPv6 source address
	// Pattern: ^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$
	Source string `json:"source,omitempty"`

	// IPv6 traffic class
	// Maximum: 255
	// Minimum: 0
	TrafficClass *int32 `json:"traffic_class,omitempty"`

	// IPv6 version
	// Maximum: 15
	// Minimum: 0
	Version *int32 `json:"version,omitempty"`
}

// Validate validates this packet protocol Ipv6
func (m *PacketProtocolIPV6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHopLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloadLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolIPV6) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := validate.Pattern("destination", "body", m.Destination, `^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$`); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateFlowLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowLabel) { // not required
		return nil
	}

	if err := validate.MinimumInt("flow_label", "body", int64(*m.FlowLabel), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("flow_label", "body", int64(*m.FlowLabel), 1.048575e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateHopLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.HopLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("hop_limit", "body", int64(*m.HopLimit), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("hop_limit", "body", int64(*m.HopLimit), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateNextHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.NextHeader) { // not required
		return nil
	}

	if err := validate.MinimumInt("next_header", "body", int64(*m.NextHeader), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("next_header", "body", int64(*m.NextHeader), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validatePayloadLength(formats strfmt.Registry) error {
	if swag.IsZero(m.PayloadLength) { // not required
		return nil
	}

	if err := validate.MinimumInt("payload_length", "body", int64(*m.PayloadLength), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("payload_length", "body", int64(*m.PayloadLength), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.Pattern("source", "body", m.Source, `^((::[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))$`); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateTrafficClass(formats strfmt.Registry) error {
	if swag.IsZero(m.TrafficClass) { // not required
		return nil
	}

	if err := validate.MinimumInt("traffic_class", "body", int64(*m.TrafficClass), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("traffic_class", "body", int64(*m.TrafficClass), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolIPV6) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("version", "body", int64(*m.Version), 15, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol Ipv6 based on context it is used
func (m *PacketProtocolIPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolIPV6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolIPV6) UnmarshalBinary(b []byte) error {
	var res PacketProtocolIPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
