// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterfaceProtocolConfig Network interface protocol configuration
//
// swagger:model InterfaceProtocolConfig
type InterfaceProtocolConfig struct {

	// eth
	Eth *InterfaceProtocolConfigEth `json:"eth,omitempty"`

	// ipv4
	IPV4 *InterfaceProtocolConfigIPV4 `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *InterfaceProtocolConfigIPV6 `json:"ipv6,omitempty"`
}

// Validate validates this interface protocol config
func (m *InterfaceProtocolConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfig) validateEth(formats strfmt.Registry) error {
	if swag.IsZero(m.Eth) { // not required
		return nil
	}

	if m.Eth != nil {
		if err := m.Eth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfig) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	if m.IPV4 != nil {
		if err := m.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfig) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	if m.IPV6 != nil {
		if err := m.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config based on the context it is used
func (m *InterfaceProtocolConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfig) contextValidateEth(ctx context.Context, formats strfmt.Registry) error {

	if m.Eth != nil {
		if err := m.Eth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfig) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4 != nil {
		if err := m.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfig) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6 != nil {
		if err := m.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfig) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigEth Ethernet protocol configuration
//
// swagger:model InterfaceProtocolConfigEth
type InterfaceProtocolConfigEth struct {

	// MAC address
	// Required: true
	MacAddress *string `json:"mac_address"`
}

// Validate validates this interface protocol config eth
func (m *InterfaceProtocolConfigEth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigEth) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.Required("eth"+"."+"mac_address", "body", m.MacAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface protocol config eth based on context it is used
func (m *InterfaceProtocolConfigEth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigEth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigEth) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigEth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV4 IPv4 protocol configuration
//
// swagger:model InterfaceProtocolConfigIPV4
type InterfaceProtocolConfigIPV4 struct {

	// dhcp
	Dhcp *InterfaceProtocolConfigIPV4Dhcp `json:"dhcp,omitempty"`

	// Configuration method
	// Required: true
	// Enum: [static dhcp auto]
	Method *string `json:"method"`

	// static
	Static *InterfaceProtocolConfigIPV4Static `json:"static,omitempty"`
}

// Validate validates this interface protocol config IP v4
func (m *InterfaceProtocolConfigIPV4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4) validateDhcp(formats strfmt.Registry) error {
	if swag.IsZero(m.Dhcp) { // not required
		return nil
	}

	if m.Dhcp != nil {
		if err := m.Dhcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "dhcp")
			}
			return err
		}
	}

	return nil
}

var interfaceProtocolConfigIpV4TypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dhcp","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceProtocolConfigIpV4TypeMethodPropEnum = append(interfaceProtocolConfigIpV4TypeMethodPropEnum, v)
	}
}

const (

	// InterfaceProtocolConfigIPV4MethodStatic captures enum value "static"
	InterfaceProtocolConfigIPV4MethodStatic string = "static"

	// InterfaceProtocolConfigIPV4MethodDhcp captures enum value "dhcp"
	InterfaceProtocolConfigIPV4MethodDhcp string = "dhcp"

	// InterfaceProtocolConfigIPV4MethodAuto captures enum value "auto"
	InterfaceProtocolConfigIPV4MethodAuto string = "auto"
)

// prop value enum
func (m *InterfaceProtocolConfigIPV4) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceProtocolConfigIpV4TypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("ipv4"+"."+"method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("ipv4"+"."+"method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV4) validateStatic(formats strfmt.Registry) error {
	if swag.IsZero(m.Static) { // not required
		return nil
	}

	if m.Static != nil {
		if err := m.Static.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "static")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v4 based on the context it is used
func (m *InterfaceProtocolConfigIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4) contextValidateDhcp(ctx context.Context, formats strfmt.Registry) error {

	if m.Dhcp != nil {
		if err := m.Dhcp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "dhcp")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV4) contextValidateStatic(ctx context.Context, formats strfmt.Registry) error {

	if m.Static != nil {
		if err := m.Static.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "static")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV4Dhcp DHCP configuration parameters
//
// swagger:model InterfaceProtocolConfigIPV4Dhcp
type InterfaceProtocolConfigIPV4Dhcp struct {

	// Client identifier
	Client string `json:"client,omitempty"`

	// Hostname to be requested
	Hostname string `json:"hostname,omitempty"`

	// status
	Status *InterfaceProtocolConfigIPV4DhcpStatus `json:"status,omitempty"`
}

// Validate validates this interface protocol config IP v4 dhcp
func (m *InterfaceProtocolConfigIPV4Dhcp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4Dhcp) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "dhcp" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v4 dhcp based on the context it is used
func (m *InterfaceProtocolConfigIPV4Dhcp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4Dhcp) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4" + "." + "dhcp" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4Dhcp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4Dhcp) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV4Dhcp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV4DhcpStatus DHCP status information
//
// swagger:model InterfaceProtocolConfigIPV4DhcpStatus
type InterfaceProtocolConfigIPV4DhcpStatus struct {

	// IP address
	Address string `json:"address,omitempty"`

	// Default gateway
	Gateway string `json:"gateway,omitempty"`

	// Prefix length
	PrefixLength int32 `json:"prefix_length,omitempty"`

	// Current DHCP client state. Most states are described in
	// RFC 2131. The "checking" state is non-standard and comes
	// from RFC 5227. The "checking" state means the client is
	// performing Address Conflict Detection (ACD).
	//
	// Enum: [none rebooting init_reboot init selecting requesting checking bound renewing rebinding]
	State string `json:"state,omitempty"`
}

// Validate validates this interface protocol config IP v4 dhcp status
func (m *InterfaceProtocolConfigIPV4DhcpStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interfaceProtocolConfigIpV4DhcpStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","rebooting","init_reboot","init","selecting","requesting","checking","bound","renewing","rebinding"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceProtocolConfigIpV4DhcpStatusTypeStatePropEnum = append(interfaceProtocolConfigIpV4DhcpStatusTypeStatePropEnum, v)
	}
}

const (

	// InterfaceProtocolConfigIPV4DhcpStatusStateNone captures enum value "none"
	InterfaceProtocolConfigIPV4DhcpStatusStateNone string = "none"

	// InterfaceProtocolConfigIPV4DhcpStatusStateRebooting captures enum value "rebooting"
	InterfaceProtocolConfigIPV4DhcpStatusStateRebooting string = "rebooting"

	// InterfaceProtocolConfigIPV4DhcpStatusStateInitReboot captures enum value "init_reboot"
	InterfaceProtocolConfigIPV4DhcpStatusStateInitReboot string = "init_reboot"

	// InterfaceProtocolConfigIPV4DhcpStatusStateInit captures enum value "init"
	InterfaceProtocolConfigIPV4DhcpStatusStateInit string = "init"

	// InterfaceProtocolConfigIPV4DhcpStatusStateSelecting captures enum value "selecting"
	InterfaceProtocolConfigIPV4DhcpStatusStateSelecting string = "selecting"

	// InterfaceProtocolConfigIPV4DhcpStatusStateRequesting captures enum value "requesting"
	InterfaceProtocolConfigIPV4DhcpStatusStateRequesting string = "requesting"

	// InterfaceProtocolConfigIPV4DhcpStatusStateChecking captures enum value "checking"
	InterfaceProtocolConfigIPV4DhcpStatusStateChecking string = "checking"

	// InterfaceProtocolConfigIPV4DhcpStatusStateBound captures enum value "bound"
	InterfaceProtocolConfigIPV4DhcpStatusStateBound string = "bound"

	// InterfaceProtocolConfigIPV4DhcpStatusStateRenewing captures enum value "renewing"
	InterfaceProtocolConfigIPV4DhcpStatusStateRenewing string = "renewing"

	// InterfaceProtocolConfigIPV4DhcpStatusStateRebinding captures enum value "rebinding"
	InterfaceProtocolConfigIPV4DhcpStatusStateRebinding string = "rebinding"
)

// prop value enum
func (m *InterfaceProtocolConfigIPV4DhcpStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceProtocolConfigIpV4DhcpStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4DhcpStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("ipv4"+"."+"dhcp"+"."+"status"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v4 dhcp status based on the context it is used
func (m *InterfaceProtocolConfigIPV4DhcpStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4DhcpStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4DhcpStatus) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV4DhcpStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV4Static Static configuration parameters
//
// swagger:model InterfaceProtocolConfigIPV4Static
type InterfaceProtocolConfigIPV4Static struct {

	// IP address
	// Required: true
	Address *string `json:"address"`

	// Default gateway
	Gateway string `json:"gateway,omitempty"`

	// Prefix length
	// Required: true
	PrefixLength *int32 `json:"prefix_length"`
}

// Validate validates this interface protocol config IP v4 static
func (m *InterfaceProtocolConfigIPV4Static) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV4Static) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipv4"+"."+"static"+"."+"address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV4Static) validatePrefixLength(formats strfmt.Registry) error {

	if err := validate.Required("ipv4"+"."+"static"+"."+"prefix_length", "body", m.PrefixLength); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface protocol config IP v4 static based on context it is used
func (m *InterfaceProtocolConfigIPV4Static) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4Static) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV4Static) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV4Static
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV6 IPv6 protocol configuration
//
// swagger:model InterfaceProtocolConfigIPV6
type InterfaceProtocolConfigIPV6 struct {

	// auto
	Auto *InterfaceProtocolConfigIPV6Auto `json:"auto,omitempty"`

	// dhcp6
	Dhcp6 *InterfaceProtocolConfigIPV6Dhcp6 `json:"dhcp6,omitempty"`

	// IPv6 link local address
	LinkLocalAddress string `json:"link_local_address,omitempty"`

	// Configuration method
	// Required: true
	// Enum: [static dhcp6 auto]
	Method *string `json:"method"`

	// static
	Static *InterfaceProtocolConfigIPV6Static `json:"static,omitempty"`
}

// Validate validates this interface protocol config IP v6
func (m *InterfaceProtocolConfigIPV6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcp6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6) validateAuto(formats strfmt.Registry) error {
	if swag.IsZero(m.Auto) { // not required
		return nil
	}

	if m.Auto != nil {
		if err := m.Auto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "auto")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6) validateDhcp6(formats strfmt.Registry) error {
	if swag.IsZero(m.Dhcp6) { // not required
		return nil
	}

	if m.Dhcp6 != nil {
		if err := m.Dhcp6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "dhcp6")
			}
			return err
		}
	}

	return nil
}

var interfaceProtocolConfigIpV6TypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dhcp6","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceProtocolConfigIpV6TypeMethodPropEnum = append(interfaceProtocolConfigIpV6TypeMethodPropEnum, v)
	}
}

const (

	// InterfaceProtocolConfigIPV6MethodStatic captures enum value "static"
	InterfaceProtocolConfigIPV6MethodStatic string = "static"

	// InterfaceProtocolConfigIPV6MethodDhcp6 captures enum value "dhcp6"
	InterfaceProtocolConfigIPV6MethodDhcp6 string = "dhcp6"

	// InterfaceProtocolConfigIPV6MethodAuto captures enum value "auto"
	InterfaceProtocolConfigIPV6MethodAuto string = "auto"
)

// prop value enum
func (m *InterfaceProtocolConfigIPV6) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceProtocolConfigIpV6TypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("ipv6"+"."+"method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("ipv6"+"."+"method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6) validateStatic(formats strfmt.Registry) error {
	if swag.IsZero(m.Static) { // not required
		return nil
	}

	if m.Static != nil {
		if err := m.Static.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "static")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v6 based on the context it is used
func (m *InterfaceProtocolConfigIPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcp6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6) contextValidateAuto(ctx context.Context, formats strfmt.Registry) error {

	if m.Auto != nil {
		if err := m.Auto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "auto")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6) contextValidateDhcp6(ctx context.Context, formats strfmt.Registry) error {

	if m.Dhcp6 != nil {
		if err := m.Dhcp6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "dhcp6")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6) contextValidateStatic(ctx context.Context, formats strfmt.Registry) error {

	if m.Static != nil {
		if err := m.Static.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "static")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV6Auto Automatic configuration parameters
//
// swagger:model InterfaceProtocolConfigIPV6Auto
type InterfaceProtocolConfigIPV6Auto struct {

	// status
	Status *IPV6DynamicAddressStatus `json:"status,omitempty"`
}

// Validate validates this interface protocol config IP v6 auto
func (m *InterfaceProtocolConfigIPV6Auto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6Auto) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "auto" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v6 auto based on the context it is used
func (m *InterfaceProtocolConfigIPV6Auto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6Auto) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "auto" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Auto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Auto) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV6Auto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV6Dhcp6 DHCPv6 configuration parameters
//
// swagger:model InterfaceProtocolConfigIPV6Dhcp6
type InterfaceProtocolConfigIPV6Dhcp6 struct {

	// Stateless DHCPv6
	// Required: true
	Stateless bool `json:"stateless"`

	// status
	Status *IPV6DynamicAddressStatus `json:"status,omitempty"`
}

// Validate validates this interface protocol config IP v6 dhcp6
func (m *InterfaceProtocolConfigIPV6Dhcp6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStateless(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6Dhcp6) validateStateless(formats strfmt.Registry) error {

	if err := validate.Required("ipv6"+"."+"dhcp6"+"."+"stateless", "body", bool(m.Stateless)); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6Dhcp6) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "dhcp6" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interface protocol config IP v6 dhcp6 based on the context it is used
func (m *InterfaceProtocolConfigIPV6Dhcp6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6Dhcp6) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6" + "." + "dhcp6" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Dhcp6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Dhcp6) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV6Dhcp6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceProtocolConfigIPV6Static Static configuration parameters
//
// swagger:model InterfaceProtocolConfigIPV6Static
type InterfaceProtocolConfigIPV6Static struct {

	// IPv6 address
	// Required: true
	Address *string `json:"address"`

	// Default gateway
	Gateway string `json:"gateway,omitempty"`

	// Prefix length
	// Required: true
	PrefixLength *int32 `json:"prefix_length"`
}

// Validate validates this interface protocol config IP v6 static
func (m *InterfaceProtocolConfigIPV6Static) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceProtocolConfigIPV6Static) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipv6"+"."+"static"+"."+"address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceProtocolConfigIPV6Static) validatePrefixLength(formats strfmt.Registry) error {

	if err := validate.Required("ipv6"+"."+"static"+"."+"prefix_length", "body", m.PrefixLength); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface protocol config IP v6 static based on context it is used
func (m *InterfaceProtocolConfigIPV6Static) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Static) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceProtocolConfigIPV6Static) UnmarshalBinary(b []byte) error {
	var res InterfaceProtocolConfigIPV6Static
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
