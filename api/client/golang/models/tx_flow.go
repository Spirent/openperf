// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TxFlow A transmitted packet flow
//
// swagger:model TxFlow
type TxFlow struct {

	// counters
	// Required: true
	Counters *PacketGeneratorFlowCounters `json:"counters"`

	// Unique generator result identifier that recorded this flow
	// Required: true
	GeneratorResultID *string `json:"generator_result_id"`

	// Unique transmit flow identifier
	// Required: true
	ID *string `json:"id"`

	// Spirent signature stream id
	StreamID int64 `json:"stream_id,omitempty"`
}

// Validate validates this tx flow
func (m *TxFlow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneratorResultID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TxFlow) validateCounters(formats strfmt.Registry) error {

	if err := validate.Required("counters", "body", m.Counters); err != nil {
		return err
	}

	if m.Counters != nil {
		if err := m.Counters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counters")
			}
			return err
		}
	}

	return nil
}

func (m *TxFlow) validateGeneratorResultID(formats strfmt.Registry) error {

	if err := validate.Required("generator_result_id", "body", m.GeneratorResultID); err != nil {
		return err
	}

	return nil
}

func (m *TxFlow) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tx flow based on the context it is used
func (m *TxFlow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TxFlow) contextValidateCounters(ctx context.Context, formats strfmt.Registry) error {

	if m.Counters != nil {
		if err := m.Counters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TxFlow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxFlow) UnmarshalBinary(b []byte) error {
	var res TxFlow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
