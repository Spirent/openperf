// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkGeneratorConnectionStats Network generator connection statistics
//
// swagger:model NetworkGeneratorConnectionStats
type NetworkGeneratorConnectionStats struct {

	// The number of attempts to establish connections
	// Required: true
	Attempted *int64 `json:"attempted"`

	// The number of closed connections
	// Required: true
	Closed *int64 `json:"closed"`

	// The number of errors observed during connecting process
	// Required: true
	Errors *int64 `json:"errors"`

	// The actual number of established connections
	// Required: true
	Successful *int64 `json:"successful"`
}

// Validate validates this network generator connection stats
func (m *NetworkGeneratorConnectionStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttempted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessful(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkGeneratorConnectionStats) validateAttempted(formats strfmt.Registry) error {

	if err := validate.Required("attempted", "body", m.Attempted); err != nil {
		return err
	}

	return nil
}

func (m *NetworkGeneratorConnectionStats) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("closed", "body", m.Closed); err != nil {
		return err
	}

	return nil
}

func (m *NetworkGeneratorConnectionStats) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	return nil
}

func (m *NetworkGeneratorConnectionStats) validateSuccessful(formats strfmt.Registry) error {

	if err := validate.Required("successful", "body", m.Successful); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network generator connection stats based on context it is used
func (m *NetworkGeneratorConnectionStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkGeneratorConnectionStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkGeneratorConnectionStats) UnmarshalBinary(b []byte) error {
	var res NetworkGeneratorConnectionStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
