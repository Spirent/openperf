// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TvlpConfiguration TVLP configuration
//
// swagger:model TvlpConfiguration
type TvlpConfiguration struct {

	// string describing error condition; only when state == error
	Error string `json:"error,omitempty"`

	// Unique TVLP configuration identifier
	// Required: true
	ID *string `json:"id"`

	// profile
	// Required: true
	Profile *TvlpProfile `json:"profile"`

	// TVLP configuration state
	// - ready - TVLP contains a valid configuration and is ready to be started
	// - countdown - TVLP has been given a start time in the future and is waiting to start replaying a profile
	// - running - TVLP is replaying a profile
	// - error - TVLP encountered a runtime error
	//
	// Required: true
	// Enum: [ready countdown running error]
	State *string `json:"state"`

	// time
	// Required: true
	Time *TvlpConfigurationTime `json:"time"`
}

// Validate validates this tvlp configuration
func (m *TvlpConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpConfiguration) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TvlpConfiguration) validateProfile(formats strfmt.Registry) error {

	if err := validate.Required("profile", "body", m.Profile); err != nil {
		return err
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

var tvlpConfigurationTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ready","countdown","running","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tvlpConfigurationTypeStatePropEnum = append(tvlpConfigurationTypeStatePropEnum, v)
	}
}

const (

	// TvlpConfigurationStateReady captures enum value "ready"
	TvlpConfigurationStateReady string = "ready"

	// TvlpConfigurationStateCountdown captures enum value "countdown"
	TvlpConfigurationStateCountdown string = "countdown"

	// TvlpConfigurationStateRunning captures enum value "running"
	TvlpConfigurationStateRunning string = "running"

	// TvlpConfigurationStateError captures enum value "error"
	TvlpConfigurationStateError string = "error"
)

// prop value enum
func (m *TvlpConfiguration) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tvlpConfigurationTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TvlpConfiguration) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *TvlpConfiguration) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tvlp configuration based on the context it is used
func (m *TvlpConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpConfiguration) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {
		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpConfiguration) contextValidateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.Time != nil {
		if err := m.Time.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpConfiguration) UnmarshalBinary(b []byte) error {
	var res TvlpConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpConfigurationTime read only TVLP time parameters
//
// swagger:model TvlpConfigurationTime
type TvlpConfigurationTime struct {

	// length of the current tvlp profile in ns
	// Required: true
	Length *int64 `json:"length"`

	// current offset in ns (only available when running)
	Offset int64 `json:"offset,omitempty"`

	// The ISO8601-formatted date to start TVLP profile (only available when countdown)
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`
}

// Validate validates this tvlp configuration time
func (m *TvlpConfigurationTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpConfigurationTime) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("time"+"."+"length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *TvlpConfigurationTime) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("time"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tvlp configuration time based on context it is used
func (m *TvlpConfigurationTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TvlpConfigurationTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpConfigurationTime) UnmarshalBinary(b []byte) error {
	var res TvlpConfigurationTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
