// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketGeneratorLearningResults Current results of ARP/ND operations for an
// interface-attached generator.
//
//
// swagger:model PacketGeneratorLearningResults
type PacketGeneratorLearningResults struct {

	// List of IPv4 address and their associated MAC addresses.
	IPV4 []*PacketGeneratorLearningResultIPV4 `json:"ipv4"`

	// List of IPv6 destinations, IPv6 next hop, and next hop MAC addresses.
	IPV6 []*PacketGeneratorLearningResultIPV6 `json:"ipv6"`

	// Indicates current learning state.
	//
	// Required: true
	// Enum: [resolved resolving timed_out unresolved]
	ResolvedState *string `json:"resolved_state"`
}

// Validate validates this packet generator learning results
func (m *PacketGeneratorLearningResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvedState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorLearningResults) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV4); i++ {
		if swag.IsZero(m.IPV4[i]) { // not required
			continue
		}

		if m.IPV4[i] != nil {
			if err := m.IPV4[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipv4" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PacketGeneratorLearningResults) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV6); i++ {
		if swag.IsZero(m.IPV6[i]) { // not required
			continue
		}

		if m.IPV6[i] != nil {
			if err := m.IPV6[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipv6" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var packetGeneratorLearningResultsTypeResolvedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["resolved","resolving","timed_out","unresolved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetGeneratorLearningResultsTypeResolvedStatePropEnum = append(packetGeneratorLearningResultsTypeResolvedStatePropEnum, v)
	}
}

const (

	// PacketGeneratorLearningResultsResolvedStateResolved captures enum value "resolved"
	PacketGeneratorLearningResultsResolvedStateResolved string = "resolved"

	// PacketGeneratorLearningResultsResolvedStateResolving captures enum value "resolving"
	PacketGeneratorLearningResultsResolvedStateResolving string = "resolving"

	// PacketGeneratorLearningResultsResolvedStateTimedOut captures enum value "timed_out"
	PacketGeneratorLearningResultsResolvedStateTimedOut string = "timed_out"

	// PacketGeneratorLearningResultsResolvedStateUnresolved captures enum value "unresolved"
	PacketGeneratorLearningResultsResolvedStateUnresolved string = "unresolved"
)

// prop value enum
func (m *PacketGeneratorLearningResults) validateResolvedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetGeneratorLearningResultsTypeResolvedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketGeneratorLearningResults) validateResolvedState(formats strfmt.Registry) error {

	if err := validate.Required("resolved_state", "body", m.ResolvedState); err != nil {
		return err
	}

	// value enum
	if err := m.validateResolvedStateEnum("resolved_state", "body", *m.ResolvedState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet generator learning results based on the context it is used
func (m *PacketGeneratorLearningResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorLearningResults) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPV4); i++ {

		if m.IPV4[i] != nil {
			if err := m.IPV4[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipv4" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PacketGeneratorLearningResults) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPV6); i++ {

		if m.IPV6[i] != nil {
			if err := m.IPV6[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipv6" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketGeneratorLearningResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketGeneratorLearningResults) UnmarshalBinary(b []byte) error {
	var res PacketGeneratorLearningResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
