// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficLength Specifies length of generated packets. At least one property must be set.
//
//
// swagger:model TrafficLength
type TrafficLength struct {

	// Fixed packet length
	// Minimum: 64
	Fixed int32 `json:"fixed,omitempty"`

	// List of packet lengths
	List []int32 `json:"list"`

	// sequence
	Sequence *TrafficLengthSequence `json:"sequence,omitempty"`
}

// Validate validates this traffic length
func (m *TrafficLength) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFixed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficLength) validateFixed(formats strfmt.Registry) error {
	if swag.IsZero(m.Fixed) { // not required
		return nil
	}

	if err := validate.MinimumInt("fixed", "body", int64(m.Fixed), 64, false); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLength) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	for i := 0; i < len(m.List); i++ {

		if err := validate.MinimumInt("list"+"."+strconv.Itoa(i), "body", int64(m.List[i]), 64, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *TrafficLength) validateSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if m.Sequence != nil {
		if err := m.Sequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic length based on the context it is used
func (m *TrafficLength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficLength) contextValidateSequence(ctx context.Context, formats strfmt.Registry) error {

	if m.Sequence != nil {
		if err := m.Sequence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficLength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficLength) UnmarshalBinary(b []byte) error {
	var res TrafficLength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficLengthSequence Specifies a sequence of packet lengths
//
// swagger:model TrafficLengthSequence
type TrafficLengthSequence struct {

	// The number of different packet lengths
	// Required: true
	// Minimum: 1
	Count *int32 `json:"count"`

	// List of lengths in the sequence to skip
	Skip []int32 `json:"skip"`

	// The first length in the sequence
	// Required: true
	// Minimum: 64
	Start *int32 `json:"start"`

	// The last length in the sequence
	// Minimum: 64
	Stop int32 `json:"stop,omitempty"`
}

// Validate validates this traffic length sequence
func (m *TrafficLengthSequence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficLengthSequence) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"count", "body", int64(*m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLengthSequence) validateSkip(formats strfmt.Registry) error {
	if swag.IsZero(m.Skip) { // not required
		return nil
	}

	for i := 0; i < len(m.Skip); i++ {

		if err := validate.MinimumInt("sequence"+"."+"skip"+"."+strconv.Itoa(i), "body", int64(m.Skip[i]), 64, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *TrafficLengthSequence) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"start", "body", int64(*m.Start), 64, false); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLengthSequence) validateStop(formats strfmt.Registry) error {
	if swag.IsZero(m.Stop) { // not required
		return nil
	}

	if err := validate.MinimumInt("sequence"+"."+"stop", "body", int64(m.Stop), 64, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this traffic length sequence based on context it is used
func (m *TrafficLengthSequence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficLengthSequence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficLengthSequence) UnmarshalBinary(b []byte) error {
	var res TrafficLengthSequence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
