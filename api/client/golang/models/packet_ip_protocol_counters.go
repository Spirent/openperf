// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketIPProtocolCounters Layer 3 protocol counters
//
// swagger:model PacketIpProtocolCounters
type PacketIPProtocolCounters struct {

	// Number of IPv4 packets without extensions
	// Required: true
	// Minimum: 0
	IPV4 *int64 `json:"ipv4"`

	// Number of IPv6 packets without extensions
	// Required: true
	// Minimum: 0
	IPV6 *int64 `json:"ipv6"`
}

// Validate validates this packet Ip protocol counters
func (m *PacketIPProtocolCounters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketIPProtocolCounters) validateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("ipv4", "body", m.IPV4); err != nil {
		return err
	}

	if err := validate.MinimumInt("ipv4", "body", *m.IPV4, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketIPProtocolCounters) validateIPV6(formats strfmt.Registry) error {

	if err := validate.Required("ipv6", "body", m.IPV6); err != nil {
		return err
	}

	if err := validate.MinimumInt("ipv6", "body", *m.IPV6, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet Ip protocol counters based on context it is used
func (m *PacketIPProtocolCounters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketIPProtocolCounters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketIPProtocolCounters) UnmarshalBinary(b []byte) error {
	var res PacketIPProtocolCounters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
