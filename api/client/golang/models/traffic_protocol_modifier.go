// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficProtocolModifier Specifies how to modify protocol data
//
// swagger:model TrafficProtocolModifier
type TrafficProtocolModifier struct {

	// field
	Field *TrafficProtocolFieldModifier `json:"field,omitempty"`

	// ipv4
	IPV4 *TrafficProtocolIPV4Modifier `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *TrafficProtocolIPV6Modifier `json:"ipv6,omitempty"`

	// mac
	Mac *TrafficProtocolMacModifier `json:"mac,omitempty"`

	// Packet protocol field to modify. Context determines what field
	// names are valid and what data is expected in the modifier.
	//
	// Required: true
	Name *string `json:"name"`

	// Specifies the number of octets into the protocol field to write
	// modifier data. Currently only valid for the custom packet protocol
	// \"data\" field.
	//
	Offset int64 `json:"offset,omitempty"`

	// Specifies whether to pseudo-randomly order the modifier values
	//
	// Required: true
	Permute *bool `json:"permute"`
}

// Validate validates this traffic protocol modifier
func (m *TrafficProtocolModifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficProtocolModifier) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	if m.Field != nil {
		if err := m.Field.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	if m.IPV4 != nil {
		if err := m.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	if m.IPV6 != nil {
		if err := m.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) validateMac(formats strfmt.Registry) error {
	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if m.Mac != nil {
		if err := m.Mac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TrafficProtocolModifier) validatePermute(formats strfmt.Registry) error {

	if err := validate.Required("permute", "body", m.Permute); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this traffic protocol modifier based on the context it is used
func (m *TrafficProtocolModifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMac(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficProtocolModifier) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if m.Field != nil {
		if err := m.Field.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4 != nil {
		if err := m.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6 != nil {
		if err := m.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficProtocolModifier) contextValidateMac(ctx context.Context, formats strfmt.Registry) error {

	if m.Mac != nil {
		if err := m.Mac.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficProtocolModifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficProtocolModifier) UnmarshalBinary(b []byte) error {
	var res TrafficProtocolModifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
