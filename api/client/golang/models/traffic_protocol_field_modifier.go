// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficProtocolFieldModifier Specifies how to modify a protocol data field. Maximum values are
// determined by the field to modify.
//
//
// swagger:model trafficProtocolFieldModifier
type TrafficProtocolFieldModifier struct {

	// List of modifier values. Context determines what values are valid.
	//
	// Min Items: 1
	List []*int64 `json:"list"`

	// sequence
	Sequence *TrafficProtocolFieldModifierSequence `json:"sequence,omitempty"`
}

// Validate validates this traffic protocol field modifier
func (m *TrafficProtocolFieldModifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficProtocolFieldModifier) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	iListSize := int64(len(m.List))

	if err := validate.MinItems("list", "body", iListSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.List); i++ {
		if swag.IsZero(m.List[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("list"+"."+strconv.Itoa(i), "body", *m.List[i], 0, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *TrafficProtocolFieldModifier) validateSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if m.Sequence != nil {
		if err := m.Sequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic protocol field modifier based on the context it is used
func (m *TrafficProtocolFieldModifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficProtocolFieldModifier) contextValidateSequence(ctx context.Context, formats strfmt.Registry) error {

	if m.Sequence != nil {
		if err := m.Sequence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficProtocolFieldModifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficProtocolFieldModifier) UnmarshalBinary(b []byte) error {
	var res TrafficProtocolFieldModifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficProtocolFieldModifierSequence Specifies a sequence of values. Context determines what values are
// valid.
//
//
// swagger:model TrafficProtocolFieldModifierSequence
type TrafficProtocolFieldModifierSequence struct {

	// The number of values in the sequence
	// Required: true
	// Minimum: 1
	Count *int64 `json:"count"`

	// List of values in the sequence to skip
	Skip []*int64 `json:"skip"`

	// The first value in the sequence
	// Required: true
	// Minimum: 0
	Start *int64 `json:"start"`

	// The last value in the sequence
	// Minimum: 0
	Stop *int64 `json:"stop,omitempty"`
}

// Validate validates this traffic protocol field modifier sequence
func (m *TrafficProtocolFieldModifierSequence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficProtocolFieldModifierSequence) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"count", "body", *m.Count, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *TrafficProtocolFieldModifierSequence) validateSkip(formats strfmt.Registry) error {
	if swag.IsZero(m.Skip) { // not required
		return nil
	}

	for i := 0; i < len(m.Skip); i++ {
		if swag.IsZero(m.Skip[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("sequence"+"."+"skip"+"."+strconv.Itoa(i), "body", *m.Skip[i], 0, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *TrafficProtocolFieldModifierSequence) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("sequence"+"."+"start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence"+"."+"start", "body", *m.Start, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TrafficProtocolFieldModifierSequence) validateStop(formats strfmt.Registry) error {
	if swag.IsZero(m.Stop) { // not required
		return nil
	}

	if err := validate.MinimumInt("sequence"+"."+"stop", "body", *m.Stop, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this traffic protocol field modifier sequence based on context it is used
func (m *TrafficProtocolFieldModifierSequence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficProtocolFieldModifierSequence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficProtocolFieldModifierSequence) UnmarshalBinary(b []byte) error {
	var res TrafficProtocolFieldModifierSequence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
