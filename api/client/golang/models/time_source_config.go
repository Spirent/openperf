// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSourceConfig time source configuration
//
// swagger:model TimeSourceConfig
type TimeSourceConfig struct {

	// ntp
	Ntp *TimeSourceConfigNtp `json:"ntp,omitempty"`
}

// Validate validates this time source config
func (m *TimeSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNtp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSourceConfig) validateNtp(formats strfmt.Registry) error {
	if swag.IsZero(m.Ntp) { // not required
		return nil
	}

	if m.Ntp != nil {
		if err := m.Ntp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this time source config based on the context it is used
func (m *TimeSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNtp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSourceConfig) contextValidateNtp(ctx context.Context, formats strfmt.Registry) error {

	if m.Ntp != nil {
		if err := m.Ntp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSourceConfig) UnmarshalBinary(b []byte) error {
	var res TimeSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TimeSourceConfigNtp Network Time Protocol Server
//
// swagger:model TimeSourceConfigNtp
type TimeSourceConfigNtp struct {

	// network hostname or address for server
	// Required: true
	Hostname *string `json:"hostname"`

	// service name or port for server
	Port *string `json:"port,omitempty"`
}

// Validate validates this time source config ntp
func (m *TimeSourceConfigNtp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSourceConfigNtp) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("ntp"+"."+"hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this time source config ntp based on context it is used
func (m *TimeSourceConfigNtp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TimeSourceConfigNtp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSourceConfigNtp) UnmarshalBinary(b []byte) error {
	var res TimeSourceConfigNtp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
