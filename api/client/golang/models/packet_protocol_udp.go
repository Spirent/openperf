// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolUDP Describes a udp header
//
// swagger:model PacketProtocolUdp
type PacketProtocolUDP struct {

	// udp checksum
	// Maximum: 65535
	// Minimum: 0
	Checksum *int32 `json:"checksum,omitempty"`

	// udp destination
	// Maximum: 65535
	// Minimum: 0
	Destination *int32 `json:"destination,omitempty"`

	// udp length
	// Maximum: 65535
	// Minimum: 0
	Length *int32 `json:"length,omitempty"`

	// udp source
	// Maximum: 65535
	// Minimum: 0
	Source *int32 `json:"source,omitempty"`
}

// Validate validates this packet protocol Udp
func (m *PacketProtocolUDP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolUDP) validateChecksum(formats strfmt.Registry) error {
	if swag.IsZero(m.Checksum) { // not required
		return nil
	}

	if err := validate.MinimumInt("checksum", "body", int64(*m.Checksum), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("checksum", "body", int64(*m.Checksum), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolUDP) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination", "body", int64(*m.Destination), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination", "body", int64(*m.Destination), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolUDP) validateLength(formats strfmt.Registry) error {
	if swag.IsZero(m.Length) { // not required
		return nil
	}

	if err := validate.MinimumInt("length", "body", int64(*m.Length), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length", "body", int64(*m.Length), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolUDP) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.MinimumInt("source", "body", int64(*m.Source), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source", "body", int64(*m.Source), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol Udp based on context it is used
func (m *PacketProtocolUDP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolUDP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolUDP) UnmarshalBinary(b []byte) error {
	var res PacketProtocolUDP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
