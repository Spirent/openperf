// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PacketAnalyzerFlowHeader A decoded protocol header
//
// swagger:model PacketAnalyzerFlowHeader
type PacketAnalyzerFlowHeader struct {

	// ethernet
	Ethernet *PacketProtocolEthernet `json:"ethernet,omitempty"`

	// ipv4
	IPV4 *PacketProtocolIPV4 `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *PacketProtocolIPV6 `json:"ipv6,omitempty"`

	// mpls
	Mpls *PacketProtocolMpls `json:"mpls,omitempty"`

	// tcp
	TCP *PacketProtocolTCP `json:"tcp,omitempty"`

	// udp
	UDP *PacketProtocolUDP `json:"udp,omitempty"`

	// Base64 encoded header
	Unknown string `json:"unknown,omitempty"`

	// vlan
	Vlan *PacketProtocolVlan `json:"vlan,omitempty"`
}

// Validate validates this packet analyzer flow header
func (m *PacketAnalyzerFlowHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthernet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowHeader) validateEthernet(formats strfmt.Registry) error {
	if swag.IsZero(m.Ethernet) { // not required
		return nil
	}

	if m.Ethernet != nil {
		if err := m.Ethernet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4) { // not required
		return nil
	}

	if m.IPV4 != nil {
		if err := m.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6) { // not required
		return nil
	}

	if m.IPV6 != nil {
		if err := m.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateMpls(formats strfmt.Registry) error {
	if swag.IsZero(m.Mpls) { // not required
		return nil
	}

	if m.Mpls != nil {
		if err := m.Mpls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mpls")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateTCP(formats strfmt.Registry) error {
	if swag.IsZero(m.TCP) { // not required
		return nil
	}

	if m.TCP != nil {
		if err := m.TCP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateUDP(formats strfmt.Registry) error {
	if swag.IsZero(m.UDP) { // not required
		return nil
	}

	if m.UDP != nil {
		if err := m.UDP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) validateVlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this packet analyzer flow header based on the context it is used
func (m *PacketAnalyzerFlowHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEthernet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMpls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTCP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUDP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateEthernet(ctx context.Context, formats strfmt.Registry) error {

	if m.Ethernet != nil {
		if err := m.Ethernet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4 != nil {
		if err := m.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6 != nil {
		if err := m.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateMpls(ctx context.Context, formats strfmt.Registry) error {

	if m.Mpls != nil {
		if err := m.Mpls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mpls")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateTCP(ctx context.Context, formats strfmt.Registry) error {

	if m.TCP != nil {
		if err := m.TCP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateUDP(ctx context.Context, formats strfmt.Registry) error {

	if m.UDP != nil {
		if err := m.UDP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerFlowHeader) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerFlowHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerFlowHeader) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerFlowHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
