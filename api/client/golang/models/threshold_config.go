// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThresholdConfig Threshold value
//
// swagger:model ThresholdConfig
type ThresholdConfig struct {

	// The mathematical relation between value and statistic
	// Required: true
	// Enum: [greater greater_or_equal less less_or_equal equal]
	Condition *string `json:"condition"`

	// The function to apply to the statistic before evaluating
	// Required: true
	// Enum: [dx dxdt dxdy]
	Function *string `json:"function"`

	// Unique threshold configuration identifier
	// Required: true
	ID *string `json:"id"`

	// The X statistic to track
	// Required: true
	Statx *string `json:"stat_x"`

	// The Y statistic to track (when using DXDY function)
	Staty string `json:"stat_y,omitempty"`

	// The value of interest
	// Required: true
	Value *float64 `json:"value"`
}

// Validate validates this threshold config
func (m *ThresholdConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var thresholdConfigTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["greater","greater_or_equal","less","less_or_equal","equal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thresholdConfigTypeConditionPropEnum = append(thresholdConfigTypeConditionPropEnum, v)
	}
}

const (

	// ThresholdConfigConditionGreater captures enum value "greater"
	ThresholdConfigConditionGreater string = "greater"

	// ThresholdConfigConditionGreaterOrEqual captures enum value "greater_or_equal"
	ThresholdConfigConditionGreaterOrEqual string = "greater_or_equal"

	// ThresholdConfigConditionLess captures enum value "less"
	ThresholdConfigConditionLess string = "less"

	// ThresholdConfigConditionLessOrEqual captures enum value "less_or_equal"
	ThresholdConfigConditionLessOrEqual string = "less_or_equal"

	// ThresholdConfigConditionEqual captures enum value "equal"
	ThresholdConfigConditionEqual string = "equal"
)

// prop value enum
func (m *ThresholdConfig) validateConditionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thresholdConfigTypeConditionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThresholdConfig) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", *m.Condition); err != nil {
		return err
	}

	return nil
}

var thresholdConfigTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dx","dxdt","dxdy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thresholdConfigTypeFunctionPropEnum = append(thresholdConfigTypeFunctionPropEnum, v)
	}
}

const (

	// ThresholdConfigFunctionDx captures enum value "dx"
	ThresholdConfigFunctionDx string = "dx"

	// ThresholdConfigFunctionDxdt captures enum value "dxdt"
	ThresholdConfigFunctionDxdt string = "dxdt"

	// ThresholdConfigFunctionDxdy captures enum value "dxdy"
	ThresholdConfigFunctionDxdy string = "dxdy"
)

// prop value enum
func (m *ThresholdConfig) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thresholdConfigTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThresholdConfig) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdConfig) validateStatx(formats strfmt.Registry) error {

	if err := validate.Required("stat_x", "body", m.Statx); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdConfig) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this threshold config based on context it is used
func (m *ThresholdConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdConfig) UnmarshalBinary(b []byte) error {
	var res ThresholdConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
