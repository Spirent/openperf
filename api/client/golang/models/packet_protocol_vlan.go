// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolVlan Describes a vlan header
//
// swagger:model PacketProtocolVlan
type PacketProtocolVlan struct {

	// vlan drop eligible
	DropEligible bool `json:"drop_eligible,omitempty"`

	// vlan ether type
	// Maximum: 65535
	// Minimum: 0
	EtherType *int32 `json:"ether_type,omitempty"`

	// vlan id
	// Maximum: 4095
	// Minimum: 0
	ID *int32 `json:"id,omitempty"`

	// vlan priority
	// Enum: [network_control internetwork_control voice video critical_app excellent_effort background best_effort]
	Priority string `json:"priority,omitempty"`
}

// Validate validates this packet protocol vlan
func (m *PacketProtocolVlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEtherType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolVlan) validateEtherType(formats strfmt.Registry) error {
	if swag.IsZero(m.EtherType) { // not required
		return nil
	}

	if err := validate.MinimumInt("ether_type", "body", int64(*m.EtherType), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ether_type", "body", int64(*m.EtherType), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolVlan) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("id", "body", int64(*m.ID), 4095, false); err != nil {
		return err
	}

	return nil
}

var packetProtocolVlanTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["network_control","internetwork_control","voice","video","critical_app","excellent_effort","background","best_effort"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetProtocolVlanTypePriorityPropEnum = append(packetProtocolVlanTypePriorityPropEnum, v)
	}
}

const (

	// PacketProtocolVlanPriorityNetworkControl captures enum value "network_control"
	PacketProtocolVlanPriorityNetworkControl string = "network_control"

	// PacketProtocolVlanPriorityInternetworkControl captures enum value "internetwork_control"
	PacketProtocolVlanPriorityInternetworkControl string = "internetwork_control"

	// PacketProtocolVlanPriorityVoice captures enum value "voice"
	PacketProtocolVlanPriorityVoice string = "voice"

	// PacketProtocolVlanPriorityVideo captures enum value "video"
	PacketProtocolVlanPriorityVideo string = "video"

	// PacketProtocolVlanPriorityCriticalApp captures enum value "critical_app"
	PacketProtocolVlanPriorityCriticalApp string = "critical_app"

	// PacketProtocolVlanPriorityExcellentEffort captures enum value "excellent_effort"
	PacketProtocolVlanPriorityExcellentEffort string = "excellent_effort"

	// PacketProtocolVlanPriorityBackground captures enum value "background"
	PacketProtocolVlanPriorityBackground string = "background"

	// PacketProtocolVlanPriorityBestEffort captures enum value "best_effort"
	PacketProtocolVlanPriorityBestEffort string = "best_effort"
)

// prop value enum
func (m *PacketProtocolVlan) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetProtocolVlanTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketProtocolVlan) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol vlan based on context it is used
func (m *PacketProtocolVlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolVlan) UnmarshalBinary(b []byte) error {
	var res PacketProtocolVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
