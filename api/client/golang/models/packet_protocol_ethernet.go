// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolEthernet Describes an Ethernet header
//
// swagger:model PacketProtocolEthernet
type PacketProtocolEthernet struct {

	// Ethernet MAC destination address
	// Pattern: ^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$
	Destination string `json:"destination,omitempty"`

	// Ethernet ether type
	// Maximum: 65535
	// Minimum: 0
	EtherType *int32 `json:"ether_type,omitempty"`

	// Ethernet MAC source address
	// Pattern: ^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$
	Source string `json:"source,omitempty"`
}

// Validate validates this packet protocol ethernet
func (m *PacketProtocolEthernet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtherType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolEthernet) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := validate.Pattern("destination", "body", m.Destination, `^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$`); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolEthernet) validateEtherType(formats strfmt.Registry) error {
	if swag.IsZero(m.EtherType) { // not required
		return nil
	}

	if err := validate.MinimumInt("ether_type", "body", int64(*m.EtherType), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ether_type", "body", int64(*m.EtherType), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolEthernet) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.Pattern("source", "body", m.Source, `^([0-9a-fA-F]{1,2}(.|-|:)){5}[0-9a-fA-F]{1,2}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol ethernet based on context it is used
func (m *PacketProtocolEthernet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolEthernet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolEthernet) UnmarshalBinary(b []byte) error {
	var res PacketProtocolEthernet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
