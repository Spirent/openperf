// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketAnalyzerResult Results collected by a running packet analyzer
//
// swagger:model PacketAnalyzerResult
type PacketAnalyzerResult struct {

	// Indicates whether the result is currently receiving updates
	// Required: true
	Active *bool `json:"active"`

	// Unique analyzer identifier that generated this result
	AnalyzerID string `json:"analyzer_id,omitempty"`

	// flow counters
	// Required: true
	FlowCounters *PacketAnalyzerFlowCounters `json:"flow_counters"`

	// flow digests
	FlowDigests *PacketAnalyzerFlowDigests `json:"flow_digests,omitempty"`

	// List of unique flow ids included in stats. Individual flow
	// statistics may be queried via the `rx-flows` endpoint.
	//
	Flows []string `json:"flows"`

	// Unique analyzer result identifier
	// Required: true
	ID *string `json:"id"`

	// protocol counters
	// Required: true
	ProtocolCounters *PacketAnalyzerProtocolCounters `json:"protocol_counters"`
}

// Validate validates this packet analyzer result
func (m *PacketAnalyzerResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowDigests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolCounters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerResult) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerResult) validateFlowCounters(formats strfmt.Registry) error {

	if err := validate.Required("flow_counters", "body", m.FlowCounters); err != nil {
		return err
	}

	if m.FlowCounters != nil {
		if err := m.FlowCounters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_counters")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerResult) validateFlowDigests(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowDigests) { // not required
		return nil
	}

	if m.FlowDigests != nil {
		if err := m.FlowDigests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_digests")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PacketAnalyzerResult) validateProtocolCounters(formats strfmt.Registry) error {

	if err := validate.Required("protocol_counters", "body", m.ProtocolCounters); err != nil {
		return err
	}

	if m.ProtocolCounters != nil {
		if err := m.ProtocolCounters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_counters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this packet analyzer result based on the context it is used
func (m *PacketAnalyzerResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlowCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlowDigests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAnalyzerResult) contextValidateFlowCounters(ctx context.Context, formats strfmt.Registry) error {

	if m.FlowCounters != nil {
		if err := m.FlowCounters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_counters")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerResult) contextValidateFlowDigests(ctx context.Context, formats strfmt.Registry) error {

	if m.FlowDigests != nil {
		if err := m.FlowDigests.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_digests")
			}
			return err
		}
	}

	return nil
}

func (m *PacketAnalyzerResult) contextValidateProtocolCounters(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtocolCounters != nil {
		if err := m.ProtocolCounters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_counters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAnalyzerResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAnalyzerResult) UnmarshalBinary(b []byte) error {
	var res PacketAnalyzerResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
