// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketGeneratorConfig Packet generator configuration
//
// swagger:model PacketGeneratorConfig
type PacketGeneratorConfig struct {

	// duration
	// Required: true
	Duration *TrafficDuration `json:"duration"`

	// Specifies the total number of flows in all traffic definitions
	// Minimum: 1
	FlowCount int64 `json:"flow_count,omitempty"`

	// load
	// Required: true
	Load *TrafficLoad `json:"load"`

	// Tells the generator how to sequence multiple traffic definitions. Only
	// needed if more than one traffic definition is present.
	//
	// Enum: [round-robin sequential]
	Order string `json:"order,omitempty"`

	// List of protocol counters to update per transmitted packet.
	//
	ProtocolCounters []string `json:"protocol_counters"`

	// List of traffic definitions
	// Required: true
	// Min Items: 1
	Traffic []*TrafficDefinition `json:"traffic"`
}

// Validate validates this packet generator config
func (m *PacketGeneratorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorConfig) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorConfig) validateFlowCount(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("flow_count", "body", m.FlowCount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketGeneratorConfig) validateLoad(formats strfmt.Registry) error {

	if err := validate.Required("load", "body", m.Load); err != nil {
		return err
	}

	if m.Load != nil {
		if err := m.Load.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load")
			}
			return err
		}
	}

	return nil
}

var packetGeneratorConfigTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["round-robin","sequential"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetGeneratorConfigTypeOrderPropEnum = append(packetGeneratorConfigTypeOrderPropEnum, v)
	}
}

const (

	// PacketGeneratorConfigOrderRoundDashRobin captures enum value "round-robin"
	PacketGeneratorConfigOrderRoundDashRobin string = "round-robin"

	// PacketGeneratorConfigOrderSequential captures enum value "sequential"
	PacketGeneratorConfigOrderSequential string = "sequential"
)

// prop value enum
func (m *PacketGeneratorConfig) validateOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetGeneratorConfigTypeOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketGeneratorConfig) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

var packetGeneratorConfigProtocolCountersItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ethernet","ip","transport","tunnel","inner_ethernet","inner_ip","inner_transport"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetGeneratorConfigProtocolCountersItemsEnum = append(packetGeneratorConfigProtocolCountersItemsEnum, v)
	}
}

func (m *PacketGeneratorConfig) validateProtocolCountersItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetGeneratorConfigProtocolCountersItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketGeneratorConfig) validateProtocolCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolCounters) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtocolCounters); i++ {

		// value enum
		if err := m.validateProtocolCountersItemsEnum("protocol_counters"+"."+strconv.Itoa(i), "body", m.ProtocolCounters[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PacketGeneratorConfig) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	iTrafficSize := int64(len(m.Traffic))

	if err := validate.MinItems("traffic", "body", iTrafficSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Traffic); i++ {
		if swag.IsZero(m.Traffic[i]) { // not required
			continue
		}

		if m.Traffic[i] != nil {
			if err := m.Traffic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traffic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this packet generator config based on the context it is used
func (m *PacketGeneratorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoad(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraffic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorConfig) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if m.Duration != nil {
		if err := m.Duration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorConfig) contextValidateLoad(ctx context.Context, formats strfmt.Registry) error {

	if m.Load != nil {
		if err := m.Load.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorConfig) contextValidateTraffic(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Traffic); i++ {

		if m.Traffic[i] != nil {
			if err := m.Traffic[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traffic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketGeneratorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketGeneratorConfig) UnmarshalBinary(b []byte) error {
	var res PacketGeneratorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
