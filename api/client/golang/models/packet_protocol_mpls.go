// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolMpls Describes a MPLS header
//
// swagger:model PacketProtocolMpls
type PacketProtocolMpls struct {

	// MPLS bottom of stack
	BottomOfStack bool `json:"bottom_of_stack,omitempty"`

	// MPLS label
	// Maximum: 1.048575e+06
	// Minimum: 0
	Label *int32 `json:"label,omitempty"`

	// MPLS traffic class
	// Maximum: 7
	// Minimum: 0
	TrafficClass *int32 `json:"traffic_class,omitempty"`

	// MPLS ttl
	// Maximum: 255
	// Minimum: 0
	TTL *int32 `json:"ttl,omitempty"`
}

// Validate validates this packet protocol mpls
func (m *PacketProtocolMpls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolMpls) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MinimumInt("label", "body", int64(*m.Label), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("label", "body", int64(*m.Label), 1.048575e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolMpls) validateTrafficClass(formats strfmt.Registry) error {
	if swag.IsZero(m.TrafficClass) { // not required
		return nil
	}

	if err := validate.MinimumInt("traffic_class", "body", int64(*m.TrafficClass), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("traffic_class", "body", int64(*m.TrafficClass), 7, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolMpls) validateTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl", "body", int64(*m.TTL), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl", "body", int64(*m.TTL), 255, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol mpls based on context it is used
func (m *PacketProtocolMpls) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolMpls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolMpls) UnmarshalBinary(b []byte) error {
	var res PacketProtocolMpls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
