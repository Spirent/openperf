// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TvlpResult TVLP result objects contain an array of generator results for each TVLP configuration step.
//
// swagger:model TvlpResult
type TvlpResult struct {

	// block
	Block []*BlockGeneratorResult `json:"block"`

	// cpu
	CPU []*CPUGeneratorResult `json:"cpu"`

	// Unique TVLP result identifier
	// Required: true
	ID *string `json:"id"`

	// memory
	Memory []*MemoryGeneratorResult `json:"memory"`

	// network
	Network []*NetworkGeneratorResult `json:"network"`

	// packet
	Packet []*PacketGeneratorResult `json:"packet"`

	// TVLP configuration identifier that generated this result
	// Required: true
	TvlpID *string `json:"tvlp_id"`
}

// Validate validates this tvlp result
func (m *TvlpResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTvlpID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpResult) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Block) { // not required
		return nil
	}

	for i := 0; i < len(m.Block); i++ {
		if swag.IsZero(m.Block[i]) { // not required
			continue
		}

		if m.Block[i] != nil {
			if err := m.Block[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	for i := 0; i < len(m.CPU); i++ {
		if swag.IsZero(m.CPU[i]) { // not required
			continue
		}

		if m.CPU[i] != nil {
			if err := m.CPU[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpu" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TvlpResult) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	for i := 0; i < len(m.Memory); i++ {
		if swag.IsZero(m.Memory[i]) { // not required
			continue
		}

		if m.Memory[i] != nil {
			if err := m.Memory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	for i := 0; i < len(m.Network); i++ {
		if swag.IsZero(m.Network[i]) { // not required
			continue
		}

		if m.Network[i] != nil {
			if err := m.Network[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) validatePacket(formats strfmt.Registry) error {
	if swag.IsZero(m.Packet) { // not required
		return nil
	}

	for i := 0; i < len(m.Packet); i++ {
		if swag.IsZero(m.Packet[i]) { // not required
			continue
		}

		if m.Packet[i] != nil {
			if err := m.Packet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) validateTvlpID(formats strfmt.Registry) error {

	if err := validate.Required("tvlp_id", "body", m.TvlpID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp result based on the context it is used
func (m *TvlpResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePacket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpResult) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Block); i++ {

		if m.Block[i] != nil {
			if err := m.Block[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CPU); i++ {

		if m.CPU[i] != nil {
			if err := m.CPU[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpu" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Memory); i++ {

		if m.Memory[i] != nil {
			if err := m.Memory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Network); i++ {

		if m.Network[i] != nil {
			if err := m.Network[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TvlpResult) contextValidatePacket(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packet); i++ {

		if m.Packet[i] != nil {
			if err := m.Packet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpResult) UnmarshalBinary(b []byte) error {
	var res TvlpResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
