// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModuleVersion Module version information
//
// swagger:model ModuleVersion
type ModuleVersion struct {

	// Module build date
	// Read Only: true
	// Format: date-time
	BuildDate strfmt.DateTime `json:"build_date,omitempty"`

	// Module build number
	// Read Only: true
	BuildNumber string `json:"build_number,omitempty"`

	// Module version control revision
	// Read Only: true
	SourceCommit string `json:"source_commit,omitempty"`

	// Module version number
	// Read Only: true
	Version int32 `json:"version,omitempty"`
}

// Validate validates this module version
func (m *ModuleVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleVersion) validateBuildDate(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildDate) { // not required
		return nil
	}

	if err := validate.FormatOf("build_date", "body", "date-time", m.BuildDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this module version based on the context it is used
func (m *ModuleVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleVersion) contextValidateBuildDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "build_date", "body", strfmt.DateTime(m.BuildDate)); err != nil {
		return err
	}

	return nil
}

func (m *ModuleVersion) contextValidateBuildNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "build_number", "body", string(m.BuildNumber)); err != nil {
		return err
	}

	return nil
}

func (m *ModuleVersion) contextValidateSourceCommit(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "source_commit", "body", string(m.SourceCommit)); err != nil {
		return err
	}

	return nil
}

func (m *ModuleVersion) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleVersion) UnmarshalBinary(b []byte) error {
	var res ModuleVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
