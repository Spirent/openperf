// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketTransportProtocolCounters Layer 4 protocol counters
//
// swagger:model PacketTransportProtocolCounters
type PacketTransportProtocolCounters struct {

	// Number of fragmented packets
	// Required: true
	// Minimum: 0
	Fragmented *int64 `json:"fragmented"`

	// Number of Internet Control Message Protocol packets
	// Required: true
	// Minimum: 0
	Icmp *int64 `json:"icmp"`

	// Number of Internet Group Management Protocol packets
	// Required: true
	// Minimum: 0
	Igmp *int64 `json:"igmp"`

	// Number of non-fragmented packets
	// Required: true
	// Minimum: 0
	NonFragmented *int64 `json:"non_fragmented"`

	// Number of Stream Control Transmission Protocol packets
	// Required: true
	// Minimum: 0
	Sctp *int64 `json:"sctp"`

	// Number of Transmission Control Protocol packets
	// Required: true
	// Minimum: 0
	TCP *int64 `json:"tcp"`

	// Number of User Data Protocol packets
	// Required: true
	// Minimum: 0
	UDP *int64 `json:"udp"`
}

// Validate validates this packet transport protocol counters
func (m *PacketTransportProtocolCounters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFragmented(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonFragmented(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSctp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketTransportProtocolCounters) validateFragmented(formats strfmt.Registry) error {

	if err := validate.Required("fragmented", "body", m.Fragmented); err != nil {
		return err
	}

	if err := validate.MinimumInt("fragmented", "body", *m.Fragmented, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateIcmp(formats strfmt.Registry) error {

	if err := validate.Required("icmp", "body", m.Icmp); err != nil {
		return err
	}

	if err := validate.MinimumInt("icmp", "body", *m.Icmp, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateIgmp(formats strfmt.Registry) error {

	if err := validate.Required("igmp", "body", m.Igmp); err != nil {
		return err
	}

	if err := validate.MinimumInt("igmp", "body", *m.Igmp, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateNonFragmented(formats strfmt.Registry) error {

	if err := validate.Required("non_fragmented", "body", m.NonFragmented); err != nil {
		return err
	}

	if err := validate.MinimumInt("non_fragmented", "body", *m.NonFragmented, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateSctp(formats strfmt.Registry) error {

	if err := validate.Required("sctp", "body", m.Sctp); err != nil {
		return err
	}

	if err := validate.MinimumInt("sctp", "body", *m.Sctp, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateTCP(formats strfmt.Registry) error {

	if err := validate.Required("tcp", "body", m.TCP); err != nil {
		return err
	}

	if err := validate.MinimumInt("tcp", "body", *m.TCP, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketTransportProtocolCounters) validateUDP(formats strfmt.Registry) error {

	if err := validate.Required("udp", "body", m.UDP); err != nil {
		return err
	}

	if err := validate.MinimumInt("udp", "body", *m.UDP, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet transport protocol counters based on context it is used
func (m *PacketTransportProtocolCounters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketTransportProtocolCounters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketTransportProtocolCounters) UnmarshalBinary(b []byte) error {
	var res PacketTransportProtocolCounters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
