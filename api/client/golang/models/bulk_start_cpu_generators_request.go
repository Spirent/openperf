// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkStartCPUGeneratorsRequest Parameters for the bulk start operation
//
// swagger:model BulkStartCpuGeneratorsRequest
type BulkStartCPUGeneratorsRequest struct {

	// dynamic results
	DynamicResults *DynamicResultsConfig `json:"dynamic_results,omitempty"`

	// List of CPU generator identifiers
	// Required: true
	// Min Items: 1
	Ids []string `json:"ids"`
}

// Validate validates this bulk start Cpu generators request
func (m *BulkStartCPUGeneratorsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkStartCPUGeneratorsRequest) validateDynamicResults(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicResults) { // not required
		return nil
	}

	if m.DynamicResults != nil {
		if err := m.DynamicResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamic_results")
			}
			return err
		}
	}

	return nil
}

func (m *BulkStartCPUGeneratorsRequest) validateIds(formats strfmt.Registry) error {

	if err := validate.Required("ids", "body", m.Ids); err != nil {
		return err
	}

	iIdsSize := int64(len(m.Ids))

	if err := validate.MinItems("ids", "body", iIdsSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bulk start Cpu generators request based on the context it is used
func (m *BulkStartCPUGeneratorsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDynamicResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkStartCPUGeneratorsRequest) contextValidateDynamicResults(ctx context.Context, formats strfmt.Registry) error {

	if m.DynamicResults != nil {
		if err := m.DynamicResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamic_results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkStartCPUGeneratorsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkStartCPUGeneratorsRequest) UnmarshalBinary(b []byte) error {
	var res BulkStartCPUGeneratorsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
