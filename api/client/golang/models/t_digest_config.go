// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TDigestConfig T-Digest value
//
// swagger:model TDigestConfig
type TDigestConfig struct {

	// The compression factor of T-Digest
	// Required: true
	Compression *int64 `json:"compression"`

	// The function to apply to the statistic before evaluating
	// Required: true
	// Enum: [dx dxdt dxdy]
	Function *string `json:"function"`

	// T-Digest configuration unique identifier
	// Required: true
	ID *string `json:"id"`

	// The X statistic to track
	// Required: true
	Statx *string `json:"stat_x"`

	// The Y statistic to track (when using DXDY function)
	Staty string `json:"stat_y,omitempty"`
}

// Validate validates this t digest config
func (m *TDigestConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TDigestConfig) validateCompression(formats strfmt.Registry) error {

	if err := validate.Required("compression", "body", m.Compression); err != nil {
		return err
	}

	return nil
}

var tDigestConfigTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dx","dxdt","dxdy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tDigestConfigTypeFunctionPropEnum = append(tDigestConfigTypeFunctionPropEnum, v)
	}
}

const (

	// TDigestConfigFunctionDx captures enum value "dx"
	TDigestConfigFunctionDx string = "dx"

	// TDigestConfigFunctionDxdt captures enum value "dxdt"
	TDigestConfigFunctionDxdt string = "dxdt"

	// TDigestConfigFunctionDxdy captures enum value "dxdy"
	TDigestConfigFunctionDxdy string = "dxdy"
)

// prop value enum
func (m *TDigestConfig) validateFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tDigestConfigTypeFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TDigestConfig) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *TDigestConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TDigestConfig) validateStatx(formats strfmt.Registry) error {

	if err := validate.Required("stat_x", "body", m.Statx); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this t digest config based on context it is used
func (m *TDigestConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TDigestConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TDigestConfig) UnmarshalBinary(b []byte) error {
	var res TDigestConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
