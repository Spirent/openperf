// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketGenerator Packet generator
//
// swagger:model PacketGenerator
type PacketGenerator struct {

	// Indicates whether this object is currently generating packets or not.
	//
	// Required: true
	Active *bool `json:"active"`

	// config
	// Required: true
	Config *PacketGeneratorConfig `json:"config"`

	// Unique generator identifier
	// Required: true
	ID *string `json:"id"`

	// Current state of MAC learning. For generators targeted to interfaces
	// this must be "resolved" else generator won't start.
	//
	// Required: true
	// Enum: [unsupported unresolved resolving resolved timed_out]
	Learning *string `json:"learning"`

	// Specifies the unique target for packets from this generator. This
	// id may refer to either a port or an interface id.
	//
	// Required: true
	TargetID *string `json:"target_id"`
}

// Validate validates this packet generator
func (m *PacketGenerator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLearning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGenerator) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *PacketGenerator) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGenerator) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var packetGeneratorTypeLearningPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unsupported","unresolved","resolving","resolved","timed_out"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetGeneratorTypeLearningPropEnum = append(packetGeneratorTypeLearningPropEnum, v)
	}
}

const (

	// PacketGeneratorLearningUnsupported captures enum value "unsupported"
	PacketGeneratorLearningUnsupported string = "unsupported"

	// PacketGeneratorLearningUnresolved captures enum value "unresolved"
	PacketGeneratorLearningUnresolved string = "unresolved"

	// PacketGeneratorLearningResolving captures enum value "resolving"
	PacketGeneratorLearningResolving string = "resolving"

	// PacketGeneratorLearningResolved captures enum value "resolved"
	PacketGeneratorLearningResolved string = "resolved"

	// PacketGeneratorLearningTimedOut captures enum value "timed_out"
	PacketGeneratorLearningTimedOut string = "timed_out"
)

// prop value enum
func (m *PacketGenerator) validateLearningEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetGeneratorTypeLearningPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketGenerator) validateLearning(formats strfmt.Registry) error {

	if err := validate.Required("learning", "body", m.Learning); err != nil {
		return err
	}

	// value enum
	if err := m.validateLearningEnum("learning", "body", *m.Learning); err != nil {
		return err
	}

	return nil
}

func (m *PacketGenerator) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packet generator based on the context it is used
func (m *PacketGenerator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGenerator) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketGenerator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketGenerator) UnmarshalBinary(b []byte) error {
	var res PacketGenerator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
