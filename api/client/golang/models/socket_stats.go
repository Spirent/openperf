// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SocketStats Socket statistics
//
// swagger:model SocketStats
type SocketStats struct {

	// Unique socket statistics identifier
	ID string `json:"id,omitempty"`

	// The interface index the socket is bound to
	IfIndex int32 `json:"if_index,omitempty"`

	// The local IP address
	LocalIPAddress string `json:"local_ip_address,omitempty"`

	// The local port number
	LocalPort int32 `json:"local_port,omitempty"`

	// Process ID which created the socket
	Pid int32 `json:"pid,omitempty"`

	// The socket protocol type
	// Enum: [ip tcp udp raw packet]
	Protocol string `json:"protocol,omitempty"`

	// The protocol ID used for raw and packet sockets
	ProtocolID int32 `json:"protocol_id,omitempty"`

	// The remote IP address
	RemoteIPAddress string `json:"remote_ip_address,omitempty"`

	// The remote port number
	RemotePort int32 `json:"remote_port,omitempty"`

	// Number of bytes in the socket receive queue
	RxqBytes int64 `json:"rxq_bytes,omitempty"`

	// The number of packets in the protocol send queue
	SendQueueLength int32 `json:"send_queue_length,omitempty"`

	// The socket ID (used by server)
	Sid int32 `json:"sid,omitempty"`

	// The socket state
	State string `json:"state,omitempty"`

	// Number of bytes in the socket transmit queue
	TxqBytes int64 `json:"txq_bytes,omitempty"`
}

// Validate validates this socket stats
func (m *SocketStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var socketStatsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ip","tcp","udp","raw","packet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		socketStatsTypeProtocolPropEnum = append(socketStatsTypeProtocolPropEnum, v)
	}
}

const (

	// SocketStatsProtocolIP captures enum value "ip"
	SocketStatsProtocolIP string = "ip"

	// SocketStatsProtocolTCP captures enum value "tcp"
	SocketStatsProtocolTCP string = "tcp"

	// SocketStatsProtocolUDP captures enum value "udp"
	SocketStatsProtocolUDP string = "udp"

	// SocketStatsProtocolRaw captures enum value "raw"
	SocketStatsProtocolRaw string = "raw"

	// SocketStatsProtocolPacket captures enum value "packet"
	SocketStatsProtocolPacket string = "packet"
)

// prop value enum
func (m *SocketStats) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, socketStatsTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SocketStats) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this socket stats based on context it is used
func (m *SocketStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SocketStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SocketStats) UnmarshalBinary(b []byte) error {
	var res SocketStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
