// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PacketGeneratorProtocolCounters Packet generator protocol statistics
//
// swagger:model PacketGeneratorProtocolCounters
type PacketGeneratorProtocolCounters struct {

	// ethernet
	Ethernet *PacketEthernetProtocolCounters `json:"ethernet,omitempty"`

	// inner ethernet
	InnerEthernet *PacketInnerEthernetProtocolCounters `json:"inner_ethernet,omitempty"`

	// inner ip
	InnerIP *PacketInnerIPProtocolCounters `json:"inner_ip,omitempty"`

	// inner transport
	InnerTransport *PacketInnerTransportProtocolCounters `json:"inner_transport,omitempty"`

	// ip
	IP *PacketIPProtocolCounters `json:"ip,omitempty"`

	// transport
	Transport *PacketTransportProtocolCounters `json:"transport,omitempty"`

	// tunnel
	Tunnel *PacketTunnelProtocolCounters `json:"tunnel,omitempty"`
}

// Validate validates this packet generator protocol counters
func (m *PacketGeneratorProtocolCounters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthernet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInnerEthernet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInnerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInnerTransport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorProtocolCounters) validateEthernet(formats strfmt.Registry) error {
	if swag.IsZero(m.Ethernet) { // not required
		return nil
	}

	if m.Ethernet != nil {
		if err := m.Ethernet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateInnerEthernet(formats strfmt.Registry) error {
	if swag.IsZero(m.InnerEthernet) { // not required
		return nil
	}

	if m.InnerEthernet != nil {
		if err := m.InnerEthernet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateInnerIP(formats strfmt.Registry) error {
	if swag.IsZero(m.InnerIP) { // not required
		return nil
	}

	if m.InnerIP != nil {
		if err := m.InnerIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_ip")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateInnerTransport(formats strfmt.Registry) error {
	if swag.IsZero(m.InnerTransport) { // not required
		return nil
	}

	if m.InnerTransport != nil {
		if err := m.InnerTransport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_transport")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if m.IP != nil {
		if err := m.IP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ip")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateTransport(formats strfmt.Registry) error {
	if swag.IsZero(m.Transport) { // not required
		return nil
	}

	if m.Transport != nil {
		if err := m.Transport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transport")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) validateTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.Tunnel) { // not required
		return nil
	}

	if m.Tunnel != nil {
		if err := m.Tunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this packet generator protocol counters based on the context it is used
func (m *PacketGeneratorProtocolCounters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEthernet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInnerEthernet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInnerIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInnerTransport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateEthernet(ctx context.Context, formats strfmt.Registry) error {

	if m.Ethernet != nil {
		if err := m.Ethernet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateInnerEthernet(ctx context.Context, formats strfmt.Registry) error {

	if m.InnerEthernet != nil {
		if err := m.InnerEthernet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_ethernet")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateInnerIP(ctx context.Context, formats strfmt.Registry) error {

	if m.InnerIP != nil {
		if err := m.InnerIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_ip")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateInnerTransport(ctx context.Context, formats strfmt.Registry) error {

	if m.InnerTransport != nil {
		if err := m.InnerTransport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inner_transport")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateIP(ctx context.Context, formats strfmt.Registry) error {

	if m.IP != nil {
		if err := m.IP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ip")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateTransport(ctx context.Context, formats strfmt.Registry) error {

	if m.Transport != nil {
		if err := m.Transport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transport")
			}
			return err
		}
	}

	return nil
}

func (m *PacketGeneratorProtocolCounters) contextValidateTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.Tunnel != nil {
		if err := m.Tunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketGeneratorProtocolCounters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketGeneratorProtocolCounters) UnmarshalBinary(b []byte) error {
	var res PacketGeneratorProtocolCounters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
