// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkServer Network server
//
// swagger:model NetworkServer
type NetworkServer struct {

	// Unique network server identifier
	// Required: true
	ID *string `json:"id"`

	// Bind server socket to a particular device, specified as interface name (required for dpdk driver)
	Interface string `json:"interface,omitempty"`

	// UDP/TCP port on which to listen for client connections
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Port *int64 `json:"port"`

	// Protocol which is used to establish client connections
	// Required: true
	// Enum: [tcp udp]
	Protocol *string `json:"protocol"`

	// stats
	// Required: true
	Stats *NetworkServerStats `json:"stats"`
}

// Validate validates this network server
func (m *NetworkServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkServer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServer) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

var networkServerTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkServerTypeProtocolPropEnum = append(networkServerTypeProtocolPropEnum, v)
	}
}

const (

	// NetworkServerProtocolTCP captures enum value "tcp"
	NetworkServerProtocolTCP string = "tcp"

	// NetworkServerProtocolUDP captures enum value "udp"
	NetworkServerProtocolUDP string = "udp"
)

// prop value enum
func (m *NetworkServer) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkServerTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkServer) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *NetworkServer) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network server based on the context it is used
func (m *NetworkServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkServer) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkServer) UnmarshalBinary(b []byte) error {
	var res NetworkServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
