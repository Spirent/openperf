// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TvlpProfile TVLP profile
//
// swagger:model TvlpProfile
type TvlpProfile struct {

	// block
	Block *TvlpProfileBlock `json:"block,omitempty"`

	// cpu
	CPU *TvlpProfileCPU `json:"cpu,omitempty"`

	// memory
	Memory *TvlpProfileMemory `json:"memory,omitempty"`

	// network
	Network *TvlpProfileNetwork `json:"network,omitempty"`

	// packet
	Packet *TvlpProfilePacket `json:"packet,omitempty"`
}

// Validate validates this tvlp profile
func (m *TvlpProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfile) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Block) { // not required
		return nil
	}

	if m.Block != nil {
		if err := m.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) validatePacket(formats strfmt.Registry) error {
	if swag.IsZero(m.Packet) { // not required
		return nil
	}

	if m.Packet != nil {
		if err := m.Packet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tvlp profile based on the context it is used
func (m *TvlpProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePacket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfile) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Block != nil {
		if err := m.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {
		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfile) contextValidatePacket(ctx context.Context, formats strfmt.Registry) error {

	if m.Packet != nil {
		if err := m.Packet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfile) UnmarshalBinary(b []byte) error {
	var res TvlpProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileBlock tvlp profile block
//
// swagger:model TvlpProfileBlock
type TvlpProfileBlock struct {

	// series
	// Required: true
	Series []*TvlpProfileBlockSeriesItems0 `json:"series"`
}

// Validate validates this tvlp profile block
func (m *TvlpProfileBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileBlock) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("block"+"."+"series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tvlp profile block based on the context it is used
func (m *TvlpProfileBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileBlock) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileBlock) UnmarshalBinary(b []byte) error {
	var res TvlpProfileBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileBlockSeriesItems0 TVLP Profile for Block generators configuration
//
// swagger:model TvlpProfileBlockSeriesItems0
type TvlpProfileBlockSeriesItems0 struct {

	// config
	// Required: true
	Config *BlockGeneratorConfig `json:"config"`

	// Length of a current operation in ns
	// Required: true
	Length *int64 `json:"length"`

	// Unique device or file identifier
	// Required: true
	ResourceID *string `json:"resource_id"`
}

// Validate validates this tvlp profile block series items0
func (m *TvlpProfileBlockSeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileBlockSeriesItems0) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfileBlockSeriesItems0) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *TvlpProfileBlockSeriesItems0) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp profile block series items0 based on the context it is used
func (m *TvlpProfileBlockSeriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileBlockSeriesItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileBlockSeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileBlockSeriesItems0) UnmarshalBinary(b []byte) error {
	var res TvlpProfileBlockSeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileCPU tvlp profile CPU
//
// swagger:model TvlpProfileCPU
type TvlpProfileCPU struct {

	// series
	// Required: true
	Series []*TvlpProfileCPUSeriesItems0 `json:"series"`
}

// Validate validates this tvlp profile CPU
func (m *TvlpProfileCPU) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileCPU) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("cpu"+"."+"series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpu" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tvlp profile CPU based on the context it is used
func (m *TvlpProfileCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileCPU) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpu" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileCPU) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileCPU) UnmarshalBinary(b []byte) error {
	var res TvlpProfileCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileCPUSeriesItems0 TVLP Profile for CPU generators configuration
//
// swagger:model TvlpProfileCPUSeriesItems0
type TvlpProfileCPUSeriesItems0 struct {

	// config
	// Required: true
	Config *CPUGeneratorConfig `json:"config"`

	// Length of a current operation in ns
	// Required: true
	Length *int64 `json:"length"`
}

// Validate validates this tvlp profile CPU series items0
func (m *TvlpProfileCPUSeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileCPUSeriesItems0) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfileCPUSeriesItems0) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp profile CPU series items0 based on the context it is used
func (m *TvlpProfileCPUSeriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileCPUSeriesItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileCPUSeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileCPUSeriesItems0) UnmarshalBinary(b []byte) error {
	var res TvlpProfileCPUSeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileMemory tvlp profile memory
//
// swagger:model TvlpProfileMemory
type TvlpProfileMemory struct {

	// series
	// Required: true
	Series []*TvlpProfileMemorySeriesItems0 `json:"series"`
}

// Validate validates this tvlp profile memory
func (m *TvlpProfileMemory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileMemory) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("memory"+"."+"series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memory" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tvlp profile memory based on the context it is used
func (m *TvlpProfileMemory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileMemory) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memory" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileMemory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileMemory) UnmarshalBinary(b []byte) error {
	var res TvlpProfileMemory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileMemorySeriesItems0 TVLP Profile for Memory generators configuration
//
// swagger:model TvlpProfileMemorySeriesItems0
type TvlpProfileMemorySeriesItems0 struct {

	// config
	// Required: true
	Config *MemoryGeneratorConfig `json:"config"`

	// Length of the current operation in ns
	// Required: true
	Length *int64 `json:"length"`
}

// Validate validates this tvlp profile memory series items0
func (m *TvlpProfileMemorySeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileMemorySeriesItems0) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfileMemorySeriesItems0) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp profile memory series items0 based on the context it is used
func (m *TvlpProfileMemorySeriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileMemorySeriesItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileMemorySeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileMemorySeriesItems0) UnmarshalBinary(b []byte) error {
	var res TvlpProfileMemorySeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileNetwork tvlp profile network
//
// swagger:model TvlpProfileNetwork
type TvlpProfileNetwork struct {

	// series
	// Required: true
	Series []*TvlpProfileNetworkSeriesItems0 `json:"series"`
}

// Validate validates this tvlp profile network
func (m *TvlpProfileNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileNetwork) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("network"+"."+"series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tvlp profile network based on the context it is used
func (m *TvlpProfileNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileNetwork) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileNetwork) UnmarshalBinary(b []byte) error {
	var res TvlpProfileNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfileNetworkSeriesItems0 TVLP Profile for Network generators configuration
//
// swagger:model TvlpProfileNetworkSeriesItems0
type TvlpProfileNetworkSeriesItems0 struct {

	// config
	// Required: true
	Config *NetworkGeneratorConfig `json:"config"`

	// Length of the current operation in ns
	// Required: true
	Length *int64 `json:"length"`
}

// Validate validates this tvlp profile network series items0
func (m *TvlpProfileNetworkSeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileNetworkSeriesItems0) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfileNetworkSeriesItems0) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp profile network series items0 based on the context it is used
func (m *TvlpProfileNetworkSeriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfileNetworkSeriesItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfileNetworkSeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfileNetworkSeriesItems0) UnmarshalBinary(b []byte) error {
	var res TvlpProfileNetworkSeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfilePacket tvlp profile packet
//
// swagger:model TvlpProfilePacket
type TvlpProfilePacket struct {

	// series
	// Required: true
	Series []*TvlpProfilePacketSeriesItems0 `json:"series"`
}

// Validate validates this tvlp profile packet
func (m *TvlpProfilePacket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfilePacket) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("packet"+"."+"series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packet" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tvlp profile packet based on the context it is used
func (m *TvlpProfilePacket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfilePacket) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packet" + "." + "series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfilePacket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfilePacket) UnmarshalBinary(b []byte) error {
	var res TvlpProfilePacket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TvlpProfilePacketSeriesItems0 TVLP Profile for Packet generators configuration
//
// swagger:model TvlpProfilePacketSeriesItems0
type TvlpProfilePacketSeriesItems0 struct {

	// config
	// Required: true
	Config *PacketGeneratorConfig `json:"config"`

	// Length of a current operation in ns
	// Required: true
	Length *int64 `json:"length"`

	// Specifies the unique target for packets from this generator. This
	// id may refer to either a port or an interface id.
	//
	// Required: true
	TargetID *string `json:"target_id"`
}

// Validate validates this tvlp profile packet series items0
func (m *TvlpProfilePacketSeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfilePacketSeriesItems0) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *TvlpProfilePacketSeriesItems0) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *TvlpProfilePacketSeriesItems0) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tvlp profile packet series items0 based on the context it is used
func (m *TvlpProfilePacketSeriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TvlpProfilePacketSeriesItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TvlpProfilePacketSeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TvlpProfilePacketSeriesItems0) UnmarshalBinary(b []byte) error {
	var res TvlpProfilePacketSeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
