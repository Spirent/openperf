// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolTCP Describes a tcp header
//
// swagger:model PacketProtocolTcp
type PacketProtocolTCP struct {

	// tcp ack
	// Maximum: 4.294967295e+09
	// Minimum: 0
	Ack *int64 `json:"ack,omitempty"`

	// tcp checksum
	// Maximum: 65535
	// Minimum: 0
	Checksum *int32 `json:"checksum,omitempty"`

	// tcp data offset
	// Maximum: 60
	// Minimum: 0
	// Multiple Of: 4
	DataOffset *int32 `json:"data_offset,omitempty"`

	// tcp destination
	// Maximum: 65535
	// Minimum: 0
	Destination *int32 `json:"destination,omitempty"`

	// tcp flags
	Flags []string `json:"flags"`

	// tcp reserved
	// Maximum: 7
	// Minimum: 0
	Reserved *int32 `json:"reserved,omitempty"`

	// tcp sequence
	// Maximum: 4.294967295e+09
	// Minimum: 0
	Sequence *int64 `json:"sequence,omitempty"`

	// tcp source
	// Maximum: 65535
	// Minimum: 0
	Source *int32 `json:"source,omitempty"`

	// tcp urgent pointer
	// Maximum: 65535
	// Minimum: 0
	UrgentPointer *int32 `json:"urgent_pointer,omitempty"`

	// tcp window
	// Maximum: 65535
	// Minimum: 0
	Window *int32 `json:"window,omitempty"`
}

// Validate validates this packet protocol Tcp
func (m *PacketProtocolTCP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrgentPointer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolTCP) validateAck(formats strfmt.Registry) error {
	if swag.IsZero(m.Ack) { // not required
		return nil
	}

	if err := validate.MinimumInt("ack", "body", *m.Ack, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ack", "body", *m.Ack, 4.294967295e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateChecksum(formats strfmt.Registry) error {
	if swag.IsZero(m.Checksum) { // not required
		return nil
	}

	if err := validate.MinimumInt("checksum", "body", int64(*m.Checksum), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("checksum", "body", int64(*m.Checksum), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateDataOffset(formats strfmt.Registry) error {
	if swag.IsZero(m.DataOffset) { // not required
		return nil
	}

	if err := validate.MinimumInt("data_offset", "body", int64(*m.DataOffset), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("data_offset", "body", int64(*m.DataOffset), 60, false); err != nil {
		return err
	}

	if err := validate.MultipleOfInt("data_offset", "body", int64(*m.DataOffset), 4); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination", "body", int64(*m.Destination), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination", "body", int64(*m.Destination), 65535, false); err != nil {
		return err
	}

	return nil
}

var packetProtocolTcpFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ns","cwr","ece","urg","ack","psh","rst","syn","fin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetProtocolTcpFlagsItemsEnum = append(packetProtocolTcpFlagsItemsEnum, v)
	}
}

func (m *PacketProtocolTCP) validateFlagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetProtocolTcpFlagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketProtocolTCP) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	for i := 0; i < len(m.Flags); i++ {

		// value enum
		if err := m.validateFlagsItemsEnum("flags"+"."+strconv.Itoa(i), "body", m.Flags[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PacketProtocolTCP) validateReserved(formats strfmt.Registry) error {
	if swag.IsZero(m.Reserved) { // not required
		return nil
	}

	if err := validate.MinimumInt("reserved", "body", int64(*m.Reserved), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reserved", "body", int64(*m.Reserved), 7, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if err := validate.MinimumInt("sequence", "body", *m.Sequence, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sequence", "body", *m.Sequence, 4.294967295e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.MinimumInt("source", "body", int64(*m.Source), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source", "body", int64(*m.Source), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateUrgentPointer(formats strfmt.Registry) error {
	if swag.IsZero(m.UrgentPointer) { // not required
		return nil
	}

	if err := validate.MinimumInt("urgent_pointer", "body", int64(*m.UrgentPointer), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("urgent_pointer", "body", int64(*m.UrgentPointer), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PacketProtocolTCP) validateWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.Window) { // not required
		return nil
	}

	if err := validate.MinimumInt("window", "body", int64(*m.Window), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("window", "body", int64(*m.Window), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol Tcp based on context it is used
func (m *PacketProtocolTCP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolTCP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolTCP) UnmarshalBinary(b []byte) error {
	var res PacketProtocolTCP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
