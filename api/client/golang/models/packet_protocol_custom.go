// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketProtocolCustom Defines an arbitrary sequence of data
//
// swagger:model PacketProtocolCustom
type PacketProtocolCustom struct {

	// Base64 encoded binary packet data
	// Required: true
	Data *string `json:"data"`

	// Indicates which protocol layer this protocol belongs to.
	//
	// Required: true
	// Enum: [ethernet ip protocol payload]
	Layer *string `json:"layer"`

	// Indicates the value to use for a preceding header that
	// supports a next header type or protocol field. For example,
	// if a custom protocol came immediately after an Ethernet
	// header, then this value would be written to the Ethernet
	// header\'s ether_type field.
	//
	ProtocolID int64 `json:"protocol_id,omitempty"`
}

// Validate validates this packet protocol custom
func (m *PacketProtocolCustom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProtocolCustom) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

var packetProtocolCustomTypeLayerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ethernet","ip","protocol","payload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetProtocolCustomTypeLayerPropEnum = append(packetProtocolCustomTypeLayerPropEnum, v)
	}
}

const (

	// PacketProtocolCustomLayerEthernet captures enum value "ethernet"
	PacketProtocolCustomLayerEthernet string = "ethernet"

	// PacketProtocolCustomLayerIP captures enum value "ip"
	PacketProtocolCustomLayerIP string = "ip"

	// PacketProtocolCustomLayerProtocol captures enum value "protocol"
	PacketProtocolCustomLayerProtocol string = "protocol"

	// PacketProtocolCustomLayerPayload captures enum value "payload"
	PacketProtocolCustomLayerPayload string = "payload"
)

// prop value enum
func (m *PacketProtocolCustom) validateLayerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packetProtocolCustomTypeLayerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PacketProtocolCustom) validateLayer(formats strfmt.Registry) error {

	if err := validate.Required("layer", "body", m.Layer); err != nil {
		return err
	}

	// value enum
	if err := m.validateLayerEnum("layer", "body", *m.Layer); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packet protocol custom based on context it is used
func (m *PacketProtocolCustom) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PacketProtocolCustom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketProtocolCustom) UnmarshalBinary(b []byte) error {
	var res PacketProtocolCustom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
